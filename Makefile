# CMC Development Makefile - Vollst√§ndige Docker-Integration

# Main Commands
all: docker-dev
	@echo "‚úÖ CMC started in development mode with Docker"

down: docker-down
	@echo "‚úÖ CMC stopped"

clean: docker-clean
	@echo "‚úÖ Everything cleaned"

# Docker Development (Empfohlen)
docker-dev: docker-setup
	@echo "üöÄ Starting CMC with Docker (PostgreSQL + pgAdmin + App)..."
	docker-compose up -d postgres pgadmin
	@echo "‚è≥ Waiting for services to be ready..."
	@sleep 10
	@$(MAKE) dev-migrate
	@echo ""
	@echo "‚úÖ Services ready!"
	@echo "   üì° Application: http://localhost:5000 | https://localhost:5001"
	@echo "   üìä pgAdmin: http://localhost:8080 (admin@example.com / admin)"
	@echo "   üóÑÔ∏è  PostgreSQL: localhost:5432 (postgres / password)"
	@echo "   üß™ Test Login: test@example.com / password123"
	@echo ""
	@echo "üîß pgAdmin ist bereits konfiguriert - Server 'CMC Development' sollte automatisch verf√ºgbar sein!"
	cd src/CMC.Web && dotnet run

docker-setup:
	@echo "üìÅ Setting up Docker configuration files..."
	@mkdir -p docker
	@if [ ! -f docker/postgres-init.sql ]; then \
		echo "Creating postgres-init.sql..."; \
		echo "-- Automatic database initialization" > docker/postgres-init.sql; \
		echo "SELECT 'CREATE DATABASE cmc_dev' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'cmc_dev')\\gexec" >> docker/postgres-init.sql; \
	fi
	@echo "‚úÖ Docker setup complete"

docker-down:
	@echo "üõë Stopping all Docker services..."
	docker-compose down

docker-clean:
	@echo "üßπ Cleaning all Docker resources..."
	docker-compose down --volumes --remove-orphans
	docker system prune -f

# Legacy Commands (f√ºr R√ºckw√§rtskompatibilit√§t)
dev-db:
	@echo "‚ö†Ô∏è  Legacy command - use 'make docker-dev' instead"
	@$(MAKE) docker-dev

dev-run: docker-dev

dev-migrate:
	@echo "üîÑ Running database migrations..."
	cd src/CMC.Web && dotnet ef database update --project ../CMC.Infrastructure
	@echo "‚úÖ Database migrations completed"

dev-test:
	@echo "üß™ Running tests..."
	dotnet test

# Debugging
debug-docker:
	@echo "üîç Docker Debug Information:"
	@echo ""
	@echo "üìã Running Containers:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "üåê Networks:"
	@docker network ls | grep cmc || echo "No CMC networks found"
	@echo ""
	@echo "üíæ Volumes:"
	@docker volume ls | grep cmc || echo "No CMC volumes found"
	@echo ""
	@echo "üóÑÔ∏è  Database Test:"
	@docker exec postgres-cmc-compose psql -U postgres -c "\\l" 2>/dev/null || echo "‚ùå Database not accessible"

logs:
	@echo "üìã Service Logs:"
	docker-compose logs --tail=50

logs-postgres:
	docker logs postgres-cmc-compose --tail=50

logs-pgadmin:
	docker logs pgadmin-cmc --tail=50

# Help
help:
	@echo "üéØ CMC Development Commands:"
	@echo ""
	@echo "Main Commands:"
	@echo "  make docker-dev    # Start everything (PostgreSQL + pgAdmin + App)"
	@echo "  make down          # Stop all services"
	@echo "  make clean         # Stop and remove everything"
	@echo ""
	@echo "Utilities:"
	@echo "  make dev-migrate   # Run database migrations"
	@echo "  make dev-test      # Run tests"
	@echo "  make debug-docker  # Show Docker debug info"
	@echo "  make logs          # Show all service logs"
	@echo ""
	@echo "üåê Services:"
	@echo "  App:      http://localhost:5000"
	@echo "  App:      https://localhost:5001"
	@echo "  pgAdmin:  http://localhost:8080"
	@echo ""
	@echo "üîë Credentials:"
	@echo "  App:      test@example.com / password123"
	@echo "  pgAdmin:  admin@example.com / admin"
	@echo "  Postgres: postgres / password"

.PHONY: all down clean docker-dev docker-setup docker-down docker-clean dev-db dev-run dev-migrate dev-test debug-docker logs logs-postgres logs-pgadmin help
