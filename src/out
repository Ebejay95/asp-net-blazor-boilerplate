-rw-rw-r--@ 1 jonathaneberle  staff  2146 13 Aug 21:11 ./Migrations/20250812121735_InitialCreate.cs
-rw-rw-r--@ 1 jonathaneberle  staff  2692 13 Aug 21:11 ./Migrations/20250812121735_InitialCreate.Designer.cs
-rw-rw-r--@ 1 jonathaneberle  staff  2591 13 Aug 21:11 ./Migrations/AppDbContextModelSnapshot.cs
-rw-rw-r--@ 1 jonathaneberle  staff  465 13 Aug 21:11 ./Migrations/migration_commands.txt
-rw-r--r--@ 1 jonathaneberle  staff  1574 12 Aug 12:26 ./Repositories/UserRepository.cs
-rw-r--r--@ 1 jonathaneberle  staff  855 12 Aug 13:59 ./DependencyInjection.cs
-rw-r--r--@ 1 jonathaneberle  staff  947 13 Aug 09:57 ./Persistence/AppDbContext.cs
-rw-r--r--@ 1 jonathaneberle  staff  831 13 Aug 09:54 ./CMC.Infrastructure.csproj
-rw-r--r--@ 1 jonathaneberle  staff  878 12 Aug 12:26 ./Services/EmailService.cs
=== FILE CONTENTS ===
=== ./Migrations/20250812121735_InitialCreate.cs ===
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CMC.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    PasswordHash = table.Column<string>(type: "text", nullable: false),
                    FirstName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    IsEmailConfirmed = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    LastLoginAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    PasswordResetToken = table.Column<string>(type: "text", nullable: true),
                    PasswordResetTokenExpiry = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    PasswordResetTokenExpiry = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
=== ./Migrations/20250812121735_InitialCreate.Designer.cs ===
﻿// <auto-generated />
using System;
using CMC.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CMC.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250812121735_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CMC.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/AppDbContextModelSnapshot.cs ===
﻿// <auto-generated />
using System;
using CMC.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CMC.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CMC.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
=== ./Migrations/migration_commands.txt ===
 Add migration (aus dem Web-Projekt-Verzeichnis)
dotnet ef migrations add InitialCreate --project ../CMC.Infrastructure --startup-project .

# Update database
dotnet ef database update --project ../CMC.Infrastructure --startup-project .

# Remove last migration
dotnet ef migrations remove --project ../CMC.Infrastructure --startup-project .

# Script migration
dotnet ef migrations script --project ../CMC.Infrastructure --startup-project . --output migration.sql
=== ./Repositories/UserRepository.cs ===
using CMC.Application.Ports;
using CMC.Domain.Entities;
using CMC.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;

namespace CMC.Infrastructure.Repositories;

public class UserRepository: IUserRepository {
  private readonly AppDbContext _context;

  public UserRepository(AppDbContext context) {
    _context = context;
  }

  public async Task<User?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) {
    return await _context.Users.FirstOrDefaultAsync(u => u.Id == id, cancellationToken);
  }

  public async Task<User?> GetByEmailAsync(string email, CancellationToken cancellationToken = default) {
    return await _context.Users.FirstOrDefaultAsync(u => u.Email == email, cancellationToken);
  }

  public async Task<User?> GetByPasswordResetTokenAsync(string token, CancellationToken cancellationToken = default) {
    return await _context.Users.FirstOrDefaultAsync(u => u.PasswordResetToken == token && u.PasswordResetTokenExpiry > DateTime.UtcNow, cancellationToken);
  }

  public async Task AddAsync(User user, CancellationToken cancellationToken = default) {
    _context.Users.Add(user);
    await _context.SaveChangesAsync(cancellationToken);
  }

  public async Task UpdateAsync(User user, CancellationToken cancellationToken = default) {
    _context.Users.Update(user);
    await _context.SaveChangesAsync(cancellationToken);
  }

  public async Task DeleteAsync(User user, CancellationToken cancellationToken = default) {
    _context.Users.Remove(user);
    await _context.SaveChangesAsync(cancellationToken);
  }
}
=== ./DependencyInjection.cs ===
using CMC.Application.Ports;
using CMC.Application.Services;
using CMC.Infrastructure.Persistence;
using CMC.Infrastructure.Repositories;
using CMC.Infrastructure.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace CMC.Infrastructure;

public static class DependencyInjection {
  public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration) {
    // Database
    services.AddDbContext<AppDbContext>(options => options.UseNpgsql(configuration.GetConnectionString("DefaultConnection")));

    // Repositories
    services.AddScoped<IUserRepository, UserRepository>();

    // Services
    services.AddScoped<IEmailService, EmailService>();
    services.AddScoped<UserService>();

    return services;
  }
}
=== ./Persistence/AppDbContext.cs ===
using CMC.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace CMC.Infrastructure.Persistence;

public class AppDbContext: DbContext {
  public AppDbContext(DbContextOptions<AppDbContext> options): base(options) {}

  public DbSet<User> Users => Set<User>();

  protected override void OnModelCreating(ModelBuilder modelBuilder) {
    modelBuilder.Entity<User>(entity => {
      entity.HasKey(u => u.Id);
      entity.Property(u => u.Email).IsRequired().HasMaxLength(255);
      entity.HasIndex(u => u.Email).IsUnique();
      entity.Property(u => u.PasswordHash).IsRequired();
      entity.Property(u => u.FirstName).IsRequired().HasMaxLength(100);
      entity.Property(u => u.LastName).IsRequired().HasMaxLength(100);
      entity.Property(u => u.CreatedAt).IsRequired();
    });

    // Zukünftige Entities hier hinzufügen:
    // modelBuilder.Entity<Assessment>(entity => {
    //     entity.HasKey(u => u.Id);
    // });
  }
}
=== ./CMC.Infrastructure.csproj ===
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\CMC.Domain\CMC.Domain.csproj"/>
    <ProjectReference Include="..\CMC.Application\CMC.Application.csproj"/>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.10"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10"/>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="8.0.10"/>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.1"/>
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="2.2.0"/>
  </ItemGroup>
</Project>
=== ./Services/EmailService.cs ===
using CMC.Application.Ports;
using Microsoft.Extensions.Logging;

namespace CMC.Infrastructure.Services;

public class EmailService: IEmailService {
  private readonly ILogger<EmailService> _logger;

  public EmailService(ILogger<EmailService> logger) {
    _logger = logger;
  }

  public Task SendPasswordResetEmailAsync(string email, string resetToken, CancellationToken cancellationToken = default) {
    // In production, implement actual email sending (SendGrid, SMTP, etc.)
    _logger.LogInformation("Sending password reset email to {Email} with token {Token}", email, resetToken);
    return Task.CompletedTask;
  }

  public Task SendWelcomeEmailAsync(string email, string firstName, CancellationToken cancellationToken = default) {
    _logger.LogInformation("Sending welcome email to {Email} for {FirstName}", email, firstName);
    return Task.CompletedTask;
  }
}
