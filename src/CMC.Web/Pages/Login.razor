@page "/login"
@using System.ComponentModel.DataAnnotations
@using CMC.Web.Services
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime
@inject IBumperBus Bumper

<PageTitle>Login</PageTitle>

<section class="slim">
    <div class="card">
        <h2>Login</h2>

        <FormRenderer
            Model="@_vm"
            Request="@_req"
            ExtraFields="new()"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnFieldChanged" />

        <div class="mt-4">
            <button type="button" class="btn primary" @onclick="HandleLogin" disabled="@_isLoading">
                @if (_isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </div>

        <p class="mt-4">
            Don't have an account? <a href="/register">Register here</a>
        </p>
        <p>
            <a href="/forgot-password">Forgot Password?</a>
        </p>
    </div>
</section>

@code {
    // rein "manuelles" ViewModel ‚Äì kein CRUD/EFEdit
    private sealed class LoginVm
    {
        [Required, EmailAddress, Display(Name="Email")]
        public string Email { get; set; } = string.Empty;

        [Required, Display(Name="Password")]
        public string Password { get; set; } = string.Empty;
    }

    private readonly LoginVm _vm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors    = new(StringComparer.OrdinalIgnoreCase);
    private bool _isLoading;

    // Minimaler Request f√ºr FormRenderer (wir verwenden ihn NICHT f√ºr Save)
    private EFEditRequest _req => new EFEditRequest
    {
        Title = "Login",
        Model = _vm,
        ContractsAssembly = typeof(Login).Assembly, // irrelevant hier
        IsCreate = true
    };

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(LoginVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleLogin()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // DataAnnotations lokal pr√ºfen (damit FormRenderer Fehler anzeigen kann)
            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, validateAllProperties: true);

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_errors.TryGetValue(key, out var list))
                        _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Please check your inputs.", "error");
                return;
            }

            Logger.LogInformation("üîê Login attempt for: {Email}", _vm.Email);

            // Cookie-Login √ºber vorhandene JS-Interop (spricht deinen API-Controller)
            var payload = new { Email = _vm.Email, Password = _vm.Password };
            var success = await JSRuntime.InvokeAsync<bool>("submitLoginForm", payload);

            if (success)
            {
                Logger.LogInformation("‚úÖ Login successful for: {Email}", _vm.Email);
                Bumper.Publish("Login", "Login successful! Redirecting‚Ä¶", "success", 1500);
                await Task.Delay(800);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Logger.LogWarning("‚ùå Login failed for: {Email}", _vm.Email);
                Bumper.Publish("Login failed", "Invalid email or password.", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for: {Email}", _vm.Email);
            Bumper.Publish("Error", "An unexpected error occurred.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
