@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using CMC.Web.Services
@using CMC.Web.Pages.FormFields
@using CMC.Application.Services
@using CMC.Contracts.Common
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IBumperBus Bumper
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

<section class="center single relative pointer-none">

    <div class="card">
        <h2>Login</h2>

        <FormRenderer
            Model="@_loginVm"
            Request="@_loginReq"
            ExtraFields="new()"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnLoginFieldChanged"
            EnableFormSubmit="true"
            OnSubmit="HandleLogin"
            SubmitButtonText="Anmelden"
            SubmitButtonClass="primary"
            IsSubmitDisabled="@_isLoading"
            LoadingText="Anmeldung läuft..."
            EnableEnterSubmit="true" />

        <p class="mt-4">
            Noch kein Konto? <a href="/register">Hier registrieren</a>
        </p>
        <p>
            <a href="/forgot-password">Passwort vergessen?</a>
        </p>
    </div>
</section>

@code {
    // Login ViewModel
    private sealed class LoginVm
    {
        [Required, EmailAddress, Display(Name="Email")]
        public string Email { get; set; } = string.Empty;

        [Required, Display(Name="Password")]
        public string Password { get; set; } = string.Empty;
    }

    private readonly LoginVm _loginVm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);

    private bool _isLoading;


    // Minimaler Request für FormRenderer
    private EFEditRequest _loginReq => new EFEditRequest
    {
        Title = "Login",
        Model = _loginVm,
        ContractsAssembly = typeof(LoginVm).Assembly,
        IsCreate = true
    };

    private void OnLoginFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(LoginVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_loginVm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleLogin()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // DataAnnotations lokal prüfen
            var ctx = new ValidationContext(_loginVm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_loginVm, ctx, results, validateAllProperties: true);

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_errors.TryGetValue(key, out var list))
                        _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Bitte prüfen Sie Ihre Eingaben.", "error");
                return;
            }

            Logger.LogInformation("Login attempt for: {Email}", _loginVm.Email);

            // Call API endpoint (which sets cookies server-side) - GEÄNDERT zu relativem Pfad
            var response = await Http.PostAsJsonAsync("api/auth/login", new
            {
                Email = _loginVm.Email,
                Password = _loginVm.Password
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginApiResponse>();

                if (result?.success == true)
                {
                    if (!string.IsNullOrWhiteSpace(result.redirectUrl))
                    {
                        Logger.LogInformation("Login successful for: {Email}, redirecting to: {Url}", _loginVm.Email, result.redirectUrl);
                        Bumper.Publish("Login", result.message ?? "Login erfolgreich!", "success", 1500);

                        await Task.Delay(800); // Short delay for user feedback
                        Navigation.NavigateTo(result.redirectUrl, forceLoad: true);
                        return;
                    }
                    else
                    {
                        // Direct login success (should not happen with new flow)
                        Logger.LogInformation("Direct login successful for: {Email}", _loginVm.Email);
                        Bumper.Publish("Login", "Anmeldung erfolgreich! Weiterleitung...", "success", 1500);
                        await Task.Delay(800);
                        Navigation.NavigateTo("/", forceLoad: true);
                    }
                }
                else
                {
                    Logger.LogWarning("Login API returned success=false for: {Email}. Message: {Message}", _loginVm.Email, result?.message);
                    Bumper.Publish("Login failed", result?.message ?? "Login failed", "error");
                }
            }
            else
            {
                // Handle HTTP error response
                string errorMessage = "Ungültige E-Mail oder Passwort.";

                try
                {
                    var errorContent = await response.Content.ReadFromJsonAsync<LoginApiResponse>();
                    if (!string.IsNullOrWhiteSpace(errorContent?.message))
                    {
                        errorMessage = errorContent.message;
                    }
                }
                catch
                {
                    // If we can't parse the error, use default message
                }

                Logger.LogWarning("Login failed for: {Email}. Status: {Status}", _loginVm.Email, response.StatusCode);
                Bumper.Publish("Login failed", errorMessage, "error");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "Network error during login for: {Email}", _loginVm.Email);
            Bumper.Publish("Network Error", "Verbindungsfehler. Bitte versuchen Sie es erneut.", "error");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for: {Email}", _loginVm.Email);
            Bumper.Publish("Error", "Ein unerwarteter Fehler ist aufgetreten.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }

    // Response model for API
    private class LoginApiResponse
    {
        public bool success { get; set; }
        public bool? requires2FA { get; set; }
        public bool? requiresSetup { get; set; }
        public string? message { get; set; }
        public string? redirectUrl { get; set; }
        public object? user { get; set; }
    }
}
