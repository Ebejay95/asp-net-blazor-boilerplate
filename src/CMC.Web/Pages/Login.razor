@page "/login"
@using CMC.Contracts.Users
@using CMC.Application.Services
@using CMC.Web.Services
@inject UserService UserService
@inject PersistentInMemoryAuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Login</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            Don't have an account? <a href="/register">Register here</a>
        </p>
        <p>
            <a href="/forgot-password">Forgot Password?</a>
        </p>

        <!-- Debug Buttons (entfernen in Production) -->
        <hr />
        <div class="mb-3">
            <button class="btn btn-success" @onclick="QuickTestLogin">
                üß™ Quick Test Login
            </button>
        </div>
        <div class="mb-3">
            <button class="btn btn-info" @onclick="DebugCurrentState">
                üîç Debug Current State
            </button>
        </div>

        @if (!string.IsNullOrEmpty(debugInfo))
        {
            <div class="alert alert-info">
                <h6>Debug Info:</h6>
                <pre>@debugInfo</pre>
            </div>
        }

        <p><a href="/auth-debug">Go to Auth Debug</a></p>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string debugInfo = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            Logger.LogInformation("üîê Login attempt for: {Email}", loginRequest.Email);

            // SCHRITT 1: UserService Login
            var user = await UserService.LoginAsync(loginRequest);
            Logger.LogInformation("üîç UserService.LoginAsync result: {User}", user != null ? $"User found: {user.Email}" : "null");

            if (user != null)
            {
                Logger.LogInformation("‚úÖ Login successful for: {Email}", loginRequest.Email);

                // SCHRITT 2: Session ID f√ºr InMemory-Key verwenden
                var httpContext = HttpContextAccessor.HttpContext;
                if (httpContext?.Session != null)
                {
                    try
                    {
                        await httpContext.Session.LoadAsync();
                        var sessionId = httpContext.Session.Id;
                        Logger.LogInformation("üìã Using Session ID: {SessionId}", sessionId);

                        // SCHRITT 3: Persistent InMemory Authentication setzen
                        AuthProvider.SetUserSession(sessionId, user.Id.ToString(), user.Email,
                            user.FirstName, user.LastName);

                        Logger.LogInformation("‚úÖ PersistentInMemory session set for: {Email}", user.Email);

                        // SCHRITT 4: Authentifizierung testen
                        await Task.Delay(100);
                        var authState = await AuthProvider.GetAuthenticationStateAsync();
                        Logger.LogInformation("üîê Auth check after login - IsAuthenticated: {IsAuth}, Name: {Name}",
                            authState.User.Identity?.IsAuthenticated, authState.User.Identity?.Name);

                        if (authState.User.Identity?.IsAuthenticated == true)
                        {
                            successMessage = "Login successful! Redirecting...";
                            StateHasChanged();

                            // Zur Home-Seite weiterleiten
                            await Task.Delay(1000);
                            Navigation.NavigateTo("/dashboard");
                        }
                        else
                        {
                            errorMessage = "Authentication setup failed. Please try again.";
                            Logger.LogError("‚ùå Authentication not working after session set");
                        }
                    }
                    catch (Exception sessionEx)
                    {
                        Logger.LogError(sessionEx, "‚ùå Session setup failed");
                        errorMessage = $"Session error: {sessionEx.Message}";
                    }
                }
                else
                {
                    errorMessage = "Session not available. Please try again.";
                    Logger.LogError("‚ùå HttpContext.Session is null");
                }
            }
            else
            {
                Logger.LogWarning("‚ùå Login failed for: {Email}", loginRequest.Email);
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for: {Email}", loginRequest.Email);
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task QuickTestLogin()
    {
        loginRequest.Email = "test@example.com";
        loginRequest.Password = "password123";
        await HandleLogin();
    }

    private async Task DebugCurrentState()
    {
        try
        {
            var info = new System.Text.StringBuilder();

            // HttpContext pr√ºfen
            var httpContext = HttpContextAccessor.HttpContext;
            info.AppendLine($"HttpContext available: {httpContext != null}");

            if (httpContext != null)
            {
                info.AppendLine($"Session available: {httpContext.Session != null}");
                if (httpContext.Session != null)
                {
                    await httpContext.Session.LoadAsync();
                    info.AppendLine($"Session ID: {httpContext.Session.Id}");
                    info.AppendLine($"Session IsAvailable: {httpContext.Session.IsAvailable}");
                }
            }

            // AuthProvider pr√ºfen
            info.AppendLine($"AuthProvider type: {AuthProvider.GetType().Name}");

            if (AuthProvider is PersistentInMemoryAuthenticationStateProvider inMemoryProvider)
            {
                var sessionDebugInfo = inMemoryProvider.GetAllSessions();
                info.AppendLine($"Active sessions: {inMemoryProvider.GetActiveSessionsCount()}");
                foreach (var kvp in sessionDebugInfo.Take(3))
                {
                    info.AppendLine($"  {kvp.Key}: {kvp.Value.Email}");
                }
            }

            // Current auth state
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            info.AppendLine($"Currently authenticated: {authState.User.Identity?.IsAuthenticated}");
            info.AppendLine($"User name: {authState.User.Identity?.Name ?? "null"}");

            debugInfo = info.ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            debugInfo = $"Debug error: {ex.Message}";
            Logger.LogError(ex, "Debug error");
        }
    }
}
