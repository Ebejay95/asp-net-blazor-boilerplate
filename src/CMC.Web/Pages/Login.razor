@page "/login"
@using CMC.Contracts.Users
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div>
        <h2>Login</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            Don't have an account? <a href="/register">Register here</a>
        </p>
        <p>
            <a href="/forgot-password">Forgot Password?</a>
        </p>

        <!-- Debug Button -->
        <div class="mb-3">
            <button class="btn btn-success" @onclick="QuickTestLogin">
                üß™ Quick Test Login (test@example.com)
            </button>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            Logger.LogInformation("üîê Login attempt for: {Email}", loginRequest.Email);

            // Sende Login-Request an API Controller
            var response = await JSRuntime.InvokeAsync<bool>("submitLoginForm", loginRequest);

            if (response)
            {
                Logger.LogInformation("‚úÖ Login successful for: {Email}", loginRequest.Email);
                successMessage = "Login successful! Redirecting...";
                StateHasChanged();

                // Warte kurz und lade die Seite neu f√ºr Auth-State Update
                await Task.Delay(1000);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Logger.LogWarning("‚ùå Login failed for: {Email}", loginRequest.Email);
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for: {Email}", loginRequest.Email);
            errorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task QuickTestLogin()
    {
        loginRequest.Email = "test@example.com";
        loginRequest.Password = "password123";
        await HandleLogin();
    }
}
