
@using System.Linq
@using CMC.Contracts.Users
@using CMC.Contracts.Customers
@using CMC.Web.Shared
@using CMC.Web.Services
@inject CMC.Application.Services.UserService UserService
@inject CMC.Application.Services.CustomerService CustomerService
@inject EditDrawerService DrawerService
@inject DialogService ConfirmService

<div class="card">
    <AutoTable TItem="UserDto"
               Items="_users"
               AllowEdit="true"
               OnEdit="StartEdit"
               AllowCreate="true"
               OnCreate="StartCreate" />
</div>

@code {
    private List<UserDto> _users = new();
    private List<CustomerDto> _customers = new();

    protected override async Task OnInitializedAsync()
    {
        _users = await UserService.GetAllAsync();
        _customers = await CustomerService.GetAllAsync();
    }

    private async Task ReloadAsync()
    {
        _users = await UserService.GetAllAsync();
        _customers = await CustomerService.GetAllAsync();
        StateHasChanged();
    }

    // ---------- Drawer Builder (einheitlich für Create/Edit) ----------
    private async Task<EditDrawerRequest> BuildUserDrawer(UserDto model, bool isCreate)
    {
        if (_customers.Count == 0)
            _customers = await CustomerService.GetAllAsync();

        var req = new EditDrawerRequest
        {
            Title = isCreate ? "Benutzer anlegen" : "Benutzer bearbeiten",
            Model = model,
            ContractsAssembly = typeof(UserDto).Assembly, // CMC.Contracts.Users
            IsCreate = isCreate,
            OnSave = async ctx =>
            {
                try
                {
                    if (isCreate)
                    {
                        // Register: Passwort-Feld existiert nur im Create-Flow
                        var reg = (RegisterUserRequest)ctx.Build("Register");
                        _ = await UserService.RegisterAsync(reg);
                        await ReloadAsync();
                    }
                    else
                    {
                        var up = (UpdateUserRequest)ctx.Build("Update");
                        await UserService.UpdateAsync(up);
                        await ReloadAsync();
                    }

                    DrawerService.Close();
                }
                catch (Exception ex)
                {
                    ConfirmService.Open(new DialogRequest
                    {
                        Title = "Fehler",
                        Message = ex.Message,
                        ConfirmText = "Okay",
                        OnConfirm = () => Task.CompletedTask
                    });
                }
            },
            OnDelete = async ctx =>
            {
                var m = (UserDto)ctx.Model;
                ConfirmService.Open(new DialogRequest
                {
                    Title = "Löschen bestätigen",
                    Message = $"Benutzer „{m.FirstName} {m.LastName}“ wirklich löschen?",
                    ConfirmText = "Löschen",
                    OnConfirm = async () =>
                    {
                        try
                        {
                            await UserService.DeleteAsync(new DeleteUserRequest(m.Id));
                            await ReloadAsync();
                            DrawerService.Close();
                        }
                        catch (Exception ex)
                        {
                            ConfirmService.Open(new DialogRequest
                            {
                                Title = "Löschen fehlgeschlagen",
                                Message = ex.Message,
                                ConfirmText = "Okay",
                                OnConfirm = () => Task.CompletedTask
                            });
                        }
                    }
                });
            }
        };

        // ----- Relation: Firma (1:1) -----
        // Options füttern den Dropdown im FormRenderer; der liefert beim Speichern über
        // CompositeValueProvider den Wert "CustomerId" zurück (Guid? als string -> Guid).
		req.ExtraFields.Add(new ExtraField(
			Name: "CustomerId",
			Label: "Firma",
			Type: typeof(Guid?),
			ReadOnly: false,
			Hint: "Firma suchen oder neu anlegen.",
			DataType: "relation-single",
			Value: model.CustomerId,
			Options: new(), // optional: initial leer
			OnCreateNew: CreateCustomerInline,
			OnSearch: async (term) =>
			{
				var all = await CustomerService.GetAllAsync();
				var filtered = string.IsNullOrWhiteSpace(term)
					? all
					: all.Where(c => c.Name.Contains(term, StringComparison.OrdinalIgnoreCase));
				return filtered
					.Select(c => new KeyValuePair<string,string>(c.Name, c.Id.ToString()))
					.ToList();
			},
			DebounceMs: 300
		));

        // ----- Passwort NUR bei Create zeigen -----
        if (isCreate)
        {
            req.ExtraFields.Add(new ExtraField(
                Name: "Password",
                Label: "Passwort",
                Type: typeof(string),
                ReadOnly: false,
                Hint: "Mindestens 8 Zeichen",
                DataType: "password" // Wird aktuell wie Text gerendert; Maskierung kannst du im FormRenderer leicht ergänzen.
            ));
        }

        return req;
    }

    private async Task StartEdit(UserDto u)
        => DrawerService.Open(await BuildUserDrawer(u, isCreate: false));

    private async Task StartCreate()
    {
        var empty = new UserDto(
            Id: Guid.Empty,
            Email: "",
            FirstName: "",
            LastName: "",
            Role: "",
            Department: "",
            IsEmailConfirmed: false,
            CreatedAt: DateTime.UtcNow,
            LastLoginAt: null,
            CustomerId: null,
            CustomerName: null
        );

        DrawerService.Open(await BuildUserDrawer(empty, isCreate: true));
    }

    // ---------- Optional: Inline Create Firma (separater Drawer) ----------
    // Diese Methode bleibt verfügbar – einen UI-Trigger (z.B. Button neben dem Dropdown)
    // kannst du später ergänzen. Der FormRenderer selbst unterstützt aktuell keinen
    // OnCreateNew-Hook.
    private async Task<KeyValuePair<string, string>?> CreateCustomerInline()
	{
		var empty = new CustomerDto(
			Id: Guid.Empty,
			Name: "",
			Industry: "",
			EmployeeCount: 0,
			RevenuePerYear: 0m,
			IsActive: true,
			CreatedAt: DateTime.UtcNow,
			UpdatedAt: DateTime.UtcNow,
			UserCount: 0
		);

		var result = await DrawerService.OpenForResult<KeyValuePair<string, string>?>(
			new EditDrawerRequest
			{
				Title = "Firma anlegen",
				Model = empty,
				ContractsAssembly = typeof(CustomerDto).Assembly,
				IsCreate = true,
				OnSave = async ctx =>
				{
					try
					{
						var req = (CreateCustomerRequest)ctx.Build("Create");
						var created = await CustomerService.CreateAsync(req);

						// Refresh für Dropdown
						_customers = await CustomerService.GetAllAsync();

						// Ergebnis an den aufrufenden RelationPicker zurückgeben und NUR den Top-Drawer schließen
						DrawerService.Close(new KeyValuePair<string, string>(created.Name, created.Id.ToString()));
					}
					catch (Exception ex)
					{
						ConfirmService.Open(new DialogRequest
						{
							Title = "Fehler beim Anlegen",
							Message = ex.Message,
							ConfirmText = "Okay",
							OnConfirm = () => Task.CompletedTask
						});
					}
				},
				OnDelete = _ => Task.CompletedTask
			}
		);

		return result;
	}
}
