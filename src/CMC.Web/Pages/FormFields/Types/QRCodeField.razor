@using CMC.Web.Pages.FormFields
@using CMC.Application.Services
@using Microsoft.JSInterop
@inherits FormFieldBase
@inject UserService UserService
@inject IJSRuntime JSRuntime

<div class="form-row @(Errors?.Length > 0 ? "is-invalid" : null)">
    <div class="qr-container">
        @if (!string.IsNullOrWhiteSpace(CurrentSecret))
        {

                <p>
                    @(Issuer ?? "CMC App") - @(AccountName ?? "Benutzer")
                </p>
                <img src="@GetQRCodeDataUrl()" alt="QR Code für 2FA Setup" class="qr-image" />

                    <div class="qr-content">
                        <p>Scannen Sie den QR-Code mit Ihrer Authenticator-App oder fügen Sie den Code manuell hinzu:</p>

                            <div class="secret-text">@FormatSecretForDisplay(CurrentSecret)</div>
                        </div>
                    </div>

                @if (!ReadOnly)
                {
                    <div class="btn-group">
                        <button type="button" class="btn" @onclick="CopySecret" title="In Zwischenablage kopieren">
                            Kopieren
                        </button>
                        <button type="button" class="btn" @onclick="GenerateNewSecret">
                            Neuen Code generieren
                        </button>
                    </div>
                }
        }
    </div>

    @if (!string.IsNullOrWhiteSpace(Hint))
    {
        <div class="form-hint">@Hint</div>
    }
    @if (Errors?.Length > 0)
    {
        <div class="field-error">
            @foreach (var e in Errors) { <div>@e</div> }
        </div>
    }
</div>

@code {
    [Parameter] public string? Issuer { get; set; } = "CMC App";
    [Parameter] public string? AccountName { get; set; } = "user@example.com";
    [Parameter] public bool ShowSecret { get; set; } = false;

    private string CurrentSecret = "";
    private bool _secretVisible = false;

    protected override void OnInitialized()
    {
        if (Value is string existingSecret && !string.IsNullOrWhiteSpace(existingSecret))
        {
            CurrentSecret = existingSecret;
        }
        else
        {
            GenerateNewSecret();
        }
    }

    private void GenerateNewSecret()
    {
        CurrentSecret = UserService.GenerateTwoFASecret();
        OnChanged(CurrentSecret);
        StateHasChanged();
    }

    private async Task CopySecret()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", CurrentSecret);
        }
        catch
        {
            _secretVisible = true;
            StateHasChanged();
        }
    }

    private void ToggleSecretVisibility()
    {
        _secretVisible = !_secretVisible;
        StateHasChanged();
    }

    private string FormatSecretForDisplay(string secret)
    {
        if (string.IsNullOrWhiteSpace(secret))
            return "";

        if (!_secretVisible && !ShowSecret)
            return new string('*', secret.Length);

        // Gruppiere in 4er-Blöcke für bessere Lesbarkeit
        var formatted = "";
        for (int i = 0; i < secret.Length; i += 4)
        {
            if (i > 0) formatted += " ";
            formatted += secret.Substring(i, Math.Min(4, secret.Length - i));
        }
        return formatted;
    }

    private string GetOtpAuthUrl()
    {
        var issuer = Uri.EscapeDataString(Issuer ?? "CMC App");
        var account = Uri.EscapeDataString(AccountName ?? "user@example.com");
        return $"otpauth://totp/{issuer}:{account}?secret={CurrentSecret}&issuer={issuer}&algorithm=SHA1&digits=6&period=30";
    }

    private string GetQRCodeDataUrl()
    {
        var otpUrl = GetOtpAuthUrl();
        var size = 180;
        return $"https://api.qrserver.com/v1/create-qr-code/?size={size}x{size}&data={Uri.EscapeDataString(otpUrl)}&format=png&margin=10";
    }

    protected override void OnParametersSet()
    {
        if (Value is string secret && secret != CurrentSecret && !string.IsNullOrWhiteSpace(secret))
        {
            CurrentSecret = secret;
        }

        if (string.IsNullOrWhiteSpace(AccountName) || AccountName == "user@example.com")
        {
            AccountName = TryGetEmailFromParent() ?? AccountName;
        }
    }

    private string? TryGetEmailFromParent()
    {
        return null; // Wird später implementiert
    }
}
