@using Microsoft.AspNetCore.Components
@using System.Linq
@using CMC.Web.Pages.FormFields
@inherits FormFieldBase

<div class="form-row @(Errors?.Length > 0 ? "is-invalid" : null)">
    <label class="form-label" for="@Name">@Label</label>

    <div class="input-with-addon">
        <input
            class="@ControlCss()"
            id="@Name"
            type="@GetInputType()"
            value="@(Value?.ToString() ?? string.Empty)"
            disabled="@ReadOnly"
            required="@Required"
            autocomplete="@Autocomplete"
            @oninput="HandleInput"
            @attributes="AdditionalAttributes" />

        <button
            type="button"
            class="btn link small input-addon"
            @onclick="ToggleShow"
            aria-label="@GetAriaLabel()">
            @GetToggleText()
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(Hint))
    {
        <div class="form-hint">@Hint</div>
    }

    @if (Errors?.Length > 0)
    {
        <div class="field-error">
            @foreach (var e in Errors) { <div>@e</div> }
        </div>
    }
</div>

@code {
    [Parameter] public string? Autocomplete { get; set; } = "new-password";

    private bool _show;
    private bool CheckLen, CheckUpper, CheckLower, CheckDigit, CheckSpecial;
    private bool _satisfiedAll => CheckLen && CheckUpper && CheckLower && CheckDigit && CheckSpecial;

    private string GetInputType() => _show ? "text" : "password";
    private string GetToggleText() => _show ? "Verbergen" : "Anzeigen";
    private string GetAriaLabel() => _show ? "Passwort verbergen" : "Passwort anzeigen";
    private string GetHintClass(bool ok) => ok ? "ok" : "warn";

    private void ToggleShow() => _show = !_show;

    private async Task HandleInput(ChangeEventArgs e)
    {
        var v = e.Value?.ToString() ?? string.Empty;
        RunLocalChecks(v);
        await OnChanged(v);
    }

    private void RunLocalChecks(string v)
    {
        CheckLen     = v?.Length >= 12;
        CheckUpper   = v?.Any(char.IsUpper) == true;
        CheckLower   = v?.Any(char.IsLower) == true;
        CheckDigit   = v?.Any(char.IsDigit) == true;
        CheckSpecial = !string.IsNullOrEmpty(v) && v.Any(c => !char.IsLetterOrDigit(c));
        StateHasChanged();
    }
}
