@using Microsoft.AspNetCore.Components
@using System.Linq
@using CMC.Web.Pages.FormFields
@inherits FormFieldBase

<div class="form-row @(Errors?.Length > 0 ? "is-invalid" : null)">
    <label class="form-label" for="@Name">@Label</label>

    <div class="form-control-group">
        <input
            class="@ControlCss()"
            id="@Name"
            type="@GetInputType()"
            value="@(Value?.ToString() ?? string.Empty)"
            disabled="@ReadOnly"
            required="@Required"
            autocomplete="@Autocomplete"
            @oninput="HandleInput"
            @attributes="AdditionalAttributes" />

        <button
            type="button"
            class="btn flat link small input-addon"
            @onclick="ToggleShow"
            aria-label="@GetAriaLabel()">
            @((MarkupString)GetToggleText())
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(Hint))
    {
        <div class="form-hint">@Hint</div>
    }

    @if (Errors?.Length > 0)
    {
        <div class="field-error">
            @foreach (var e in Errors) { <div>@e</div> }
        </div>
    }
</div>

@code {
    [Parameter] public string? Autocomplete { get; set; } = "new-password";

    private bool _show;
    private bool CheckLen, CheckUpper, CheckLower, CheckDigit, CheckSpecial;
    private bool _satisfiedAll => CheckLen && CheckUpper && CheckLower && CheckDigit && CheckSpecial;

    private string GetInputType() => _show ? "text" : "password";
private string GetToggleText() => _show
    ? @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke-width=""1.5"" stroke=""currentColor"" class=""size-6""><path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88"" /></svg>"
    : @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke-width=""1.5"" stroke=""currentColor"" class=""size-6""><path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"" /><path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"" /></svg>";


    private string GetAriaLabel() => _show ? "Passwort verbergen" : "Passwort anzeigen";
    private string GetHintClass(bool ok) => ok ? "ok" : "warn";

    private void ToggleShow() => _show = !_show;

    private async Task HandleInput(ChangeEventArgs e)
    {
        var v = e.Value?.ToString() ?? string.Empty;
        RunLocalChecks(v);
        await OnChanged(v);
    }

    private void RunLocalChecks(string v)
    {
        CheckLen     = v?.Length >= 12;
        CheckUpper   = v?.Any(char.IsUpper) == true;
        CheckLower   = v?.Any(char.IsLower) == true;
        CheckDigit   = v?.Any(char.IsDigit) == true;
        CheckSpecial = !string.IsNullOrEmpty(v) && v.Any(c => !char.IsLetterOrDigit(c));
        StateHasChanged();
    }
}
