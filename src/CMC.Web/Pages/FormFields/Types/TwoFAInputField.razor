@using CMC.Web.Pages.FormFields
@inherits FormFieldBase
@inject IJSRuntime JSRuntime

<div class="form-row @(Errors?.Length > 0 ? "is-invalid" : null)">
    <label class="form-label" for="@Name">@Label</label>

    <div class="totp-inputs-wrapper">
        <div class="totp-input-container">
            @for (int i = 0; i < 6; i++)
            {
                var index = i; // Lokale Kopie für den Closure
                <input
                    type="text"
                    id="@($"{Name}_{index}")"
                    class="form-control totp-digit @(Errors?.Length > 0 ? "is-invalid" : "")"
                    value="@GetDigitValue(index)"
                    @oninput="@(async (e) => await HandleDigitInput(e, index))"
                    @onkeydown="@(async (e) => await HandleKeyDown(e, index))"
                    @onpaste="@(async (e) => await HandlePaste(e, index))"
                    maxlength="1"
                    pattern="[0-9]"
                    inputmode="numeric"
                    autocomplete="one-time-code"
                    readonly="@ReadOnly"
                    disabled="@ReadOnly"
                    style="width: 50px; text-align: center;" />
            }
        </div>

        <div class="totp-help">
            <small class="text-muted">
                Geben Sie den 6-stelligen Code aus Ihrer Authenticator-App ein
            </small>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(Hint))
    {
        <div class="form-hint">@Hint</div>
    }
    @if (Errors?.Length > 0)
    {
        <div class="field-error">
            @foreach (var e in Errors) { <div>@e</div> }
        </div>
    }
</div>
@code {
    private string[] digits = new string[6];
    private string CurrentValue => string.Join("", digits);

    protected override void OnInitialized()
    {
        // Initialisiere digits array basierend auf dem aktuellen Wert
        var currentValue = Value?.ToString() ?? "";
        for (int i = 0; i < 6; i++)
        {
            digits[i] = i < currentValue.Length ? currentValue[i].ToString() : "";
        }
        base.OnInitialized();
    }

    private string GetDigitValue(int index)
    {
        return index < digits.Length ? digits[index] : "";
    }

    private async Task HandleDigitInput(ChangeEventArgs e, int index)
    {
        var input = e.Value?.ToString() ?? "";

        // Nur Ziffern erlauben
        var sanitized = SanitizeDigit(input);

        if (sanitized != digits[index])
        {
            digits[index] = sanitized;

            // Wenn eine Ziffer eingegeben wurde, zum nächsten Feld wechseln
            if (!string.IsNullOrEmpty(sanitized) && index < 5)
            {
                await FocusNextField(index + 1);
            }

            await UpdateValue();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, int index)
    {
        switch (e.Key)
        {
            case "Backspace":
                if (string.IsNullOrEmpty(digits[index]) && index > 0)
                {
                    // Wenn das aktuelle Feld leer ist, zum vorherigen Feld wechseln
                    await FocusPreviousField(index - 1);
                }
                else if (!string.IsNullOrEmpty(digits[index]))
                {
                    // Aktuelles Feld leeren
                    digits[index] = "";
                    await UpdateValue();
                }
                break;

            case "ArrowLeft":
                if (index > 0)
                    await FocusPreviousField(index - 1);
                break;

            case "ArrowRight":
                if (index < 5)
                    await FocusNextField(index + 1);
                break;
        }
    }

    private async Task HandlePaste(ClipboardEventArgs e, int startIndex)
    {
        // Paste-Funktionalität für das Einfügen des kompletten Codes
        try
        {
            var clipboardText = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");
            var sanitized = SanitizeInput(clipboardText);

            if (!string.IsNullOrEmpty(sanitized))
            {
                // Verteile die Ziffern auf die Felder
                for (int i = 0; i < Math.Min(sanitized.Length, 6 - startIndex); i++)
                {
                    if (startIndex + i < 6)
                    {
                        digits[startIndex + i] = sanitized[i].ToString();
                    }
                }

                await UpdateValue();
                StateHasChanged();

                // Fokus auf das letzte ausgefüllte Feld oder das nächste leere Feld setzen
                var lastFilledIndex = Math.Min(startIndex + sanitized.Length - 1, 5);
                await FocusField(lastFilledIndex);
            }
        }
        catch
        {
            // Paste nicht verfügbar oder fehlgeschlagen - ignorieren
        }
    }

    private async Task FocusNextField(int index)
    {
        if (index <= 5)
        {
            await FocusField(index);
        }
    }

    private async Task FocusPreviousField(int index)
    {
        if (index >= 0)
        {
            await FocusField(index);
        }
    }

    private async Task FocusField(int index)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("focusElement", $"{Name}_{index}");
        }
        catch
        {
            // Ignore JS errors
        }
    }

    private async Task UpdateValue()
    {
        var newValue = CurrentValue;
        if (newValue != (Value?.ToString() ?? ""))
        {
            await OnChanged(newValue);
        }
    }

    private static string SanitizeDigit(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        // Nur die erste Ziffer nehmen
        var firstDigit = input.FirstOrDefault(char.IsDigit);
        return firstDigit != default(char) ? firstDigit.ToString() : "";
    }

    private static string SanitizeInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        // Nur Ziffern erlauben, maximal 6 Zeichen
        var digits = new string(input.Where(char.IsDigit).Take(6).ToArray());
        return digits;
    }
}

<script>
    window.focusElement = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.focus();
            element.select();
        }
    };
</script>
