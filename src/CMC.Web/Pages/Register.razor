@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using CMC.Web.Services
@using CMC.Application.Services
@using CMC.Contracts.Users
@using CMC.Domain.Common
@using CMC.Contracts.Common
@inject UserService UserService
@inject NavigationManager Navigation
@inject ILogger<Register> Logger
@inject IBumperBus Bumper

<PageTitle>Register</PageTitle>

<section class="slim center">
    <div class="card">
        <h2>Register</h2>

        <FormRenderer
            Model="@_vm"
            Request="@_req"
            ExtraFields="new()"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnFieldChanged" />

        <div class="mt-4">
            <button type="button" class="btn primary" @onclick="HandleRegister" disabled="@_isLoading">
                @if (_isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Registering...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </div>

        <p class="mt-4">
            Already have an account? <a href="/login">Login here</a>
        </p>
    </div>
</section>

@code {
    private sealed class RegisterVm
    {
        [Required, Display(Name="First Name")]
        public string FirstName { get; set; } = string.Empty;

        [Required, Display(Name="Last Name")]
        public string LastName { get; set; } = string.Empty;

        [Required, EmailAddress, Display(Name="Email")]
        public string Email { get; set; } = string.Empty;

        [Required, MinLength(12), StrongPassword, Display(Name="Password")]
        public string Password { get; set; } = string.Empty;

        [Required, Display(Name="Confirm Password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private readonly RegisterVm _vm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);
    private bool _isLoading;

    private EFEditRequest _req => new EFEditRequest
    {
        Title = "Register",
        Model = _vm,
        ContractsAssembly = typeof(Register).Assembly,
        IsCreate = true
    };

    protected override void OnInitialized()
    {
        // UX: PW Autocomplete
        _overrides["Password_Autocomplete"] = "new-password";
        _overrides["ConfirmPassword_Autocomplete"] = "new-password";
    }

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(RegisterVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);

        if (change.Name.Equals("ConfirmPassword", StringComparison.OrdinalIgnoreCase) ||
            change.Name.Equals("Password", StringComparison.OrdinalIgnoreCase))
        {
            ValidatePasswordMatch();
        }
    }

    private void ValidatePasswordMatch()
    {
        const string key = "ConfirmPassword";

        if (!string.IsNullOrEmpty(_vm.Password) && !string.IsNullOrEmpty(_vm.ConfirmPassword))
        {
            if (_vm.Password != _vm.ConfirmPassword)
                _errors[key] = new[] { "Passwords do not match." };
            else
                _errors.Remove(key);
        }
        else
        {
            _errors.Remove(key);
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, validateAllProperties: true);

            ValidatePasswordMatch();

            if (!ok || _errors.Any())
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_errors.TryGetValue(key, out var list))
                        _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Please check your inputs.", "error");
                return;
            }

            Logger.LogInformation("üë§ Registration attempt for: {Email}", _vm.Email);

            var registerRequest = new RegisterUserRequest
            {
                FirstName = _vm.FirstName,
                LastName  = _vm.LastName,
                Email     = _vm.Email,
                Password  = _vm.Password
            };

            var user = await UserService.RegisterAsync(registerRequest);

            Logger.LogInformation("‚úÖ Registration successful for: {Email}", _vm.Email);
            Bumper.Publish("Registration", "Registration successful! You can now login.", "success");

            _vm.FirstName = string.Empty;
            _vm.LastName = string.Empty;
            _vm.Email = string.Empty;
            _vm.Password = string.Empty;
            _vm.ConfirmPassword = string.Empty;
        }
        catch (DomainException domainEx)
        {
            Logger.LogWarning("‚ùå Registration failed for {Email}: {Error}", _vm.Email, domainEx.Message);
            Bumper.Publish("Registration failed", domainEx.Message, "error");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration error for: {Email}", _vm.Email);
            Bumper.Publish("Error", "An error occurred during registration. Please try again.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
