@page "/register"
@using CMC.Application.Services
@using CMC.Contracts.Users
@using CMC.Domain.Common
@inject UserService UserService
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Register</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="firstName">First Name:</label>
                <InputText id="firstName" class="form-control" @bind-Value="registerRequest.FirstName" />
                <ValidationMessage For="@(() => registerRequest.FirstName)" />
            </div>

            <div class="form-group mb-3">
                <label for="lastName">Last Name:</label>
                <InputText id="lastName" class="form-control" @bind-Value="registerRequest.LastName" />
                <ValidationMessage For="@(() => registerRequest.LastName)" />
            </div>

            <div class="form-group mb-3">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" />
                <ValidationMessage For="@(() => registerRequest.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Confirm Password:</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
                @if (!string.IsNullOrEmpty(confirmPassword) && registerRequest.Password != confirmPassword)
                {
                    <div class="text-danger">Passwords do not match.</div>
                }
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Registering...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            Already have an account? <a href="/login">Login here</a>
        </p>
    </div>
</div>

@code {
    private RegisterUserRequest registerRequest = new()
    {
        FirstName = string.Empty,
        LastName = string.Empty,
        Email = string.Empty,
        Password = string.Empty
    };
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (registerRequest.Password != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var user = await UserService.RegisterAsync(registerRequest);
            successMessage = "Registration successful! You can now login.";

            // Clear form
            registerRequest = new()
            {
                FirstName = string.Empty,
                LastName = string.Empty,
                Email = string.Empty,
                Password = string.Empty
            };
            confirmPassword = string.Empty;
        }
        catch (DomainException domainEx)
        {
            errorMessage = domainEx.Message;
        }
        catch
        {
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
