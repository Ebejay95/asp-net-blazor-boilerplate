@page "/overview"
@page "/cockpit/overview"
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using CMC.Application.Services
@using CMC.Contracts.Customers
@using CMC.Contracts.Users
@using CMC.Contracts.Controls
@using CMC.Web.Services

@inherits RoleBasedComponentBase

@inject UserService Users
@inject CustomerService Customers
@inject IndustryService IndustrySvc
@inject LibraryScenarioService LibScenarios
@inject LibraryControlService LibControls
@inject ScenarioService Scenarios
@inject ControlService Controls
@inject CMC.Infrastructure.Services.LibraryProvisioningService Provision
@inject NavigationManager Nav
@inject ILogger<Overview> Logger
@inject IBumperBus Bumper

<section class="slim">
    @if (IsSuperAdmin)
    {
        <div class="card">
            <h2>Übersicht</h2>
            <p>Willkommen! Hier siehst du dein SuperAdmin-Dashboard.</p>
        </div>
    }
    else if (IsUser)
    {
        @if (_loading)
        {
            <div class="card"><p>Lade…</p></div>
        }
        else if (_myCompany is null)
        {
            <div class="card">
                <h2>Erstes Setup</h2>
                <p>Du bist aktuell keinem Unternehmen zugeordnet. Lege jetzt dein Unternehmen an.</p>

                <FormRenderer
                    Model="@_companyVm"
                    Request="@_companyReq"
                    ExtraFields="@_companyExtraFields"
                    ValueOverrides="@_companyOverrides"
                    ValidationErrors="@_companyErrors"
                    OnFieldChanged="OnCompanyFieldChanged" />

                <!-- Branchen-Auswahl außerhalb des FormRenderer -->
                <div class="form-row mt-3">
                    <label class="form-label">Branchen *</label>
                    <div class="checkbox-list">
                        @foreach (var opt in _industryOptions)
                        {
                            <label class="chk-inline">
                                <input type="checkbox"
                                       checked="@_selectedIndustryIds.Contains(opt.Id)"
                                       @onchange="@(e => OnIndustryChanged(opt.Id, e))" />
                                <span class="switch-track"></span>
                                @opt.Name
                            </label>
                        }
                    </div>
                    @if (_companyErrors.TryGetValue("Industries", out var industryErrors))
                    {
                        <div class="text-danger">
                            @foreach (var error in industryErrors)
                            {
                                <div>@error</div>
                            }
                        </div>
                    }
                </div>

                <div class="mt-4">
                    <button type="button" class="btn primary" @onclick="CreateCompanyAsync" disabled="@_isCreatingCompany">
                        @if (_isCreatingCompany)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            <span> Erstelle Unternehmen...</span>
                        }
                        else
                        {
                            <span>Anlegen</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (!_hasScenarios)
        {
            <div class="card">
                <h2>Library-Szenarien auswählen</h2>
                <p>Wähle die für dein Unternehmen relevanten Szenarien aus. Sie werden in echte Kundenszenarien konvertiert und passende Controls erzeugt.</p>

                <!-- Minimaler FormRenderer nur für Info-Text -->
                <FormRenderer
                    Model="@_scenarioVm"
                    Request="@_scenarioReq"
                    ExtraFields="@_scenarioExtraFields"
                    ValueOverrides="@_scenarioOverrides"
                    ValidationErrors="@_scenarioErrors"
                    OnFieldChanged="OnScenarioFieldChanged" />

                <!-- Szenario-Auswahl außerhalb des FormRenderer -->
                <div class="form-row mt-3">
                    <label class="form-label">Verfügbare Szenarien</label>
                    <div class="checkbox-list">
                        @if (_scenarioOptions.Count == 0)
                        {
                            <p class="text-muted">Für deine Branchen sind derzeit keine Library-Szenarien hinterlegt.</p>
                        }
                        else
                        {
                            @foreach (var s in _scenarioOptions)
                            {
                                <label class="chk-inline">
                                    <input type="checkbox"
                                           checked="@_selectedScenarioIds.Contains(s.Id)"
                                           @onchange="@(e => OnScenarioChanged(s.Id, e))" />
                                    <span class="switch-track"></span>
                                    @s.Name
                                </label>
                            }
                        }
                    </div>
                </div>

                <div class="mt-4">
                    <button type="button" class="btn primary"
                            disabled="@(!_selectedScenarioIds.Any() || _isProvisioning)"
                            @onclick="ProvisionSelectedAsync">
                        @if (_isProvisioning)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            <span> Stelle bereit...</span>
                        }
                        else
                        {
                            <span>Bereitstellen</span>
                        }
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <h2>@_myCompany.Name</h2>
                <p>Willkommen, @GetFullName()! Du kannst deine Firmeneinstellungen unter <b>Settings</b> bearbeiten.</p>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-number">@_scenarioCount</span>
                        <span class="stat-label">Szenarien</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@_controlCount</span>
                        <span class="stat-label">Kontrollen</span>
                    </div>
                </div>

                <h3>Deine Kontrollen</h3>
                @if (_controls.Count == 0)
                {
                    <p class="text-muted">Keine Kontrollen vorhanden.</p>
                }
                else
                {
                    <div class="controls-grid">
                        @foreach (var c in _controls)
                        {
                            <div class="control-card">
                                <div class="control-status status-@c.Status.ToLower()">@c.Status</div>
                                <div class="control-name">@c.Name</div>
                                <div class="control-metrics">
                                    <span class="metric">
                                        <small>Coverage:</small> @c.Coverage.ToString("P1")
                                    </span>
                                    <span class="metric">
                                        <small>Maturity:</small> @c.Maturity
                                    </span>
                                    @if (c.DueDate.HasValue)
                                    {
                                        <span class="metric due-date">
                                            <small>Due:</small> @c.DueDate.Value.ToString("dd.MM.yyyy")
                                        </span>
                                    }
                                </div>
                                @if (c.Implemented)
                                {
                                    <div class="implemented-badge">Implementiert</div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
</section>

<style>
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
}

.stat-item {
    text-align: center;
    padding: 1rem;
    background: var(--surface-light);
    border-radius: 8px;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: var(--primary);
}

.stat-label {
    font-size: 0.875rem;
    color: var(--text-muted);
}

.controls-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.control-card {
    padding: 1rem;
    border: 1px solid var(--border);
    border-radius: 8px;
    background: white;
}

.control-status {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: bold;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
}

.status-proposed { background: #fef3cd; color: #856404; }
.status-approved { background: #d4edda; color: #155724; }
.status-implemented { background: #cce7ff; color: #004085; }
.status-rejected { background: #f8d7da; color: #721c24; }

.control-name {
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.control-metrics {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.metric small {
    color: var(--text-muted);
}

.implemented-badge {
    display: inline-block;
    background: var(--success);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    margin-top: 0.5rem;
}
</style>

@code {
    private bool _loading = true;
    private CustomerDto? _myCompany;
    private readonly List<ControlDto> _controls = new();

    // Company Setup ViewModels und FormRenderer-Support
    private sealed class CompanySetupVm
    {
        [Required, Display(Name="Firmenname")]
        public string Name { get; set; } = string.Empty;

        [Required, Range(1, int.MaxValue), Display(Name="Mitarbeiter")]
        public int EmployeeCount { get; set; }

        [Required, Range(0, double.MaxValue), Display(Name="Umsatz/Jahr (EUR)")]
        public decimal RevenuePerYear { get; set; }
    }

    private readonly CompanySetupVm _companyVm = new();
    private readonly Dictionary<string, object?> _companyOverrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _companyErrors = new(StringComparer.OrdinalIgnoreCase);
    private bool _isCreatingCompany;

    private readonly List<(Guid Id, string Name)> _industryOptions = new();
    private readonly HashSet<Guid> _selectedIndustryIds = new();

    // Scenario Selection ViewModels (minimaler FormRenderer für Konsistenz)
    private sealed class ScenarioSelectionVm
    {
        [Display(Name="Information")]
        public string Info { get; set; } = "Wähle die relevanten Szenarien für dein Unternehmen aus.";
    }

    private readonly ScenarioSelectionVm _scenarioVm = new();
    private readonly Dictionary<string, object?> _scenarioOverrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _scenarioErrors = new(StringComparer.OrdinalIgnoreCase);
    private bool _isProvisioning;

    private readonly List<(Guid Id, string Name)> _scenarioOptions = new();
    private readonly HashSet<Guid> _selectedScenarioIds = new();

    // Overview numbers
    private bool _hasScenarios;
    private int _scenarioCount;
    private int _controlCount;

    // FormRenderer Requests
    private EFEditRequest _companyReq => new EFEditRequest
    {
        Title = "Unternehmen anlegen",
        Model = _companyVm,
        ContractsAssembly = typeof(Overview).Assembly,
        IsCreate = true
    };

    private EFEditRequest _scenarioReq => new EFEditRequest
    {
        Title = "Szenarien auswählen",
        Model = _scenarioVm,
        ContractsAssembly = typeof(Overview).Assembly,
        IsCreate = true
    };

    // ExtraFields (minimal, da Checkboxes extern gehandhabt werden)
    private List<ExtraField> _companyExtraFields => new();

    private List<ExtraField> _scenarioExtraFields => new()
    {
        new ExtraField(
            Name: "Info",
            Label: null,
            Type: typeof(string),
            ReadOnly: true,
            Hint: "Die Auswahl erfolgt über die Checkboxen unten."
        )
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            if (!IsUser) { _loading = false; return; }

            // 1) Meine Firma laden
            var me = await Users.GetByIdAsync(Guid.Parse(GetUserId()));
            if (me?.CustomerId is Guid cid)
            {
                _myCompany = await Customers.GetByIdAsync(cid);

                if (_myCompany != null)
                {
                    // 2) Zahlen zur Übersicht
                    _scenarioCount = await Scenarios.CountByCustomerAsync(_myCompany.Id);
                    _controlCount = await Controls.CountByCustomerAsync(_myCompany.Id);
                    _hasScenarios = _scenarioCount > 0;

                    // 3) Konkrete Controls laden
                    if (_hasScenarios)
                    {
                        var controlDtos = await Controls.GetByCustomerAsync(_myCompany.Id);
                        _controls.Clear();
                        _controls.AddRange(controlDtos.OrderBy(c => c.Status).ThenBy(c => c.CreatedAt));
                    }

                    // 4) Falls keine Szenarien vorhanden: Library-Szenarien laden
                    if (!_hasScenarios)
                    {
                        var libs = await LibScenarios.GetByIndustriesAsync(_myCompany.IndustryIds);
                        _scenarioOptions.Clear();
                        _scenarioOptions.AddRange(libs.OrderBy(x => x.Name).Select(x => (x.Id, x.Name)));
                    }
                }
            }

            // Branchenliste (für Setup)
            var allInd = await IndustrySvc.GetAllAsync();
            _industryOptions.Clear();
            _industryOptions.AddRange(allInd.OrderBy(x => x.Name).Select(x => (x.Id, x.Name)));
        }
        finally { _loading = false; }
    }

    private void OnCompanyFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(CompanySetupVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_companyVm, change.Value);
    }

    private void OnScenarioFieldChanged((string Name, object? Value) change)
    {
        // Minimal, da nur Info-Field
    }

    private Task OnIndustryChanged(Guid id, ChangeEventArgs e)
    {
        var on = e?.Value is bool b ? b : string.Equals(e?.Value?.ToString(), "on", StringComparison.OrdinalIgnoreCase);
        if (on) _selectedIndustryIds.Add(id); else _selectedIndustryIds.Remove(id);

        // Fehler für Branchen-Auswahl zurücksetzen, wenn User etwas auswählt
        if (on && _companyErrors.ContainsKey("Industries"))
        {
            _companyErrors.Remove("Industries");
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task CreateCompanyAsync()
    {
        try
        {
            _isCreatingCompany = true;
            _companyErrors.Clear();

            // Validierung
            var ctx = new ValidationContext(_companyVm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_companyVm, ctx, results, validateAllProperties: true);

            // Zusätzlich prüfen, ob Branchen ausgewählt wurden
            if (_selectedIndustryIds.Count == 0)
            {
                _companyErrors["Industries"] = new[] { "Bitte wähle mindestens eine Branche aus." };
                ok = false;
            }

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_companyErrors.TryGetValue(key, out var list))
                        _companyErrors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _companyErrors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Bitte überprüfe deine Eingaben.", "error");
                return;
            }

            Logger.LogInformation("🏢 Creating company: {Name}", _companyVm.Name);

            var created = await Customers.CreateAsync(new CreateCustomerRequest(
                Name: _companyVm.Name,
                IndustryIds: _selectedIndustryIds.ToArray(),
                EmployeeCount: _companyVm.EmployeeCount,
                RevenuePerYear: _companyVm.RevenuePerYear
            ));

            await Users.AssignToCustomerAsync(new AssignUserToCustomerRequest(
                UserId: Guid.Parse(GetUserId()),
                CustomerId: created.Id
            ));

            Logger.LogInformation("✅ Company created successfully: {CompanyId}", created.Id);
            Bumper.Publish("Unternehmen", "Unternehmen erfolgreich erstellt!", "success");

            Nav.NavigateTo("/cockpit/overview", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Company creation error");
            Bumper.Publish("Error", "Fehler beim Erstellen des Unternehmens.", "error");
        }
        finally
        {
            _isCreatingCompany = false;
        }
    }

    private Task OnScenarioChanged(Guid id, ChangeEventArgs e)
    {
        var on = e?.Value is bool b ? b : string.Equals(e?.Value?.ToString(), "on", StringComparison.OrdinalIgnoreCase);
        if (on) _selectedScenarioIds.Add(id); else _selectedScenarioIds.Remove(id);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ProvisionSelectedAsync()
    {
        try
        {
            if (_myCompany is null || _selectedScenarioIds.Count == 0) return;

            _isProvisioning = true;

            Logger.LogInformation("🔄 Provisioning scenarios for company: {CompanyId}", _myCompany.Id);

            var libControlIds = await LibControls.GetIdsByLibraryScenarioIdsAsync(_selectedScenarioIds);

            await Provision.ProvisionAsync(
                customerId: _myCompany.Id,
                libraryScenarioIds: _selectedScenarioIds,
                libraryControlIds: libControlIds,
                attachStrategy: CMC.Infrastructure.Services.ControlAttachStrategy.ClonePerScenario,
                createToDos: true
            );

            Logger.LogInformation("✅ Scenarios provisioned successfully for company: {CompanyId}", _myCompany.Id);
            Bumper.Publish("Bereitstellung", "Szenarien erfolgreich bereitgestellt!", "success");

            Nav.NavigateTo("/cockpit/overview", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Provisioning error");
            Bumper.Publish("Error", "Fehler bei der Bereitstellung.", "error");
        }
        finally
        {
            _isProvisioning = false;
        }
    }
}
