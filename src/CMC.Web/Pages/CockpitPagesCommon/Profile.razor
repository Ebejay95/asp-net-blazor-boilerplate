@page "/profile"
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using CMC.Web.Services
@using CMC.Application.Services
@using CMC.Contracts.Users

@inherits RoleBasedComponentBase

@inject ILogger<Profile> Logger
@inject IBumperBus Bumper

<section class="slim">
  <div class="card">
    <h3>Profil</h3>

    <div class="mb-2">
      <strong>@GetFullName()</strong><br/>
      <small>@GetUserEmail()</small><br/>
      <small>Rollen: @string.Join(", ", GetRoles())</small>
    </div>

    @if (_loading)
    {
      <p>Lade‚Ä¶</p>
    }
    else
    {
      <FormRenderer
          Model="@_vm"
          Request="@_req"
          ExtraFields="new()"
          ValueOverrides="@_overrides"
          ValidationErrors="@_errors"
          OnFieldChanged="OnFieldChanged" />

      <div class="mt-4">
        <button type="button"
                class="btn primary"
                @onclick="HandleSave"
                disabled="@(_isSaving || _vm.Id == Guid.Empty)">
          @if (_isSaving)
          {
            <span class="spinner-border spinner-border-sm" role="status"></span>
            <span> Speichere‚Ä¶</span>
          }
          else
          {
            <span>Speichern</span>
          }
        </button>
      </div>
    }
  </div>

  <div class="card">
    <h3>Logout</h3>
    <NavLink href="logout" class="btn primary">Logout</NavLink>
  </div>
</section>

@code {
  // --- Explizit injiziert, damit Hot-Reload den alten set_Users nicht vermisst (wird NICHT genutzt) ---
  [Inject] public UserService? Users { get; set; }   // Legacy-Kompatibilit√§t f√ºr Hot Reload
  [Inject] public IServiceProvider Services { get; set; } = default!;

  private bool _loading = true;
  private bool _isSaving;
  private UserDto? _me;

  // ---- ViewModel f√ºr den zentralen FormRenderer ----
  private sealed class ProfileVm
  {
    [ScaffoldColumn(false)]
    public Guid Id { get; set; }

    [Required, Display(Name = "Vorname")]
    public string FirstName { get; set; } = "";

    [Required, Display(Name = "Nachname")]
    public string LastName { get; set; } = "";

    [Display(Name = "Rolle")]
    public string? Role { get; set; }

    [Display(Name = "Abteilung")]
    public string? Department { get; set; }

    // wichtig, um Relation nicht zu verlieren ‚Äì im FormRenderer versteckt
    [ScaffoldColumn(false)]
    public Guid? CustomerId { get; set; }
  }

  private readonly ProfileVm _vm = new();

  private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
  private readonly Dictionary<string, string[]> _errors    = new(StringComparer.OrdinalIgnoreCase);

  // Minimaler Request f√ºr FormRenderer (wir nutzen ihn NICHT f√ºr Save)
  private EFEditRequest _req => new()
  {
    Title = "Profil",
    Model = _vm,
    ContractsAssembly = typeof(Profile).Assembly,
    IsCreate = false
  };

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    try
    {
      var idStr = GetUserId();
      if (!Guid.TryParse(idStr, out var id) || id == Guid.Empty)
      {
        Logger.LogWarning("‚ö†Ô∏è Kein g√ºltiger UserId-Claim gefunden. Abbruch.");
        Bumper.Publish("Fehler", "Kein g√ºltiger Benutzerkontext. Bitte neu anmelden.", "error");
        return;
      }

      // Eigener DI-Scope (verhindert DbContext-Concurrency)
      await using var scope = Services.CreateAsyncScope();
      var users = scope.ServiceProvider.GetRequiredService<UserService>();

      _me = await users.GetByIdAsync(id);

      if (_me is not null)
      {
        // VM bef√ºllen
        _vm.Id         = _me.Id;
        _vm.FirstName  = _me.FirstName ?? "";
        _vm.LastName   = _me.LastName  ?? "";
        _vm.Role       = _me.Role;
        _vm.Department = _me.Department;
        _vm.CustomerId = _me.CustomerId;

        // ValueOverrides: zeigt die initialen Werte im zentralen Formular an
        _overrides["FirstName"]  = _vm.FirstName;
        _overrides["LastName"]   = _vm.LastName;
        _overrides["Role"]       = _vm.Role;
        _overrides["Department"] = _vm.Department;
      }
      else
      {
        Logger.LogWarning("‚ö†Ô∏è UserService.GetByIdAsync({Id}) lieferte null.", id);
        Bumper.Publish("Fehler", "Benutzer nicht gefunden.", "error");
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "‚ùå Fehler beim Laden des Profils.");
      Bumper.Publish("Fehler", "Profil konnte nicht geladen werden.", "error");
    }
    finally
    {
      _loading = false;
    }
  }

  // vom FormRenderer gerufen, wenn sich ein Feld √§ndert
  private void OnFieldChanged((string Name, object? Value) change)
  {
    var prop = typeof(ProfileVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
    if (prop is null) return;

    // einfache Umwandlung (FormRenderer liefert meist string)
    var targetType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
    object? value = change.Value;

    if (value is not null && targetType != typeof(string))
    {
      try { value = Convert.ChangeType(value, targetType); }
      catch { /* Validierung f√§ngt es sp√§ter ab */ }
    }

    prop.SetValue(_vm, value ?? (targetType == typeof(string) ? "" : null));
  }

private async Task HandleSave()
{
    try
    {
        _isSaving = true;
        _errors.Clear();

        // lokale DataAnnotations-Validierung (damit FormRenderer Fehler anzeigen kann)
        var ctx = new ValidationContext(_vm);
        var results = new List<ValidationResult>();
        var ok = Validator.TryValidateObject(_vm, ctx, results, validateAllProperties: true);

        if (!ok)
        {
            foreach (var r in results)
            {
                var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                if (!_errors.TryGetValue(key, out var list))
                    _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                else
                    _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
            }
            Bumper.Publish("Validation", "Bitte Eingaben pr√ºfen.", "error");
            return;
        }

        if (_vm.Id == Guid.Empty)
        {
            Bumper.Publish("Fehler", "Ung√ºltige Benutzer-ID. Bitte neu anmelden.", "error");
            Logger.LogWarning("‚ùå Abbruch: _vm.Id == Guid.Empty");
            return;
        }

        Logger.LogInformation("üë§ Profil-Update f√ºr: {Id} ({First} {Last})", _vm.Id, _vm.FirstName, _vm.LastName);

        // Eigener Scope f√ºr Update + persistente Notification
        await using var scope = Services.CreateAsyncScope();
        var users = scope.ServiceProvider.GetRequiredService<UserService>();
        var notifications = scope.ServiceProvider.GetRequiredService<NotificationService>();

        var req = new UpdateUserRequest(
            Id: _vm.Id,
            FirstName: _vm.FirstName,
            LastName: _vm.LastName,
            Role: _vm.Role,
            Department: _vm.Department,
            IsEmailConfirmed: null,
            CustomerId: _vm.CustomerId // Relation NICHT versehentlich nullen
        );

        var updated = await users.UpdateAsync(req);

        if (updated is not null)
        {
            _me = updated;

            // Erfolgsfeedback + evtl. Normalisierung ins UI zur√ºckspiegeln
            _overrides["FirstName"] = _me.FirstName;
            _overrides["LastName"] = _me.LastName;
            _overrides["Role"] = _me.Role;
            _overrides["Department"] = _me.Department;

            _vm.FirstName = _me.FirstName ?? "";
            _vm.LastName = _me.LastName ?? "";
            _vm.Role = _me.Role;
            _vm.Department = _me.Department;
            _vm.CustomerId = _me.CustomerId;

            // Persistente Notification (DB) + evtl. SignalR-Push
            try
            {
                await notifications.CreateAsync(
                    userId: _vm.Id,
                    title: "Profil aktualisiert",
                    message: $"Ihr Profil wurde erfolgreich gespeichert: {_vm.FirstName} {_vm.LastName}",
                    severity: "success",
                    customerId: _vm.CustomerId
                );

                Logger.LogInformation("‚úÖ Persistente Notification erstellt f√ºr User {Id}", _vm.Id);
            }
            catch (Exception nEx)
            {
                Logger.LogWarning(nEx, "‚ö†Ô∏è Notification persist/push failed for {Id}", _vm.Id);
            }

            // Lokale UI-Notification (sofortiges Feedback)
            Bumper.Publish("Profil", "Profil gespeichert.", "success", 1500);
            Logger.LogInformation("‚úÖ Profil-Update erfolgreich f√ºr: {Id}", _vm.Id);
        }
        else
        {
            // Fehler-Notification ebenfalls persistent speichern
            try
            {
                await notifications.CreateAsync(
                    userId: _vm.Id,
                    title: "Profil-Fehler",
                    message: "Profil konnte nicht gespeichert werden. Bitte versuchen Sie es erneut.",
                    severity: "error",
                    customerId: _vm.CustomerId
                );
            }
            catch (Exception nEx)
            {
                Logger.LogWarning(nEx, "‚ö†Ô∏è Error notification persist failed for {Id}", _vm.Id);
            }

            Bumper.Publish("Profil", "Konnte nicht gespeichert werden.", "error");
            Logger.LogWarning("‚ùå Profil-Update fehlgeschlagen f√ºr: {Id}", _vm.Id);
        }
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "‚ùå Fehler beim Profil-Update: {Id}", _vm.Id);

        // Exception auch als persistente Notification
        try
        {
            await using var scope = Services.CreateAsyncScope();
            var notifications = scope.ServiceProvider.GetRequiredService<NotificationService>();

            await notifications.CreateAsync(
                userId: _vm.Id,
                title: "Systemfehler",
                message: "Ein unerwarteter Fehler ist beim Speichern aufgetreten. Support wurde benachrichtigt.",
                severity: "error",
                customerId: _vm.CustomerId
            );
        }
        catch (Exception nEx)
        {
            Logger.LogError(nEx, "‚ùå Critical: Could not even save error notification for {Id}", _vm.Id);
        }

        Bumper.Publish("Fehler", "Es ist ein unerwarteter Fehler aufgetreten.", "error");
    }
    finally
    {
        _isSaving = false;
    }
}
}
