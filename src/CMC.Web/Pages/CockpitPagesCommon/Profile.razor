@page "/profile"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Forms
@using CMC.Application.Services
@using CMC.Contracts.Users
@using CMC.Web.Services
@inherits RoleBasedComponentBase
@inject UserService Users

<section class="slim">
  <div class="card">
    <h3>Profil</h3>

    <div class="mb-2">
      <strong>@GetFullName()</strong><br/>
      <small>@GetUserEmail()</small><br/>
      <small>Rollen: @string.Join(", ", GetRoles())</small>
    </div>

    @if (_loading)
    {
      <p>Lade…</p>
    }
    else
    {
      <EditForm Model="_form" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />

        <div class="grid">
          <div class="col">
            <label>Vorname</label>
            <InputText class="form-control" @bind-Value="_form.FirstName" />
          </div>
          <div class="col">
            <label>Nachname</label>
            <InputText class="form-control" @bind-Value="_form.LastName" />
          </div>
        </div>

        <div class="grid">
          <div class="col">
            <label>Rolle</label>
            <InputText class="form-control" @bind-Value="_form.Role" />
          </div>
          <div class="col">
            <label>Abteilung</label>
            <InputText class="form-control" @bind-Value="_form.Department" />
          </div>
        </div>

        <button class="btn primary mt-2" type="submit">Speichern</button>
      </EditForm>
    }
  </div>
  <div class="card">
    <h3>Logout</h3>
    <NavLink href="logout" class="btn primary">Logout</NavLink>
  </div>
</section>

@code {
  private bool _loading = true;
  private UserDto? _me;

  // ---- MUTABLE ViewModel fürs Binding (statt record/init-only) ----
  private sealed class UserProfileForm
  {
    public Guid Id { get; set; }
    public string FirstName { get; set; } = "";
    public string LastName { get; set; } = "";
    public string? Role { get; set; }
    public string? Department { get; set; }
    public Guid? CustomerId { get; set; } // wichtig, um Relation nicht zu verlieren
  }

  private UserProfileForm _form = new();

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    var id = Guid.Parse(GetUserId());
    _me = await Users.GetByIdAsync(id);

    if (_me is not null)
    {
      _form = new UserProfileForm
      {
        Id = _me.Id,
        FirstName = _me.FirstName,
        LastName = _me.LastName,
        Role = _me.Role,
        Department = _me.Department,
        CustomerId = _me.CustomerId
      };
    }

    _loading = false;
  }

  private async Task SaveAsync()
  {
    if (_me is null) return;

    // Beim Speichern: in den record mappen (einmalig, kein Binding darauf)
    var req = new UpdateUserRequest(
      Id: _form.Id,
      FirstName: _form.FirstName,
      LastName: _form.LastName,
      Role: _form.Role,
      Department: _form.Department,
      IsEmailConfirmed: null,
      CustomerId: _form.CustomerId // Relation NICHT versehentlich nullen
    );

    var updated = await Users.UpdateAsync(req);
    if (updated is not null)
    {
      _me = updated;
      // optional: _form mit evtl. normalisierten Werten refreshen
      _form.FirstName = _me.FirstName;
      _form.LastName  = _me.LastName;
      _form.Role      = _me.Role;
      _form.Department = _me.Department;
      _form.CustomerId = _me.CustomerId;
    }
  }
}
