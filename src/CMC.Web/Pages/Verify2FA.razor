@page "/verify-2fa"
@implements IAsyncDisposable

@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Reflection
@using CMC.Web.Services
@using CMC.Web.Pages.FormFields
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@inject NavigationManager Navigation
@inject ILogger<Verify2FA> Logger
@inject IBumperBus Bumper
@inject HttpClient Http
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>2FA Verification</PageTitle>

<section class="slim center">
    <div class="card">
        @if (_accessDenied)
        {
            <h2>Zugriff verweigert</h2>
            <p class="alert error">Sie haben keinen gültigen Anmeldestatus für diese Seite.</p>
            <a href="/" class="button primary">Zur Anmeldung</a>
        }
        else
        {
            <h2>Zwei-Faktor-Authentifizierung</h2>
            <p class="mb-4">
                Bitte geben Sie den 6-stelligen Code aus Ihrer Authenticator-App ein.
                <br />
                <strong>Konto:</strong> @_maskedEmail
            </p>

            <FormRenderer
                Model="@_vm"
                Request="@_req"
                ExtraFields="new()"
                ValueOverrides="@_overrides"
                ValidationErrors="@_errors"
                OnFieldChanged="OnFieldChanged"
                EnableFormSubmit="true"
                OnSubmit="HandleVerify"
                SubmitButtonText="Anmelden"
                SubmitButtonClass="primary"
                IsSubmitDisabled="@_isLoading"
                LoadingText="Verifizieren..."
                EnableEnterSubmit="true" />

            <p class="mt-4">
                <a href="/">Zurück zur Anmeldung</a>
            </p>
        }
    </div>
</section>

@code {
    // ---------- ViewModel mit Heuristik TwoFACode ----------
    private sealed class VerifyVm
    {
        [Required(ErrorMessage = "Bitte geben Sie den Verification Code ein")]
        [RegularExpression("^[0-9]{6}$", ErrorMessage = "Bitte 6-stelligen Code eingeben")]
        public string TwoFACode { get; set; } = string.Empty; // -> TwoFAInputField
    }

    private readonly VerifyVm _vm = new();

    private bool _bgInitDone;
    private bool _accessDenied;
    private bool _isLoading;

    private string _email = string.Empty;
    private string _maskedEmail = string.Empty;

    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);

    private EFEditRequest _req => new()
    {
        Title = "2FA Verification",
        Model = _vm,
        ContractsAssembly = typeof(VerifyVm).Assembly,
        IsCreate = true
    };

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "window.stopBgAnimation && window.stopBgAnimation()");
        }
        catch { /* ignore */ }
    }

    protected override void OnInitialized()
    {
        // Email aus Query
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("email", out var emailParam)) _email = emailParam.ToString();

        // Session prüfen
        var httpContext = HttpContextAccessor.HttpContext;
        var sessionEmail = httpContext?.Session.GetString("PendingLogin:Email");
        var sessionUserId = httpContext?.Session.GetString("PendingLogin:UserId");

        if (string.IsNullOrWhiteSpace(sessionEmail) || string.IsNullOrWhiteSpace(sessionUserId))
        {
            Logger.LogWarning("No pending login session for 2FA verification. Redirecting to login.");
            _accessDenied = true;
            return;
        }

        // Session-Email übernehmen, falls Query leer
        if (string.IsNullOrWhiteSpace(_email)) _email = sessionEmail;

        // Query/Session müssen matchen
        if (!string.Equals(_email, sessionEmail, StringComparison.OrdinalIgnoreCase))
        {
            Logger.LogWarning("Email mismatch. Query: {QueryEmail}, Session: {SessionEmail}", _email, sessionEmail);
            _accessDenied = true;
            return;
        }

        _maskedEmail = MaskEmail(_email);
        Logger.LogInformation("2FA verification page initialized for: {Email}", _maskedEmail);
    }

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(VerifyVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleVerify()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // lokale Validation (optional, FormRenderer zeigt Errors)
            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, true);
            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    _errors[key] = (_errors.TryGetValue(key, out var list) ? list.Append(r.ErrorMessage ?? "Invalid.").ToArray()
                                                                          : new[] { r.ErrorMessage ?? "Invalid." });
                }
                Bumper.Publish("Validation", "Bitte prüfen Sie Ihre Eingaben.", "error");
                return;
            }

            Logger.LogInformation("2FA verification attempt for: {Email}", _maskedEmail);

            var response = await Http.PostAsJsonAsync("api/auth/verify-2fa", new Verify2FARequest
            {
                Email = _email,
                Code = _vm.TwoFACode
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Verify2FAResponse>();
                if (result?.success == true && !string.IsNullOrWhiteSpace(result.redirectUrl))
                {
                    Bumper.Publish("2FA", "Anmeldung erfolgreich! Weiterleitung...", "success", 1500);
                    await Task.Delay(800);
                    Navigation.NavigateTo(result.redirectUrl, forceLoad: true);
                    return;
                }

                Bumper.Publish("Verification Error", result?.message ?? "Unerwartete Antwort vom Server.", "error");
            }
            else
            {
                // ggf. Redirect zum Setup
                try
                {
                    var errorResult = await response.Content.ReadFromJsonAsync<Verify2FAResponse>();
                    if (errorResult?.redirectToSetup == true)
                    {
                        Bumper.Publish("Setup Required", "2FA ist nicht konfiguriert. Weiterleitung zum Setup...", "info", 1500);
                        await Task.Delay(800);
                        Navigation.NavigateTo($"/setup-2fa?email={Uri.EscapeDataString(_email)}");
                        return;
                    }

                    var msg = errorResult?.message ?? "Ungültiger Code.";
                    Bumper.Publish("Invalid Code", msg, "error");
                }
                catch
                {
                    Bumper.Publish("Verification Failed", "Ungültiger Code. Bitte versuchen Sie es erneut.", "error");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA verification error for: {Email}", _maskedEmail);
            Bumper.Publish("Error", "Fehler bei der 2FA-Verifizierung.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static string MaskEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains('@')) return email;
        var parts = email.Split('@');
        var localPart = parts[0];
        var domain = parts[1];

        var maskedLocal = localPart.Length <= 2
            ? new string('*', localPart.Length)
            : localPart[0] + new string('*', localPart.Length - 2) + localPart[^1];

        var domainParts = domain.Split('.');
        var maskedDomain = domainParts.Length > 0
            ? domainParts[0][0] + new string('*', Math.Max(0, domainParts[0].Length - 1)) + "." + string.Join(".", domainParts.Skip(1))
            : domain;

        return $"{maskedLocal}@{maskedDomain}";
    }

    // API DTOs
    private sealed class Verify2FARequest
    {
        public string Email { get; set; } = "";
        public string Code { get; set; } = "";
    }
    private sealed class Verify2FAResponse
    {
        public bool success { get; set; }
        public string? message { get; set; }
        public string? redirectUrl { get; set; }
        public bool redirectToSetup { get; set; }
    }
}
