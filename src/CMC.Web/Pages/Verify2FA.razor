@page "/verify-2fa"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using CMC.Web.Services
@using CMC.Web.Pages.FormFields
@using CMC.Application.Services
@using CMC.Contracts.Common
@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject ILogger<Verify2FA> Logger
@inject IBumperBus Bumper
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>2FA Verification</PageTitle>

<canvas id="canvas" style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      display: block;
      z-index: -1;
      pointer-events: auto;
"></canvas>
<section class="slim center">
    <div class="card">
        <h2>Sicherheitscode eingeben</h2>
        <p class="mb-4">Geben Sie den 6-stelligen Code aus Ihrer Authenticator-App ein.</p>

        @if (!string.IsNullOrWhiteSpace(_email))
        {
            <p class="text-muted mb-3">Anmeldung für: <strong>@_email</strong></p>
        }

        <FormRenderer
            Model="@_verify2FAVm"
            Request="@_verify2FAReq"
            ExtraFields="new()"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnVerify2FAFieldChanged"
            EnableFormSubmit="true"
            OnSubmit="HandleVerify2FA"
            SubmitButtonText="Verifizieren"
            SubmitButtonClass="primary"
            IsSubmitDisabled="@_isLoading"
            LoadingText="Verifizieren..."
            EnableEnterSubmit="true" />

        <p class="mt-3">
            <button type="button" class="btn-link" @onclick="BackToLogin">
                ← Zurück zum Login
            </button>
        </p>
    </div>
</section>

@code {
    private bool _bgInitDone;

    protected override async Task OnAfterRenderAsync(bool firstRender) // ADD
    {
        if (firstRender && !_bgInitDone)
        {
            try
            {
                // Ruft window.initBgAnimation(document.getElementById('canvas')) auf,
                // ohne ein ElementReference zu benötigen.
                await JS.InvokeVoidAsync("eval",
                    "window.initBgAnimation && window.initBgAnimation(document.getElementById('canvas'));");
                _bgInitDone = true;
            }
            catch (Exception ex)
            {
            }
        }
    }
    // 2FA Verification ViewModel
    private sealed class Verify2FAVm
    {
        [Display(Name="Authenticator Code", Description="6-stelliger Code aus Ihrer App")]
        [TwoFACode]
        [Required(ErrorMessage = "Bitte geben Sie den 6-stelligen Code ein")]
        public string? TwoFACode { get; set; }
    }

    private readonly Verify2FAVm _verify2FAVm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);

    private bool _isLoading;
    private string _email = string.Empty;

    private EFEditRequest _verify2FAReq => new EFEditRequest
    {
        Title = "2FA Verification",
        Model = _verify2FAVm,
        ContractsAssembly = typeof(Verify2FAVm).Assembly,
        IsCreate = true
    };

    protected override void OnInitialized()
    {
        // Get email from query parameters
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("email", out var emailValues))
        {
            _email = emailValues.FirstOrDefault() ?? string.Empty;
        }

        if (string.IsNullOrWhiteSpace(_email))
        {
            Logger.LogWarning("2FA verification page accessed without email parameter");
            Navigation.NavigateTo("/login");
            return;
        }

        Logger.LogInformation("2FA verification page loaded for email: {Email}", _email);
    }

    private void OnVerify2FAFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(Verify2FAVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_verify2FAVm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleVerify2FA()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // Validation
            var ctx = new ValidationContext(_verify2FAVm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_verify2FAVm, ctx, results, validateAllProperties: true);

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                }
                Bumper.Publish("Validation", "Bitte prüfen Sie Ihre Eingaben.", "error");
                return;
            }

            Logger.LogInformation("2FA verification attempt for: {Email}", _email);

            // Call API endpoint
            var response = await Http.PostAsJsonAsync("/api/auth/verify-2fa", new
            {
                Email = _email,
                Code = _verify2FAVm.TwoFACode
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Verify2FAApiResponse>();

                if (result?.success == true)
                {
                    Logger.LogInformation("2FA verification successful for: {Email}", _email);
                    Bumper.Publish("Login", result.message ?? "Anmeldung erfolgreich!", "success", 1500);

                    await Task.Delay(800);

                    // Navigate to redirect URL or default
                    var redirectUrl = result.redirectUrl ?? "/";
                    Navigation.NavigateTo(redirectUrl, forceLoad: true);
                }
                else
                {
                    Logger.LogWarning("2FA verification failed for: {Email}. Message: {Message}", _email, result?.message);
                    var errorMessage = result?.message ?? "Ungültiger Code";
                    _errors["TwoFACode"] = new[] { errorMessage };
                    Bumper.Publish("Invalid Code", errorMessage, "error");
                }
            }
            else
            {
                string errorMessage = "Ungültiger Code. Bitte prüfen Sie Ihre Authenticator-App.";

                try
                {
                    var errorContent = await response.Content.ReadFromJsonAsync<Verify2FAApiResponse>();
                    if (!string.IsNullOrWhiteSpace(errorContent?.message))
                    {
                        errorMessage = errorContent.message;
                    }
                }
                catch
                {
                    // Use default error message
                }

                Logger.LogError("2FA verification failed for: {Email}. Status: {Status}", _email, response.StatusCode);
                _errors["TwoFACode"] = new[] { errorMessage };
                Bumper.Publish("Invalid Code", errorMessage, "error");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "Network error during 2FA verification for: {Email}", _email);
            Bumper.Publish("Network Error", "Verbindungsfehler. Bitte versuchen Sie es erneut.", "error");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA verification error for: {Email}", _email);
            Bumper.Publish("Error", "Fehler bei der 2FA-Verifizierung.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void BackToLogin()
    {
        Logger.LogInformation("User navigating back to login from 2FA verification");
        Navigation.NavigateTo("/login");
    }

    // Response model for API
    private class Verify2FAApiResponse
    {
        public bool success { get; set; }
        public string? message { get; set; }
        public string? redirectUrl { get; set; }
        public object? user { get; set; }
    }
}
