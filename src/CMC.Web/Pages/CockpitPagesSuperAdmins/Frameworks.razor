@attribute [Authorize(Roles = "super-admin")]
@using System
@using System.Linq
@using CMC.Contracts.Frameworks
@using CMC.Web.Services
@using CMC.Web.Util
@using CMC.Domain.Entities

@inject CMC.Application.Services.FrameworkService FrameworkService
@inject EFEditService EFEditService
@inject DialogService ConfirmService

<div class="card">
	<EFTable TItem="FrameworkDto"
			   Items="_library_frameworks"
			   AllowEdit="true"
			   OnEdit="StartEdit"
			   AllowCreate="true"
			   OnCreate="StartCreate" />
</div>

@code {
	private List<FrameworkDto> _library_frameworks = new();

	protected override async Task OnInitializedAsync()
		=> _library_frameworks = await FrameworkService.GetAllAsync();

	private async Task Reload()
	{
		_library_frameworks = await FrameworkService.GetAllAsync();
		StateHasChanged();
	}

	private void StartEdit(FrameworkDto f)
	{
		var req = new EFEditRequest
		{
			Title = "Framework bearbeiten",
			Model = f,
			ContractsAssembly = typeof(FrameworkDto).Assembly,
			EfParentType = typeof(Framework),
			IsCreate = false,
			OnSave = async ctx =>
			{
				try
				{
					var dto = (FrameworkDto)ctx.Model;

					// ðŸ”§ Werte aus dem EditContext ziehen (nicht nur aus dto)
					var name = ctx.TryGetValue("Name", out var rawName)
						? rawName?.ToString()?.Trim() ?? ""
						: dto.Name;

					var version = ctx.TryGetValue("Version", out var rawVersion)
						? rawVersion?.ToString()?.Trim() ?? ""
						: dto.Version;

					var selectedIndustryIds = ExtractGuidArray(
						ctx.TryGetValue("IndustryIds", out var rawIds) ? rawIds : dto.IndustryIds
					);

					var up = new UpdateFrameworkRequest(
						dto.Id,
						name,
						version,
						selectedIndustryIds
					);

					_ = await FrameworkService.UpdateAsync(up);

					await Reload();
					EFEditService.Close();
				}
				catch (Exception ex)
				{
					ConfirmService.Open(new DialogRequest
					{
						Title = "Fehler beim Speichern",
						Message = ex.Message,
						ConfirmText = "Okay",
						OnConfirm = () => Task.CompletedTask
					});
				}
			},
			OnDelete = ctx =>
			{
				var model = (FrameworkDto)ctx.Model;

				ConfirmService.Open(new DialogRequest
				{
					Title = "LÃ¶schen bestÃ¤tigen",
					Message = "Framework " + model.Name + " " + model.Version + " wirklich lÃ¶schen?",
					ConfirmText = "LÃ¶schen",
					CancelText = "Abbrechen",
					OnConfirm = async () =>
					{
						try
						{
							await FrameworkService.DeleteAsync(model.Id);
							await Reload();
							EFEditService.Close();
						}
						catch (Exception ex)
						{
							ConfirmService.Open(new DialogRequest
							{
								Title = "LÃ¶schen fehlgeschlagen",
								Message = ex.Message,
								ConfirmText = "Okay",
								OnConfirm = () => Task.CompletedTask
							});
						}
					}
				});

				return Task.CompletedTask;
			},
			OnAfterRestore = async () =>
			{
				await Reload();
				EFEditService.Close();
			}
		};

		EFEditService.Open(req);
	}

	private void StartCreate()
	{
		var empty = new FrameworkDto(
			Guid.Empty,
			string.Empty,
			string.Empty,
			Array.Empty<Guid>(),
			Array.Empty<string>(),
			DateTimeOffset.UtcNow,
			DateTimeOffset.UtcNow
		);

		var req = new EFEditRequest
		{
			Title = "Framework anlegen",
			Model = empty,
			ContractsAssembly = typeof(FrameworkDto).Assembly,
			EfParentType = typeof(Framework),
			IsCreate = true,
			OnSave = async ctx =>
			{
				try
				{
					var dto = (FrameworkDto)ctx.Model;

					// ðŸ”§ Werte aus dem EditContext ziehen (nicht nur aus dto)
					var name = ctx.TryGetValue("Name", out var rawName)
						? rawName?.ToString()?.Trim() ?? ""
						: dto.Name;

					var version = ctx.TryGetValue("Version", out var rawVersion)
						? rawVersion?.ToString()?.Trim() ?? ""
						: dto.Version;

					var selectedIndustryIds = ExtractGuidArray(
						ctx.TryGetValue("IndustryIds", out var rawIds) ? rawIds : dto.IndustryIds
					);

					var create = new CreateFrameworkRequest(
						name,
						version,
						selectedIndustryIds
					);

					_ = await FrameworkService.CreateAsync(create);

					await Reload();
					EFEditService.Close();
				}
				catch (Exception ex)
				{
					ConfirmService.Open(new DialogRequest
					{
						Title = "Fehler beim Anlegen",
						Message = ex.Message,
						ConfirmText = "Okay",
						OnConfirm = () => Task.CompletedTask
					});
				}
			}
		};

		EFEditService.Open(req);
	}

	// Helper: robustes Parsen verschiedenster Formwerte zu Guid[]
	private static Guid[] ExtractGuidArray(object? value)
	{
		var list = new List<Guid>();

		switch (value)
		{
			case null:
				return Array.Empty<Guid>();

			case IEnumerable<Guid> gs:
				list.AddRange(gs.Where(g => g != Guid.Empty));
				break;

			case IEnumerable<string> ss:
				foreach (var s in ss)
					if (Guid.TryParse(s, out var g) && g != Guid.Empty)
						list.Add(g);
				break;

			case System.Collections.IEnumerable seq when value is not string:
				foreach (var e in seq)
				{
					var s = e?.ToString();
					if (!string.IsNullOrWhiteSpace(s) && Guid.TryParse(s, out var g) && g != Guid.Empty)
						list.Add(g);
				}
				break;

			default:
				var one = value.ToString();
				if (!string.IsNullOrWhiteSpace(one) && Guid.TryParse(one, out var g1) && g1 != Guid.Empty)
					list.Add(g1);
				break;
		}

		return list.Distinct().ToArray();
	}
}
