@page "/forgot-password"
@using CMC.Application.Services
@inject UserService UserService

<PageTitle>Forgot Password</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Forgot Password</h2>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info">@message</div>
        }

        <EditForm Model="@emailModel" OnValidSubmit="@HandleForgotPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="emailModel.Email" />
                <ValidationMessage For="@(() => emailModel.Email)" />
            </div>

            <button type="submit" class="btn primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Sending...</span>
                }
                else
                {
                    <span>Send Reset Link</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            <a href="/login">Back to Login</a>
        </p>
    </div>
</div>

@code {
    public class EmailModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }

    private EmailModel emailModel = new();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleForgotPassword()
    {
        try
        {
            isLoading = true;
            message = string.Empty;

            await UserService.RequestPasswordResetAsync(emailModel.Email);
            message = "If an account with that email exists, a password reset link has been sent.";

            emailModel.Email = string.Empty;
        }
        catch (Exception)
        {
            message = "An error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
