@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using CMC.Web.Services
@using CMC.Application.Services
@inject UserService UserService
@inject ILogger<ForgotPassword> Logger
@inject IBumperBus Bumper

<PageTitle>Forgot Password</PageTitle>

<section class="slim">
    <div class="card">
        <h2>Forgot Password</h2>

        <FormRenderer
            Model="@_vm"
            Request="@_req"
            ExtraFields="new()"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnFieldChanged"
            EnableFormSubmit="true"
            OnSubmit="HandleForgotPassword"
            SubmitButtonText="Send Reset Link"
            SubmitButtonClass="primary"
            IsSubmitDisabled="@_isLoading"
            LoadingText="Sending..."
            EnableEnterSubmit="true" />

        <p class="mt-4">
            <a href="/login">Back to Login</a>
        </p>
    </div>
</section>

@code {
    // ViewModel für FormRenderer
    private sealed class ForgotPasswordVm
    {
        [Required, EmailAddress, Display(Name="Email")]
        public string Email { get; set; } = string.Empty;
    }

    private readonly ForgotPasswordVm _vm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);
    private bool _isLoading;

    // Request für FormRenderer
    private EFEditRequest _req => new EFEditRequest
    {
        Title = "Forgot Password",
        Model = _vm,
        ContractsAssembly = typeof(ForgotPassword).Assembly,
        IsCreate = true
    };

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(ForgotPasswordVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleForgotPassword()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // DataAnnotations lokal prüfen
            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, validateAllProperties: true);

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_errors.TryGetValue(key, out var list))
                        _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Please check your inputs.", "error");
                return;
            }

            Logger.LogInformation("Password reset requested for: {Email}", _vm.Email);

            await UserService.RequestPasswordResetAsync(_vm.Email);

            Logger.LogInformation("Password reset link sent for: {Email}", _vm.Email);
            Bumper.Publish("Reset Link Sent", "If an account with that email exists, a password reset link has been sent.", "success");

            // Email-Feld nach erfolgreichem Versand leeren
            _vm.Email = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Password reset error for: {Email}", _vm.Email);
            Bumper.Publish("Error", "An unexpected error occurred. Please try again.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
