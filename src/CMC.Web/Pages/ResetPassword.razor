@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using CMC.Web.Services
@using CMC.Application.Services
@using CMC.Contracts.Users
@inject UserService UserService
@inject NavigationManager Navigation
@inject ILogger<ResetPassword> Logger
@inject IBumperBus Bumper

<PageTitle>Reset Password</PageTitle>

<section class="slim">
    <div class="card">
        <h2>Reset Password</h2>

        <FormRenderer
            Model="@_vm"
            Request="@_req"
            ExtraFields="@_extraFields"
            ValueOverrides="@_overrides"
            ValidationErrors="@_errors"
            OnFieldChanged="OnFieldChanged" />

        <div class="mt-4">
            <button type="button" class="btn primary" @onclick="HandleResetPassword" disabled="@_isLoading">
                @if (_isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Resetting...</span>
                }
                else
                {
                    <span>Reset Password</span>
                }
            </button>
        </div>

        <p class="mt-4">
            <a href="/login">Back to Login</a>
        </p>
    </div>
</section>

@code {
    // ViewModel f√ºr FormRenderer
    private sealed class ResetPasswordVm
    {
        [Required, Display(Name="Reset Token")]
        public string Token { get; set; } = string.Empty;

        [Required, MinLength(8), Display(Name="New Password")]
        public string NewPassword { get; set; } = string.Empty;

        [Required, Display(Name="Confirm New Password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private readonly ResetPasswordVm _vm = new();
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);
    private bool _isLoading;

    // Request f√ºr FormRenderer
    private EFEditRequest _req => new EFEditRequest
    {
        Title = "Reset Password",
        Model = _vm,
        ContractsAssembly = typeof(ResetPassword).Assembly,
        IsCreate = true
    };

    // ExtraFields f√ºr Passwort-Felder
    private List<ExtraField> _extraFields => new()
    {
        new ExtraField(
            Name: "NewPassword",
            Label: "New Password",
            Type: typeof(string),
            DataType: "password",
            Required: true,
            Hint: "Minimum 8 characters"
        ),
        new ExtraField(
            Name: "ConfirmPassword",
            Label: "Confirm New Password",
            Type: typeof(string),
            DataType: "password",
            Required: true
        )
    };

    protected override void OnInitialized()
    {
        // Token aus Query String lesen
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var token))
        {
            _vm.Token = token.ToString();
        }
    }

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(ResetPasswordVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);

        // Passwort-Match-Validierung
        if (change.Name.Equals("ConfirmPassword", StringComparison.OrdinalIgnoreCase) ||
            change.Name.Equals("NewPassword", StringComparison.OrdinalIgnoreCase))
        {
            ValidatePasswordMatch();
        }
    }

    private void ValidatePasswordMatch()
    {
        const string key = "ConfirmPassword";

        if (!string.IsNullOrEmpty(_vm.NewPassword) && !string.IsNullOrEmpty(_vm.ConfirmPassword))
        {
            if (_vm.NewPassword != _vm.ConfirmPassword)
            {
                _errors[key] = new[] { "Passwords do not match." };
            }
            else
            {
                _errors.Remove(key);
            }
        }
        else
        {
            _errors.Remove(key);
        }
    }

    private async Task HandleResetPassword()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // DataAnnotations lokal pr√ºfen
            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, validateAllProperties: true);

            // Passwort-Match zus√§tzlich pr√ºfen
            ValidatePasswordMatch();

            if (!ok || _errors.Any())
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    if (!_errors.TryGetValue(key, out var list))
                        _errors[key] = new[] { r.ErrorMessage ?? "Invalid value." };
                    else
                        _errors[key] = list.Append(r.ErrorMessage ?? "Invalid value.").ToArray();
                }
                Bumper.Publish("Validation", "Please check your inputs.", "error");
                return;
            }

            Logger.LogInformation("üîê Password reset attempt for token: {Token}", _vm.Token[..8] + "...");

            // ResetPasswordRequest aus ViewModel erstellen
            var resetRequest = new ResetPasswordRequest
            {
                Token = _vm.Token,
                NewPassword = _vm.NewPassword
            };

            var success = await UserService.ResetPasswordAsync(resetRequest);

            if (success)
            {
                Logger.LogInformation("‚úÖ Password reset successful for token: {Token}", _vm.Token[..8] + "...");
                Bumper.Publish("Password Reset", "Password reset successful! You can now login with your new password.", "success");

                // Form nach erfolgreichem Reset leeren
                _vm.Token = string.Empty;
                _vm.NewPassword = string.Empty;
                _vm.ConfirmPassword = string.Empty;

                // Nach kurzer Verz√∂gerung zur Login-Seite weiterleiten
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                Logger.LogWarning("‚ùå Password reset failed for token: {Token}", _vm.Token[..8] + "...");
                Bumper.Publish("Reset Failed", "Invalid or expired reset token.", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Password reset error");
            Bumper.Publish("Error", "An error occurred. Please try again.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
