@page "/reset-password"
@using CMC.Application.Services
@using CMC.Contracts.Users
@inject UserService UserService
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Reset Password</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@resetRequest" OnValidSubmit="@HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="token">Reset Token:</label>
                <InputText id="token" class="form-control" @bind-Value="resetRequest.Token" />
                <ValidationMessage For="@(() => resetRequest.Token)" />
            </div>

            <div class="form-group mb-3">
                <label for="newPassword">New Password:</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetRequest.NewPassword" />
                <ValidationMessage For="@(() => resetRequest.NewPassword)" />
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Confirm New Password:</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
                @if (!string.IsNullOrEmpty(confirmPassword) && resetRequest.NewPassword != confirmPassword)
                {
                    <div class="text-danger">Passwords do not match.</div>
                }
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Resetting...</span>
                }
                else
                {
                    <span>Reset Password</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            <a href="/login">Back to Login</a>
        </p>
    </div>
</div>

@code {
    private ResetPasswordRequest resetRequest = new()
    {
        Token = string.Empty,
        NewPassword = string.Empty
    };
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Get token from query string if provided
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var token))
        {
            resetRequest.Token = token.ToString();
        }
    }

    private async Task HandleResetPassword()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (resetRequest.NewPassword != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var success = await UserService.ResetPasswordAsync(resetRequest);
            if (success)
            {
                successMessage = "Password reset successful! You can now login with your new password.";
                resetRequest = new()
                {
                    Token = string.Empty,
                    NewPassword = string.Empty
                };
                confirmPassword = string.Empty;
            }
            else
            {
                errorMessage = "Invalid or expired reset token.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
