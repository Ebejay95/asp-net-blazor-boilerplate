@* Shared/EFEditHost.razor *@
@using System.Linq
@using CMC.Web.Services
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject EFEditService EFEdit
@implements IDisposable

@if (_current is not null)
{
    <EFEdit Request="@_current" />
}

@code {
    private EFEditRequest? _current;

    protected override void OnInitialized()
    {
        // Auf alles hören – und IMMER den Stack spiegeln
        EFEdit.OpenRequested  += OnOpenRequested;
        EFEdit.CloseRequested += OnCloseRequested;
        EFEdit.StackChanged   += OnStackChanged;

        RefreshFromService();
    }

    private void RefreshFromService()
    {
        // oberstes Frame anzeigen (falls vorhanden)
        _current = EFEdit.Stack.LastOrDefault();
        InvokeAsync(StateHasChanged);
    }

    private void OnOpenRequested(EFEditRequest _)
        => RefreshFromService();

    private void OnCloseRequested()
        => RefreshFromService();

    private void OnStackChanged()
        => RefreshFromService();

    public void Dispose()
    {
        EFEdit.OpenRequested  -= OnOpenRequested;
        EFEdit.CloseRequested -= OnCloseRequested;
        EFEdit.StackChanged   -= OnStackChanged;
    }
}
