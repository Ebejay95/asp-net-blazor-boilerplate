@using CMC.Web.Services
@inject IBumperBus Bus
@implements IDisposable

<div class="bumperhost">
    @foreach (var item in _items)
    {
        var classes = $"bumper {(item.IsClosing ? " fade-out" : "")}";
        <div @key="item" class="@classes">
            <small class="opacity-60">(@item.Data.Severity)</small>
            <strong>@item.Data.Title</strong>
            <div>@item.Data.Message</div>
        </div>
    }
</div>

@code {
    // Wrapper, damit wir einen Closing-State haben
    private sealed class BumpItem
    {
        public required Bump Data { get; init; }
        public bool IsClosing { get; set; }
    }

    // Liste der aktiven Bumps
    private readonly List<BumpItem> _items = new();

    // Animationsdauer (ms) muss zur CSS-Dauer passen (0.3s = 300ms)
    private const int FadeOutMs = 300;

    protected override void OnInitialized()
    {
        Bus.Pushed += OnPush;
    }

    private void OnPush(Bump b)
    {
        var item = new BumpItem { Data = b };
        _items.Add(item);
        StateHasChanged();

        // Verbleibende Zeit bis zum Ausblenden
        var delay = (int)Math.Max(0, (b.Until - DateTimeOffset.UtcNow).TotalMilliseconds);

        _ = Task.Run(async () =>
        {
            // warten bis „Lebenszeit“ vorbei ist
            await Task.Delay(delay);

            // „fade-out“ setzen und Re-Render
            item.IsClosing = true;
            await InvokeAsync(StateHasChanged);

            // warten bis Animation fertig, dann entfernen
            await Task.Delay(FadeOutMs);
            _items.Remove(item);
            await InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose() => Bus.Pushed -= OnPush;
}
