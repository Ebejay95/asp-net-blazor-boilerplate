@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using CMC.Web.Services
@inject ILogger<NavMenu> Logger
@inject PersistentInMemoryAuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar" style="background:black">
    <div class="container-fluid">
        <a class="" href="">CMC</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="CollapseNavMenu">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                @{
                    Logger.LogInformation("üîê NavMenu: User is authorized - {User}", context.User.Identity?.Name);
                }

                <!-- Benutzerdaten anzeigen -->
                <div class="nav-item px-3 mb-3 border-bottom pb-3">
                    <div class="text-light">
                        <div class="d-flex align-items-center mb-2">
                            <span class="badge bg-success me-2">‚óè</span>
                            <strong>@context.User.Identity?.Name</strong>
                        </div>
                        <div class="text-muted small">
                            @GetFullName(context)
                        </div>
                        <div class="text-muted small">
                            ID: @GetUserId(context)
                        </div>
                    </div>
                </div>

                <!-- Navigation f√ºr eingeloggte User -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Dashboard
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="oi oi-person" aria-hidden="true"></span> Mein Profil
                    </NavLink>
                </div>

                <!-- Logout Button -->
                <div class="nav-item px-3 mt-3">
                    <button class="" @onclick="HandleLogout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> Abmelden
                    </button>
                </div>
            </Authorized>

            <NotAuthorized>
                @{
                    Logger.LogInformation("üö´ NavMenu: User is not authorized");
                }

                <!-- Navigation f√ºr nicht-eingeloggte User -->
                <div class="nav-item px-3 mb-3">
                    <div class="text-light text-center py-3">
                        <div class="text-muted">Nicht angemeldet</div>
                    </div>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Anmelden
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="register">
                        <span class="oi oi-plus" aria-hidden="true"></span> Registrieren
                    </NavLink>
                </div>

                <!-- √ñffentliche Bereiche -->
                <div class="nav-item px-3 mt-3 border-top pt-3">
                    <div class="text-muted small px-3 mb-2">√ñffentlich</div>
                    <NavLink class="nav-link" href="about">
                        <span class="oi oi-info" aria-hidden="true"></span> √úber uns
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void CollapseNavMenu()
    {
        collapseNavMenu = true;
    }

    private string GetFullName(AuthenticationState authState)
    {
        var firstName = GetClaim(authState, ClaimTypes.GivenName);
        var lastName = GetClaim(authState, ClaimTypes.Surname);
        return $"{firstName} {lastName}".Trim();
    }

    private string GetUserId(AuthenticationState authState)
    {
        return GetClaim(authState, ClaimTypes.NameIdentifier);
    }

    private string GetClaim(AuthenticationState authState, string claimType)
    {
        return authState.User.FindFirst(claimType)?.Value ?? "N/A";
    }

    private async Task HandleLogout()
    {
        try
        {
            Logger.LogInformation("üö™ User logout initiated from NavMenu");

            // Session aus InMemory Provider entfernen
            var httpContext = HttpContextAccessor?.HttpContext;
            var sessionId = httpContext?.Session?.Id;

            if (!string.IsNullOrEmpty(sessionId))
            {
                AuthProvider.ClearUserSession(sessionId);
                Logger.LogInformation("‚úÖ Session cleared: {SessionId}", sessionId);
            }

            // Zur Login-Seite weiterleiten
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Error during logout from NavMenu");
            Navigation.NavigateTo("/login", true);
        }
    }

    [Inject] private IHttpContextAccessor? HttpContextAccessor { get; set; }
}
