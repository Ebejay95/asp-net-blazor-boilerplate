@using System.Reflection
@using Microsoft.AspNetCore.Components
@using CMC.Web.Services
@using CMC.Web.Shared
@using CMC.Web.Util
@implements IDisposable

@inject EditDrawerService EditDrawerService

@if (_isOpen && _request is not null)
{
    <!-- Backdrop -->
    <div class="ed-backdrop ed-backdrop--open" @onclick="Close" aria-hidden="true"></div>

    <!-- Panel -->
    <aside class="ed-wrap ed-wrap--open"
           role="dialog"
           aria-modal="true"
           aria-labelledby="ed-title"
           @onclick:stopPropagation>
        <header class="ed-header">
            <h3 id="ed-title">@_request.Title</h3>
            <button class="btn flat" @onclick="Close" aria-label="Schließen">×</button>
        </header>

        <section class="ed-body">
            <CascadingValue Value="_ctx">
                <FormRenderer @ref="_form"
                              Model="_request.Model"
                              ExtraFields="_request.ExtraFields"
                              OnFieldChanged="OnFieldChanged" />
            </CascadingValue>
        </section>

        <footer class="ed-body" style="border-top:1px solid #eee; padding-top:.5rem;">
            <div class="btn-group">
                <button class="btn primary" @onclick="SaveAsync">Speichern</button>
                @if (_request.OnDelete is not null && !_request.IsCreate)
                {
                    <button class="btn danger" @onclick="DeleteAsync">Löschen</button>
                }
                <button class="btn flat" @onclick="Close">Abbrechen</button>
            </div>
        </footer>
    </aside>
}

@code {
    // ---- Optionaler Parameter-Modus (falls du <EditDrawer Request="..."/> jemals nutzt) ----
    [Parameter] public EditDrawerRequest? Request { get; set; }
    private bool _openedByParameter;

    protected override void OnParametersSet()
    {
        if (Request is not null) HandleOpen(Request);
        else if (_openedByParameter) HandleClose();

        _openedByParameter = Request is not null;
    }

    // ---- Service-Modus --------------------------------------------------------
    protected override void OnInitialized()
    {
        EditDrawerService.OpenRequested += HandleOpen;
        EditDrawerService.CloseRequested += HandleClose;
    }

    // ---- State ----------------------------------------------------------------
    private bool _isOpen;
    private EditDrawerRequest? _request;

    private FormRenderer? _form;
    private RequestBuildContext? _ctx;

    private readonly Dictionary<string, object?> _changes =
        new(StringComparer.OrdinalIgnoreCase);

    private void HandleOpen(EditDrawerRequest req)
    {
        Console.WriteLine($"EditDrawer: OPEN -> {req.Title}");
        _request = req;
        _changes.Clear();

        var provider = new CompositeValueProvider(req.Model, _changes);
        _ctx = new RequestBuildContext(
            req.Model,
            req.ContractsAssembly,
            provider,
            req.IsCreate ? "Create" : "Update"
        );

        _isOpen = true;
        StateHasChanged();
    }

    private void HandleClose()
    {
        Console.WriteLine("EditDrawer: CLOSE");
        _isOpen = false;
        _request = null;
        _ctx = null;
        _changes.Clear();
        StateHasChanged();
    }

    private void OnFieldChanged((string Name, object? Value) change)
        => _changes[change.Name] = change.Value;

    private async Task SaveAsync()
    {
        if (_request is null) return;

        var provider = new CompositeValueProvider(_request.Model, _changes);
        var action = _request.IsCreate ? "Create" : "Update";

        _ctx = new RequestBuildContext(
            _request.Model,
            _request.ContractsAssembly,
            provider,
            action
        );

        if (_request.OnSave is not null && _ctx is not null)
            await _request.OnSave.Invoke(_ctx);

        Close();
    }

    private async Task DeleteAsync()
    {
        if (_request?.OnDelete is not null && _ctx is not null)
            await _request.OnDelete.Invoke(_ctx);

        Close();
    }

    private void Close() => HandleClose();

    public void Dispose()
    {
        EditDrawerService.OpenRequested -= HandleOpen;
        EditDrawerService.CloseRequested -= HandleClose;
    }
}
