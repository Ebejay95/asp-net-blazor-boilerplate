@using System.Reflection
@using Microsoft.AspNetCore.Components
@using CMC.Web.Services
@using CMC.Web.Shared
@implements IDisposable
@inject EditDrawerService EditDrawerService

@if (_isOpen && _request is not null)
{
	<!-- Backdrop -->
	<div class="ed-backdrop ed-backdrop--open" style="z-index:@ZIndex" aria-hidden="true"></div>

	<!-- Panel -->
	<aside class="ed-wrap ed-wrap--open" style="z-index:@(ZIndex+1)" role="dialog" aria-modal="true" aria-labelledby="ed-title" @onclick:stopPropagation>
		<header class="ed-header">
			<h3 id="ed-title">@_request.Title</h3>
			<button class="btn flat" @onclick="Cancel" aria-label="Schließen">×</button>
		</header>

		<section class="ed-body">
			<FormRenderer @ref="_form"
						  Model="_request.Model"
						  Request="_request"
						  Ctx="_adapter"
						  ExtraFields="_request.ExtraFields"
						  OnFieldChanged="OnFieldChanged" />
		</section>

<footer class="ed-body" style="border-top:1px solid #eee; padding-top:.5rem;">
  <div class="btn-group">
    <button type="button" class="btn primary" @onclick="SaveAsync">Speichern</button>
    @if (_request.OnDelete is not null && !_request.IsCreate)
    {
      <button type="button" class="btn danger" @onclick="DeleteAsync">Löschen</button>
    }
    <button type="button" class="btn flat" @onclick="Cancel">Abbrechen</button>
  </div>
</footer>

	</aside>
}

@code {
	[Parameter] public int ZIndex { get; set; } = 1000;

	// --- Parameter-Modus (Stacked) ---
	[Parameter] public EditDrawerRequest? Request { get; set; }
	private bool _openedByParameter;
	private bool _useServiceEvents;

	protected override void OnInitialized()
	{
	}

	protected override void OnParametersSet()
	{
		var wantServiceMode = Request is null;

		if (wantServiceMode && !_useServiceEvents)
		{
			EditDrawerService.OpenRequested += HandleOpen;
			EditDrawerService.CloseRequested += HandleClose;
			_useServiceEvents = true;
		}
		else if (!wantServiceMode && _useServiceEvents)
		{
			EditDrawerService.OpenRequested -= HandleOpen;
			EditDrawerService.CloseRequested -= HandleClose;
			_useServiceEvents = false;
		}

		if (Request is not null && !ReferenceEquals(Request, _request))
		{
			HandleOpen(Request);
			_openedByParameter = true;
		}
		else if (Request is null && _openedByParameter)
		{
			HandleClose();
			_openedByParameter = false;
		}
	}


	// --- State ---
	private bool _isOpen;
	private EditDrawerRequest? _request;
	private FormRenderer? _form;

	// Neues Build/Mapping-Objekt (ersetzt RequestBuildContext)
	private EditContextAdapter? _adapter;

	// Änderungen, die der FormRenderer via OnFieldChanged meldet (werden in Adapter gemappt)
	private readonly Dictionary<string, object?> _changes = new(StringComparer.OrdinalIgnoreCase);

	private void HandleOpen(EditDrawerRequest req)
	{
		Console.WriteLine($"EditDrawer: OPEN -> {req.Title}");
		_request = req;
		_changes.Clear();

		// Adapter inkl. Overrides (damit ExtraFields/OnFieldChanged in Build(...) landen)
		_adapter = new EditContextAdapter(req, req.Model, _changes);

		_isOpen = true;
		StateHasChanged();
	}

	private void HandleClose()
	{
		Console.WriteLine("EditDrawer: CLOSE");
		_isOpen = false;
		_request = null;
		_adapter = null;
		_changes.Clear();
		StateHasChanged();
	}

	private void OnFieldChanged((string Name, object? Value) change) => _changes[change.Name] = change.Value;

	private async Task SaveAsync()
	{
		if (_request is null) return;

		// Adapter frisch mit *aktuellen* Änderungen bauen
		_adapter = new EditContextAdapter(_request, _request.Model, _changes);

		if (_request.OnSave is not null)
			await _request.OnSave.Invoke(_adapter);
	}

	private async Task DeleteAsync()
	{
		_changes.Clear();
		if (_request?.OnDelete is not null && _adapter is not null)
			await _request.OnDelete.Invoke(_adapter);
		// OnDelete entscheidet i. d. R. selbst über Close (z. B. nach Confirm)
	}

	private void Cancel()
	{
		// Immer nur den obersten Drawer schließen
		EditDrawerService.Close();
	}

	public void Dispose()
	{
		if (_useServiceEvents)
		{
			EditDrawerService.OpenRequested -= HandleOpen;
			EditDrawerService.CloseRequested -= HandleClose;
		}
	}
}
