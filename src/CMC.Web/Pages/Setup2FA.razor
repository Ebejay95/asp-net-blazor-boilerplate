@page "/setup-2fa"
@attribute [Authorize(Policy = "RequireMfaSetup")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using CMC.Web.Services

@inject NavigationManager Navigation
@inject ILogger<Setup2FA> Logger
@inject IBumperBus Bumper
@inject HttpClient Http
@inject IWebHostEnvironment Environment
@inject IConfiguration Configuration
@inject IJSRuntime JS

<PageTitle>2FA Setup</PageTitle>

<canvas id="canvas" style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      display: block;
      z-index: -1;
      pointer-events: auto;
"></canvas>

<section class="slim center">
    <div class="card">
        <h2>Sicherheit einrichten</h2>
        <p class="mb-4">Für zusätzliche Sicherheit richten Sie bitte die Zwei-Faktor-Authentifizierung ein.</p>

        @if (_isInitError)
        {
            <div class="alert error">@_initErrorMessage</div>
        }
        else if (!_initialized)
        {
            <div>Lade…</div>
        }
        else
        {
            <div class="qr-wrap" style="display:flex; gap:1.25rem; align-items:center; flex-wrap:wrap;">
                <img src="@_qrDataUrl" alt="2FA QR Code" style="width:200px; height:200px; image-rendering: pixelated; border:1px solid var(--border-color); border-radius:8px;" />
                <div>
                    <p>Scannen Sie den QR-Code mit Ihrer Authenticator-App (z. B. Microsoft/Google Authenticator).<br />
                    Konto: <strong>@_accountNameMasked</strong><br />
                    Aussteller: <strong>@_appLabel</strong></p>
                    <small>Falls Scannen nicht möglich ist, nutzen Sie bitte die manuelle Eingabe in Ihrer App (in der App angezeigt).</small>
                </div>
            </div>

            <EditForm Model="_vm" OnValidSubmit="HandleConfirm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-grid" style="margin-top:1rem;">
                    <label for="code">Bestätigungscode</label>
                    <InputText id="code" @bind-Value="_vm.Code" class="input" inputmode="numeric" autocomplete="one-time-code" />
                    <ValidationMessage For="() => _vm.Code" />
                </div>

                <div class="actions" style="display:flex; gap:.5rem; margin-top:1rem;">
                    <button class="primary" disabled="@_isLoading">@(_isLoading ? "Einrichten…" : "2FA aktivieren")</button>
                    @if (_mfaOptional)
                    {
                        <button type="button" class="secondary" @onclick="Skip2FASetup" disabled="@_isLoading">Später einrichten</button>
                    }
                </div>
            </EditForm>
        }
    </div>
</section>

@code {
    private bool _bgInitDone;
    private bool _initialized;
    private bool _isInitError;
    private string _initErrorMessage = string.Empty;

    private bool _isLoading;
    private string _qrDataUrl = string.Empty;        // data:image/png;base64,... vom Server
    private string _accountNameMasked = string.Empty; // z.B. j***@g***.de
    private bool _mfaOptional;                       // vom Server gesteuert

    private string _appLabel = "CMC App";

    private readonly ConfirmVm _vm = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_bgInitDone)
        {
            try
            {
                await JS.InvokeVoidAsync("eval",
                    "window.initBgAnimation && window.initBgAnimation(document.getElementById('canvas'));"
                );
                _bgInitDone = true;
            }
            catch
            {
                // no-op (Animation optional)
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Animation sauber stoppen, falls vorhanden
        try
        {
            await JS.InvokeVoidAsync("eval", "window.stopBgAnimation && window.stopBgAnimation()");
        }
        catch
        {
            // no-op
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _appLabel = GetAppLabel();

        try
        {
            // Serverseitiges Gatekeeping: liefert QR + Flags nur, wenn Seite erlaubt ist
            var init = await Http.GetFromJsonAsync<Start2FAResponse>("api/auth/setup-2fa/start");
            if (init is null)
            {
                _isInitError = true;
                _initErrorMessage = "Unerwartete Antwort vom Server.";
                return;
            }

            if (!init.Allowed)
            {
                // Server entscheidet final, ob diese Seite zulässig ist
                Navigation.NavigateTo("/");
                return;
            }

            _qrDataUrl = init.QrPngDataUrl ?? string.Empty;
            _accountNameMasked = init.AccountNameMasked ?? "";
            _mfaOptional = init.MfaOptional;
            _initialized = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA start init failed");
            _isInitError = true;
            _initErrorMessage = "Fehler beim Initialisieren des 2FA-Setups.";
        }
    }

    private string GetAppLabel()
    {
        if (Environment.IsDevelopment())
            return "CMC App (Dev)";

        var baseUrl = System.Environment.GetEnvironmentVariable("APP_PUBLIC_BASE_URL") ?? "";
        if (baseUrl.Contains("test.audicius.de")) return "CMC App (Test)";
        if (baseUrl.Contains("cmc.audicius.de")) return "CMC App";
        if (baseUrl.Contains("localhost")) return "CMC App (Dev)";

        var envLabel = System.Environment.GetEnvironmentVariable("CMC_ENV_LABEL");
        if (!string.IsNullOrWhiteSpace(envLabel)) return $"CMC App ({envLabel})";
        return "CMC App";
    }

    private async Task HandleConfirm()
    {
        try
        {
            _isLoading = true;

            var response = await Http.PostAsJsonAsync("api/auth/setup-2fa/confirm", new Confirm2FARequest
            {
                Code = _vm.Code
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Confirm2FAResponse>();
                if (result?.success == true)
                {
                    Logger.LogInformation("2FA setup successful");
                    Bumper.Publish("2FA Setup", "Zwei-Faktor-Authentifizierung erfolgreich eingerichtet!", "success", 1500);
                    await Task.Delay(800);
                    Navigation.NavigateTo("/", forceLoad: true);
                    return;
                }

                var msg = result?.message ?? "Ungültiger Code.";
                Bumper.Publish("Invalid Code", msg, "error");
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                Logger.LogError("2FA confirm failed. Response: {Response}", err);
                Bumper.Publish("Error", "Fehler beim Einrichten der 2FA.", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA setup error");
            Bumper.Publish("Error", "Fehler beim Einrichten der 2FA.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task Skip2FASetup()
    {
        try
        {
            if (!_mfaOptional)
            {
                return; // Sicherheitsgurt – sollte durch UI/Policy ohnehin nicht möglich sein
            }

            Logger.LogInformation("User skipped 2FA setup");

            var response = await Http.PostAsJsonAsync("api/auth/complete-login", new { TwoFAVerified = false });
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error skipping 2FA setup");
            Navigation.NavigateTo("/login");
        }
    }

    // ViewModel für das Bestätigungsformular
    private sealed class ConfirmVm
    {
        [Required(ErrorMessage = "Bitte geben Sie den Bestätigungscode ein")]
        [RegularExpression("^[0-9]{6}$", ErrorMessage = "Bitte 6-stelligen Code eingeben")]
        public string? Code { get; set; }
    }

    // API Models
    private sealed class Start2FAResponse
    {
        public bool Allowed { get; set; }
        public string? QrPngDataUrl { get; set; }
        public string? AccountNameMasked { get; set; }
        public bool MfaOptional { get; set; }
    }

    private sealed class Confirm2FAResponse
    {
        public bool success { get; set; }
        public string? message { get; set; }
    }

    private sealed class Confirm2FARequest
    {
        public string? Code { get; set; }
    }
}
