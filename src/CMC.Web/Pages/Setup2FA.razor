@page "/setup-2fa"
@implements IAsyncDisposable

@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Reflection
@using CMC.Web.Services
@using CMC.Application.Services
@using CMC.Web.Pages.FormFields
@using CMC.Contracts.Common
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@inject NavigationManager Navigation
@inject ILogger<Setup2FA> Logger
@inject IBumperBus Bumper
@inject HttpClient Http
@inject IWebHostEnvironment Environment
@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject UserService UserService
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>2FA Setup</PageTitle>

<section class="slim center">
    <div class="card">
        @if (_accessDenied)
        {
            <h2>Zugriff verweigert</h2>
            <p>Sie haben keinen Zugriff auf diese Seite. Bitte melden Sie sich zuerst an.</p>
            <div class="actions" style="margin-top:1rem;">
                <button type="button" class="secondary" @onclick="RedirectToLogin">Zurück zum Login</button>
            </div>
        }
        else if (_isInitError)
        {
            <h2>Sicherheit einrichten</h2>
            <div class="alert error">@_initErrorMessage</div>
            <div class="actions" style="margin-top:1rem;">
                <button type="button" class="secondary" @onclick="RedirectToLogin">Zurück zum Login</button>
            </div>
        }
        else if (!_initialized)
        {
            <div>Lade…</div>
        }
        else
        {
            <h2>Sicherheit einrichten</h2>
            <p class="mb-4">Für zusätzliche Sicherheit richten Sie bitte die Zwei-Faktor-Authentifizierung ein.</p>

            <FormRenderer
                Model="@_vm"
                Request="@_req"
                ExtraFields="new()"
                ValueOverrides="@_overrides"
                ValidationErrors="@_errors"
                OnFieldChanged="OnFieldChanged"
                EnableFormSubmit="true"
                OnSubmit="HandleConfirm"
                SubmitButtonText="2FA aktivieren"
                SubmitButtonClass="primary"
                IsSubmitDisabled="@_isLoading"
                LoadingText="Einrichten…"
                EnableEnterSubmit="true" />

            <div class="actions" style="display:flex; gap:.5rem; margin-top:1rem;">
                @if (_mfaOptional)
                {
                    <button type="button" class="secondary" @onclick="Skip2FASetup" disabled="@_isLoading">
                        Später einrichten
                    </button>
                }
            </div>
        }
    </div>
</section>

@code {
    // ---------- ViewModel: nutzt Heuristik TwoFASecret / TwoFACode ----------
    private sealed class ConfirmVm
    {
        // QRCodeField (TwoFASecret) – wird vom FormRenderer als QR-Code angezeigt
        [Display(Name = "Authenticator-Secret")]
        [Required]
        public string TwoFASecret { get; set; } = string.Empty;

        // TwoFAInputField (TwoFACode) – 6 Felder
        [Display(Name = "Bestätigungscode")]
        [Required(ErrorMessage = "Bitte geben Sie den Bestätigungscode ein")]
        [RegularExpression("^[0-9]{6}$", ErrorMessage = "Bitte 6-stelligen Code eingeben")]
        public string TwoFACode { get; set; } = string.Empty;
    }

    private readonly ConfirmVm _vm = new();

    // Overrides für QR-Code-Parameter
    private readonly Dictionary<string, object?> _overrides = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string[]> _errors = new(StringComparer.OrdinalIgnoreCase);

    private bool _initialized;
    private bool _isInitError;
    private string _initErrorMessage = string.Empty;
    private bool _accessDenied;

    private bool _isLoading;
    private bool _mfaOptional = true;

    private string _email = string.Empty;
    private string _appLabel = "CMC App";

    private EFEditRequest _req => new()
    {
        Title = "2FA Setup",
        Model = _vm,
        ContractsAssembly = typeof(ConfirmVm).Assembly,
        IsCreate = true
    };


    public async ValueTask DisposeAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "window.stopBgAnimation && window.stopBgAnimation()");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Background animation cleanup failed");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _appLabel = GetAppLabel();

        try
        {
            if (!HasValidPendingLoginSession())
            {
                Logger.LogWarning("No valid pending login session for 2FA setup");
                _accessDenied = true;
                return;
            }

            _email = GetEmailFromContext() ?? string.Empty;
            if (string.IsNullOrWhiteSpace(_email))
            {
                _isInitError = true;
                _initErrorMessage = "Sitzung abgelaufen. Bitte melden Sie sich erneut an.";
                return;
            }

            // Secret generieren und ins VM setzen -> QRCodeField übernimmt Render
            _vm.TwoFASecret = UserService.GenerateTwoFASecret();

            // Parameter für QRCodeField via ValueOverrides
            _overrides["TwoFASecret_Issuer"] = _appLabel;
            _overrides["TwoFASecret_AccountName"] = _email;
            _overrides["TwoFASecret_ShowSecret"] = true; // willst du das ausblenden: false

            _initialized = true;
            Logger.LogInformation("2FA setup initialized for: {Email}", _email);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA setup initialization failed");
            _isInitError = true;
            _initErrorMessage = "Fehler beim Initialisieren des 2FA-Setups.";
        }
    }

    private void OnFieldChanged((string Name, object? Value) change)
    {
        var prop = typeof(ConfirmVm).GetProperty(change.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        prop?.SetValue(_vm, change.Value?.ToString() ?? string.Empty);
    }

    private async Task HandleConfirm()
    {
        try
        {
            _isLoading = true;
            _errors.Clear();

            // Validate client-side
            var ctx = new ValidationContext(_vm);
            var results = new List<ValidationResult>();
            var ok = Validator.TryValidateObject(_vm, ctx, results, true);

            if (!ok)
            {
                foreach (var r in results)
                {
                    var key = (r.MemberNames?.FirstOrDefault()) ?? "__global";
                    _errors[key] = (_errors.TryGetValue(key, out var list) ? list.Append(r.ErrorMessage ?? "Invalid.").ToArray()
                                                                          : new[] { r.ErrorMessage ?? "Invalid." });
                }
                Bumper.Publish("Validation", "Bitte prüfen Sie Ihre Eingaben.", "error");
                return;
            }

            var response = await Http.PostAsJsonAsync("api/auth/setup-2fa", new Setup2FARequest
            {
                Email = _email,
                Secret = _vm.TwoFASecret,
                ConfirmationCode = _vm.TwoFACode
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Setup2FAResponse>();
                if (result?.success == true)
                {
                    Bumper.Publish("2FA Setup", result.message ?? "Zwei-Faktor-Authentifizierung erfolgreich eingerichtet!", "success", 1500);
                    await Task.Delay(800);
                    Navigation.NavigateTo(!string.IsNullOrWhiteSpace(result.redirectUrl) ? result.redirectUrl : "/", forceLoad: true);
                    return;
                }

                Bumper.Publish("Setup Failed", result?.message ?? "Setup fehlgeschlagen.", "error");
            }
            else
            {
                var msg = response.StatusCode == System.Net.HttpStatusCode.BadRequest
                    ? "Ungültiger Bestätigungscode."
                    : "Fehler beim Einrichten der 2FA.";
                Bumper.Publish("Setup Error", msg, "error");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "Network error during 2FA setup");
            Bumper.Publish("Network Error", "Verbindungsfehler. Bitte versuchen Sie es erneut.", "error");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "2FA setup error");
            Bumper.Publish("Error", "Unerwarteter Fehler beim Einrichten der 2FA.", "error");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task Skip2FASetup()
    {
        try
        {
            if (!_mfaOptional) return;

            var response = await Http.PostAsJsonAsync("api/auth/complete-login", new CompleteLoginRequest
            {
                Email = _email,
                TwoFAVerified = false
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CompleteLoginResponse>();
                Navigation.NavigateTo(result?.redirectUrl ?? "/", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error skipping 2FA setup");
            Navigation.NavigateTo("/");
        }
    }

    private void RedirectToLogin() => Navigation.NavigateTo("/");

    // ----- Helper aus deinem Original -----
    private bool HasValidPendingLoginSession()
    {
        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext == null) return false;

            var sessionEmail = httpContext.Session.GetString("PendingLogin:Email");
            var sessionUserId = httpContext.Session.GetString("PendingLogin:UserId");
            return !string.IsNullOrWhiteSpace(sessionEmail) && !string.IsNullOrWhiteSpace(sessionUserId);
        }
        catch (Exception)
        {
            return false;
        }
    }

    private string? GetEmailFromContext()
    {
        if (!string.IsNullOrWhiteSpace(Email)) return Email;

        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            var sessionEmail = httpContext?.Session.GetString("PendingLogin:Email");
            if (!string.IsNullOrWhiteSpace(sessionEmail)) return sessionEmail;
        }
        catch { /* ignore */ }

        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        return query["email"];
    }

    [Parameter, SupplyParameterFromQuery] public string? Email { get; set; }

    private string GetAppLabel()
    {
        if (Environment.IsDevelopment())
            return "CMC App (Dev)";

        var baseUrl = System.Environment.GetEnvironmentVariable("APP_PUBLIC_BASE_URL") ?? "";
        if (baseUrl.Contains("test.examplecompany.de")) return "CMC App (Test)";
        if (baseUrl.Contains("cmc.examplecompany.de")) return "CMC App";
        if (baseUrl.Contains("localhost")) return "CMC App (Dev)";

        var envLabel = System.Environment.GetEnvironmentVariable("CMC_ENV_LABEL");
        if (!string.IsNullOrWhiteSpace(envLabel)) return $"CMC App ({envLabel})";
        return "CMC App";
    }

    // API-DTOs wie gehabt
    private sealed class Setup2FARequest
    {
        public string Email { get; set; } = "";
        public string Secret { get; set; } = "";
        public string ConfirmationCode { get; set; } = "";
    }
    private sealed class Setup2FAResponse
    {
        public bool success { get; set; }
        public string? message { get; set; }
        public string? redirectUrl { get; set; }
    }
    private sealed class CompleteLoginRequest
    {
        public string Email { get; set; } = "";
        public bool TwoFAVerified { get; set; }
    }
    private sealed class CompleteLoginResponse
    {
        public bool success { get; set; }
        public string? message { get; set; }
        public string? redirectUrl { get; set; }
    }
}
