-rw-r--r--@ 1 jonathaneberle  staff  176 27 Aug 00:10 ./CockpitPagesUsers/UserReportDefinitions.razor
-rw-r--r--@ 1 jonathaneberle  staff  164 27 Aug 00:20 ./CockpitPagesUsers/UserScenarios.razor
-rw-r--r--@ 1 jonathaneberle  staff  176 26 Aug 13:02 ./CockpitPagesUsers/UserReports.razor
-rw-r--r--@ 1 jonathaneberle  staff  162 27 Aug 00:18 ./CockpitPagesUsers/UserControls.razor
-rw-r--r--@ 1 jonathaneberle  staff  128 27 Aug 00:15 ./CockpitPagesUsers/Dashboard.razor
-rw-r--r--@ 1 jonathaneberle  staff  162 27 Aug 00:20 ./CockpitPagesUsers/UserTasks.razor
-rw-r--r--@ 1 jonathaneberle  staff  20315 26 Aug 12:50 ./Shared/FormRenderer.razor
-rw-r--r--@ 1 jonathaneberle  staff  4165 26 Aug 11:10 ./Shared/EditDrawer.razor
-rw-r--r--@ 1 jonathaneberle  staff  570 21 Aug 12:24 ./Shared/ExtraField.cs
-rw-r--r--@ 1 jonathaneberle  staff  122 21 Aug 16:30 ./Shared/MainLayout.razor
-rw-r--r--@ 1 jonathaneberle  staff  391 20 Aug 23:49 ./Shared/EditStackedHost.razor
-rw-r--r--@ 1 jonathaneberle  staff  1850 18 Aug 09:54 ./Shared/ProfileMenu.razor
-rw-r--r--@ 1 jonathaneberle  staff  3425 18 Aug 21:57 ./Shared/Dialog.razor
-rw-r--r--@ 1 jonathaneberle  staff  138 18 Aug 12:35 ./Shared/RedirectToCockpit.razor
-rw-r--r--@ 1 jonathaneberle  staff  587 18 Aug 12:33 ./Shared/NavMenu.razor
-rw-r--r--@ 1 jonathaneberle  staff  1740 21 Aug 14:16 ./Shared/ChoiceDialog.razor
-rw-r--r--@ 1 jonathaneberle  staff  1067 20 Aug 22:58 ./Shared/EditHost.razor
-rw-r--r--@ 1 jonathaneberle  staff  4404 21 Aug 18:18 ./Shared/AutoTable.razor
-rw-r--r--@ 1 jonathaneberle  staff  700 18 Aug 22:08 ./Shared/MainFooter.razor
-rw-r--r--@ 1 jonathaneberle  staff  198 14 Aug 14:48 ./Shared/RedirectToLogin.razor
-rw-r--r--@ 1 jonathaneberle  staff  9824 26 Aug 11:10 ./Shared/EditContextAdapter.cs
-rw-r--r--@ 1 jonathaneberle  staff  2405 21 Aug 16:11 ./Shared/DialogHost.razor
-rw-r--r--@ 1 jonathaneberle  staff  136 26 Aug 23:56 ./CockpitPagesSuperAdmins/Exceptions.razor
-rw-r--r--@ 1 jonathaneberle  staff  146 26 Aug 13:22 ./CockpitPagesSuperAdmins/LibraryFrameworks.razor
-rw-r--r--@ 1 jonathaneberle  staff  199 26 Aug 12:28 ./CockpitPagesSuperAdmins/Overview.razor
-rw-r--r--@ 1 jonathaneberle  staff  146 26 Aug 13:21 ./CockpitPagesSuperAdmins/LibraryScenarios.razor
-rw-r--r--@ 1 jonathaneberle  staff  145 26 Aug 23:53 ./CockpitPagesSuperAdmins/ReportDefinitions.razor
-rw-r--r--@ 1 jonathaneberle  staff  135 26 Aug 23:55 ./CockpitPagesSuperAdmins/Tasks.razor
-rw-r--r--@ 1 jonathaneberle  staff  135 26 Aug 23:52 ./CockpitPagesSuperAdmins/Reports.razor
-rw-r--r--@ 1 jonathaneberle  staff  136 26 Aug 23:58 ./CockpitPagesSuperAdmins/Evidences.razor
-rw-r--r--@ 1 jonathaneberle  staff  135 26 Aug 23:59 ./CockpitPagesSuperAdmins/Controls.razor
-rw-r--r--@ 1 jonathaneberle  staff  4390 26 Aug 12:51 ./CockpitPagesSuperAdmins/Customers.razor
-rw-r--r--@ 1 jonathaneberle  staff  145 26 Aug 13:26 ./CockpitPagesSuperAdmins/LibraryControls.razor
-rw-r--r--@ 1 jonathaneberle  staff  3553 26 Aug 12:51 ./CockpitPagesSuperAdmins/Users.razor
-rw-r--r--@ 1 jonathaneberle  staff  12522 18 Aug 12:33 ./Index.razor
-rw-r--r--@ 1 jonathaneberle  staff  229 15 Aug 15:11 ./Logout.razor
-rw-r--r--@ 1 jonathaneberle  staff  3451 18 Aug 09:54 ./Login.razor
-rw-r--r--@ 1 jonathaneberle  staff  2130 18 Aug 09:54 ./ForgotPassword.razor
-rw-r--r--@ 1 jonathaneberle  staff  1600 18 Aug 12:33 ./_Host.cshtml
-rw-r--r--@ 1 jonathaneberle  staff  1684 18 Aug 09:54 ./Profile.razor
-rw-r--r--@ 1 jonathaneberle  staff  4136 18 Aug 09:54 ./ResetPassword.razor
-rw-r--r--@ 1 jonathaneberle  staff  4427 18 Aug 09:54 ./Register.razor
-rw-r--r--@ 1 jonathaneberle  staff  10815 27 Aug 00:23 ./Cockpit.razor
=== FILE CONTENTS ===
=== ./CockpitPagesUsers/UserReportDefinitions.razor ===
@* CockpitPages/CockpitReports.razor *@
@attribute [Authorize(Roles = "user, super-admin")]

<div class="card">
	<h2>Reports</h2>
	<p>Deine Auswertungen / Berichte.</p>
</div>
=== ./CockpitPagesUsers/UserScenarios.razor ===
@* CockpitPages/CockpitReports.razor *@
@attribute [Authorize(Roles = "user, super-admin")]

<div class="card">
	<h2>Szenarien</h2>
	<p>Deine Szenarien.</p>
</div>
=== ./CockpitPagesUsers/UserReports.razor ===
@* CockpitPages/CockpitReports.razor *@
@attribute [Authorize(Roles = "user, super-admin")]

<div class="card">
	<h2>Reports</h2>
	<p>Deine Auswertungen / Berichte.</p>
</div>
=== ./CockpitPagesUsers/UserControls.razor ===
@* CockpitPages/CockpitReports.razor *@
@attribute [Authorize(Roles = "user, super-admin")]

<div class="card">
	<h2>Controls</h2>
	<p>Deine Controls.</p>
</div>
=== ./CockpitPagesUsers/Dashboard.razor ===
@attribute [Authorize]

<div class="card">
	<h2>Dashboard</h2>
	<p>Willkommen! Hier siehst du dein Nutzer-Dashboard.</p>
</div>
=== ./CockpitPagesUsers/UserTasks.razor ===
@* CockpitPages/CockpitReports.razor *@
@attribute [Authorize(Roles = "user, super-admin")]

<div class="card">
	<h2>Aufgaben</h2>
	<p>Deine Aufgaben.</p>
</div>
=== ./Shared/FormRenderer.razor ===
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using CMC.Web.Shared
@using CMC.Web.Pages.Shared
@using CMC.Web.Services
@using CMC.Contracts.Common

@inject IRelationshipManager Rels
@inject DialogService Dialogs

<div class="form-grid">
	@if (Model is not null)
	{
		@foreach (var prop in VisibleProps)
		{
			var pType = EffectiveType(prop.PropertyType);
			var label = GetDisplayName(prop) ?? prop.Name;
			var current = prop.GetValue(Model);

			<div class="form-row">
				<label class="form-label">@label</label>

				@if (TryGetSelectOptions(prop, out var selectOpts))
				{
					var value = current?.ToString() ?? string.Empty;
					<select class="form-control" @onchange="e => OnChanged(prop.Name, e.Value?.ToString())">
						<option value="">-- bitte wählen --</option>
						@foreach (var opt in selectOpts)
						{
							var selected = string.Equals(opt.Value, value, StringComparison.OrdinalIgnoreCase);
							<option value="@opt.Value" selected="@selected">@opt.Key</option>
						}
					</select>
				}
				else
				{
					var relAttr = prop.GetCustomAttribute<RelationFromAttribute>();
					if (relAttr is not null && Request.EfParentType is not null && Request.ContractsAssembly is not null)
					{
						var uiKey = $"prop::{prop.Name}";
						var relationName = string.IsNullOrWhiteSpace(relAttr.RelationName)
							? DeriveRelationName(prop.Name)
							: relAttr.RelationName;

						EnsureRelationLoaded(uiKey, relationName);

						if (_relLoading.Contains(uiKey))
						{
							<input class="form-control" type="text" value="Lade Optionen …" disabled />
						}
						else if (_relKind.TryGetValue(uiKey, out var kind) && _relOptions.TryGetValue(uiKey, out var opts))
						{
							if (!relAttr.IsMany && kind == RelationKind.Reference)
							{
								if (!_relSingle.ContainsKey(uiKey))
									_relSingle[uiKey] = current?.ToString();

								var cur = _relSingle[uiKey] ?? string.Empty;
								<select class="form-control" @onchange="e => SetRelationSingle(prop.Name, e.Value?.ToString())">
									<option value="">-- bitte wählen --</option>
									@foreach (var o in opts)
									{
										var sel = string.Equals(o.Value, cur, StringComparison.OrdinalIgnoreCase);
										<option value="@o.Value" selected="@sel">@o.Key</option>
									}
								</select>
							}
							else if (relAttr.IsMany && kind == RelationKind.ManyToMany)
							{
								var key = prop.Name;
								if (!_relMany.ContainsKey(key))
								{
									var lst = new List<string>();
									if (current is IEnumerable<string> es) lst = es.ToList();
									else if (current is string s && !string.IsNullOrWhiteSpace(s))
										lst = s.Split(',').Select(x => x.Trim()).Where(x => x.Length > 0).ToList();
									_relMany[key] = lst;
								}

								@RenderCheckboxList(key, opts)
							}
							else
							{
								<input class="form-control" type="text" value="(Relation nicht verfügbar)" disabled />
							}
						}
						else
						{
							<input class="form-control" type="text" value="(Relation nicht verfügbar)" disabled />
						}
					}
					else
					{
						@switch (TypeCodeOf(pType))
						{
							case TypeCode.Boolean:
							{
								var chk = current as bool? ?? false;
								<input type="checkbox" checked="@chk" @onchange="e => OnBooleanChanged(prop.Name, e)" />
								break;
							}
							case TypeCode.DateTime:
							{
								var dt = current as DateTime? ?? default;
								var val = dt == default ? "" : ToDateTimeLocalValue(dt);
								<input class="form-control" type="datetime-local" value="@val" @oninput="e => OnChanged(prop.Name, ParseDateTimeLocal(e.Value?.ToString()))" />
								break;
							}
							case TypeCode.Decimal:
							{
								var dec = current as decimal? ?? 0m;
								<input class="form-control" type="number" step="any" value="@dec" @oninput="e => OnChanged(prop.Name, ParseDecimal(e.Value?.ToString()))" />
								break;
							}
							case TypeCode.Double:
							case TypeCode.Single:
							{
								var dbl = current is double d ? d : current is float f ? (double)f : 0d;
								<input class="form-control" type="number" step="any" value="@dbl" @oninput="e => OnChanged(prop.Name, ParseDouble(e.Value?.ToString()))" />
								break;
							}
							case TypeCode.Int16:
							case TypeCode.Int32:
							case TypeCode.Int64:
							case TypeCode.UInt16:
							case TypeCode.UInt32:
							case TypeCode.UInt64:
							{
								var num = current?.ToString() ?? "0";
								<input class="form-control" type="number" step="1" value="@num" @oninput="e => OnChanged(prop.Name, ParseLongOrInt(pType, e.Value?.ToString()))" />
								break;
							}
							case TypeCode.String:
							{
								var txt = current?.ToString() ?? string.Empty;
								var isPw = prop.Name.Contains("Password", StringComparison.OrdinalIgnoreCase);
								<input class="form-control" type="@(isPw ? "password" : "text")" autocomplete="@(isPw ? "new-password" : null)" value="@txt" @oninput="e => OnChanged(prop.Name, e.Value?.ToString())" />
								break;
							}
							default:
							{
								if (pType == typeof(Guid))
								{
									var gtxt = current?.ToString() ?? string.Empty;
									<input class="form-control" type="text" value="@gtxt" disabled />
								}
								else
								{
									var raw = current?.ToString() ?? string.Empty;
									<input class="form-control" type="text" value="@raw" @oninput="e => OnChanged(prop.Name, e.Value?.ToString())" />
								}
								break;
							}
						}
					}
				}
			</div>
		}
	}

	@if (ExtraFields?.Count > 0)
	{
		@foreach (var ef in ExtraFields)
		{
			var label = string.IsNullOrWhiteSpace(ef.Label) ? ef.Name : ef.Label;
			var hint = ef.Hint;

			<div class="form-row">
				<label class="form-label">@label</label>

				@if (string.Equals(ef.DataType, "relation-auto", StringComparison.OrdinalIgnoreCase))
				{
					var relationName = DeriveRelationName(ef.Name);

					if (Request.EfParentType is null || Request.ContractsAssembly is null)
					{
						<input class="form-control" type="text" value="(Relation nicht konfiguriert)" disabled />
					}
					else
					{
						EnsureRelationLoaded(ef.Name, relationName);

						if (_relLoading.Contains(ef.Name))
						{
							<input class="form-control" type="text" value="Lade Optionen …" disabled />
						}
						else if (_relKind.TryGetValue(ef.Name, out var kind) && _relOptions.TryGetValue(ef.Name, out var opts))
						{
							if (kind == RelationKind.Reference)
							{
								if (!_relSingle.ContainsKey(ef.Name))
									_relSingle[ef.Name] = ef.Value?.ToString();

								var current = _relSingle[ef.Name] ?? string.Empty;
								<select class="form-control" @onchange="e => SetRelationSingle(ef.Name, e.Value?.ToString())">
									<option value="">-- bitte wählen --</option>
									@foreach (var o in opts)
									{
										var sel = string.Equals(o.Value, current, StringComparison.OrdinalIgnoreCase);
										<option value="@o.Value" selected="@sel">@o.Key</option>
									}
								</select>
							}
							else if (kind == RelationKind.ManyToMany)
							{
								if (!_relMany.ContainsKey(ef.Name))
								{
									var lst = new List<string>();
									if (ef.Value is IEnumerable<string> es) lst = es.ToList();
									else if (ef.Value is string s && !string.IsNullOrWhiteSpace(s))
										lst = s.Split(',').Select(x => x.Trim()).Where(x => x.Length > 0).ToList();
									_relMany[ef.Name] = lst;
								}

								@RenderCheckboxList(ef.Name, opts)
							}
							else
							{
								<input class="form-control" type="text" value="(Relationstyp nicht unterstützt)" disabled />
							}
						}
						else
						{
							<input class="form-control" type="text" value="(Keine Optionen gefunden)" disabled />
						}
					}
				}
				else if (string.Equals(ef.DataType, "password", StringComparison.OrdinalIgnoreCase))
				{
					var txt = ef.Value?.ToString() ?? string.Empty;
					<input class="form-control" type="password" autocomplete="new-password" value="@txt" @oninput="e => OnChanged(ef.Name, e.Value?.ToString())" />
				}
				else if (ef.Options != null && ef.Options.Any())
				{
					var current = ef.Value?.ToString() ?? string.Empty;
					var isDisabled = ef.ReadOnly;

					<select class="form-control" disabled="@isDisabled" @onchange="e => OnChanged(ef.Name, e.Value?.ToString())">
						<option value="">-- bitte wählen --</option>
						@foreach (var opt in ef.Options)
						{
							var selected = string.Equals(opt.Value, current, StringComparison.OrdinalIgnoreCase);
							<option value="@opt.Value" selected="@selected">@opt.Key</option>
						}
					</select>
				}
				else
				{
					var txt = ef.Value?.ToString() ?? string.Empty;
					if (ef.ReadOnly)
					{
						<input class="form-control" type="text" value="@txt" disabled />
					}
					else
					{
						<input class="form-control" type="text" value="@txt" @oninput="e => OnChanged(ef.Name, e.Value?.ToString())" />
					}
				}

				@if (!string.IsNullOrWhiteSpace(hint))
				{
					<div class="form-hint">@hint</div>
				}
			</div>
		}
	}
</div>

@code {

	[Parameter, EditorRequired] public object Model { get; set; } = default!;
	[Parameter] public List<ExtraField> ExtraFields { get; set; } = new();
	[Parameter] public EventCallback<(string Name, object? Value)> OnFieldChanged { get; set; }
	[Parameter] public EditDrawerRequest Request { get; set; } = default!;
	[Parameter] public EditContextAdapter Ctx { get; set; } = default!;

	// --- Relation-Cache/State ---
	private readonly Dictionary<string, RelationKind> _relKind = new(StringComparer.OrdinalIgnoreCase);
	private readonly Dictionary<string, List<KeyValuePair<string,string>>> _relOptions = new(StringComparer.OrdinalIgnoreCase);
	private readonly HashSet<string> _relLoading = new(StringComparer.OrdinalIgnoreCase);

	private readonly Dictionary<string, string?> _relSingle = new(StringComparer.OrdinalIgnoreCase);
	private readonly Dictionary<string, List<string>> _relMany = new(StringComparer.OrdinalIgnoreCase);

	private IEnumerable<PropertyInfo> VisibleProps => GetVisibleProps();

	private IEnumerable<PropertyInfo> GetVisibleProps()
	{
		if (Model is null) yield break;

		var type = Model.GetType();
		var allProps = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
						   .Where(p => p.CanRead)
						   .ToList();

		var propNames = new HashSet<string>(allProps.Select(p => p.Name), StringComparer.OrdinalIgnoreCase);
		var extraNames = new HashSet<string>((ExtraFields ?? new()).Select(ef => ef.Name), StringComparer.OrdinalIgnoreCase);

		foreach (var p in allProps)
		{
			var scaffold = p.GetCustomAttribute<ScaffoldColumnAttribute>();
			if (scaffold is { Scaffold: false }) continue;

			var disp = p.GetCustomAttribute<DisplayAttribute>();
			if (disp?.GetAutoGenerateField() == false) continue;

			if (p.GetCustomAttribute<EditorHiddenAttribute>() is not null)
				continue;

			var hideIfs = p.GetCustomAttributes<EditorHideIfExistsAttribute>()?.ToList();
			if (hideIfs is { Count: > 0 } &&
				hideIfs.Any(h => propNames.Contains(h.OtherProperty) || extraNames.Contains(h.OtherProperty)))
				continue;

			if ((hideIfs is null || hideIfs.Count == 0) &&
				p.PropertyType == typeof(string) &&
				p.Name.EndsWith("Name", StringComparison.OrdinalIgnoreCase))
			{
				var root = p.Name[..^"Name".Length];
				if (propNames.Contains(root + "Id") || extraNames.Contains(root + "Id"))
					continue;
			}

			yield return p;
		}
	}

	private bool TryGetSelectOptions(PropertyInfo p, out List<KeyValuePair<string,string>> options)
	{
		options = new();
		var attr = p.GetCustomAttribute<SelectFromAttribute>();
		if (attr is null) return false;

		try
		{
			var path = attr.SourcePath?.Trim() ?? string.Empty;
			var lastDot = path.LastIndexOf('.');
			if (lastDot <= 0 || lastDot >= path.Length - 1) return false;

			var typeName = path[..lastDot];
			var member = path[(lastDot + 1)..];

			// robuste Typauflösung (erst: Assembly der Property; dann: ContractsAssembly; dann: alle Assemblies)
			var sourceType = TryResolveType(typeName, p.DeclaringType?.Assembly);
			if (sourceType is null) return false;

			var flags = BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy;
			var field = sourceType.GetField(member, flags);
			var prop = sourceType.GetProperty(member, flags);

			object? raw = field?.GetValue(null) ?? prop?.GetValue(null);
			if (raw is null) return false;

			options = ToOptions(raw);
			return options.Count > 0;
		}
		catch
		{
			return false;
		}
	}

	private Type? TryResolveType(string typeName, Assembly? contextAsm)
	{
		Type? t = null;

		// 0) Zuerst die Assembly der Property selbst
		if (contextAsm != null)
		{
			try { t = contextAsm.GetType(typeName, throwOnError: false, ignoreCase: false); } catch { }
			if (t != null) return t;
		}

		// 1) Dann die mitgegebene Contracts-Assembly
		if (Request?.ContractsAssembly != null)
		{
			try { t = Request.ContractsAssembly.GetType(typeName, throwOnError: false, ignoreCase: false); } catch { }
			if (t != null) return t;
		}

		// 2) Alle geladenen Assemblies scannen
		foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())
		{
			try
			{
				t = asm.GetType(typeName, throwOnError: false, ignoreCase: false);
				if (t != null) return t;
			}
			catch { }
		}

		// 3) Fallback: assembly-qualified konstruieren (Contracts-Assemblyname)
		var asmName = Request?.ContractsAssembly?.GetName().Name ?? contextAsm?.GetName().Name;
		if (!string.IsNullOrWhiteSpace(asmName))
		{
			try { t = Type.GetType($"{typeName}, {asmName}", throwOnError: false); } catch { }
			if (t != null) return t;
		}

		return null;
	}

private static List<KeyValuePair<string,string>> ToOptions(object? raw)
{
	var result = new List<KeyValuePair<string,string>>();
	if (raw is not System.Collections.IEnumerable seq) return result;

	foreach (var item in seq)
	{
		if (item is KeyValuePair<string,string> kv)
		{
			result.Add(kv);
			continue;
		}

		// Spezielle Behandlung für (Label, value) Format
		var itemStr = item.ToString();
		if (!string.IsNullOrWhiteSpace(itemStr) &&
			itemStr.StartsWith("(") &&
			itemStr.EndsWith(")") &&
			itemStr.Contains(", "))
		{
			// Format: "(Super-Admin, super-admin)" -> Label: "Super-Admin", Value: "super-admin"
			var content = itemStr.Substring(1, itemStr.Length - 2); // Klammern entfernen
			var parts = content.Split(new[] { ", " }, 2, StringSplitOptions.None); // Nur beim ersten ", " teilen

			if (parts.Length == 2)
			{
				var itemLabel = parts[0].Trim();
				var itemValue = parts[1].Trim();
				result.Add(new KeyValuePair<string,string>(itemLabel, itemValue));
				continue;
			}
		}

		var t = item.GetType();

		var labelProp = t.GetProperty("Label") ?? t.GetProperty("Name") ?? t.GetProperty("Text") ?? t.GetProperty("Key");
		var valueProp = t.GetProperty("Tag")   ?? t.GetProperty("Value") ?? t.GetProperty("Id")  ?? t.GetProperty("Key");

		if (labelProp is null && valueProp is null)
		{
			labelProp = t.GetProperty("Item1");
			valueProp = t.GetProperty("Item2");
		}

		var label = labelProp?.GetValue(item)?.ToString();
		var value = valueProp?.GetValue(item)?.ToString();

		label ??= item.ToString() ?? "";
		value ??= label;

		if (!string.IsNullOrWhiteSpace(value))
			result.Add(new KeyValuePair<string,string>(label, value));
	}

	return result;
}

	private void EnsureRelationLoaded(string uiKey, string relationName)
	{
		if (_relOptions.ContainsKey(uiKey) || _relLoading.Contains(uiKey))
			return;

		if (Request.EfParentType is null)
		{
			_relOptions[uiKey] = new();
			return;
		}

		_relLoading.Add(uiKey);

		try
		{
			var desc = Rels.GetDescriptor(Request.EfParentType, relationName);
			_relKind[uiKey] = desc.Kind;

			_ = Task.Run(async () =>
			{
				try
				{
					var all = await desc.LoadOptions(); // (Label, Value)
					var opts = all.Select(o => new KeyValuePair<string,string>(o.Label, o.Value)).ToList();
					_relOptions[uiKey] = opts;
				}
				catch
				{
					_relOptions[uiKey] = new();
				}
				finally
				{
					_relLoading.Remove(uiKey);
					await InvokeAsync(StateHasChanged);
				}
			});
		}
		catch
		{
			_relOptions[uiKey] = new();
			_relLoading.Remove(uiKey);
		}
	}

	private RenderFragment RenderCheckboxList(string name, IEnumerable<KeyValuePair<string,string>> options) => builder =>
	{
		var seq = 0;
		var selected = _relMany.TryGetValue(name, out var lst) ? lst : new List<string>();

		foreach (var opt in options)
		{
			var isChecked = selected.Contains(opt.Value, StringComparer.OrdinalIgnoreCase);

			// Open label element
			builder.OpenElement(seq++, "label");
			builder.AddAttribute(seq++, "class", "chk-inline");

			// Open input element
			builder.OpenElement(seq++, "input");
			builder.AddAttribute(seq++, "type", "checkbox");
			builder.AddAttribute(seq++, "checked", isChecked);
			builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
			{
				var cur = _relMany.TryGetValue(name, out var existing) ? existing : new List<string>();
				var nowChecked = e.Value?.ToString() == "on" || (e.Value is bool b && b);

				if (nowChecked)
				{
					if (!cur.Contains(opt.Value)) cur.Add(opt.Value);
				}
				else
				{
					cur = cur.Where(v => !string.Equals(v, opt.Value, StringComparison.OrdinalIgnoreCase)).ToList();
				}
				_relMany[name] = cur;
				await OnChanged(name, cur);
			}));
			// Close input element
			builder.CloseElement();

			// Add label text content
			builder.AddContent(seq++, $" {opt.Key}");

			// Close label element
			builder.CloseElement();
		}
	};

	private async Task SetRelationSingle(string name, string? value)
	{
		_relSingle[name] = value;
		await OnChanged(name, value);
	}

	private static string? GetDisplayName(PropertyInfo p)
		=> p.GetCustomAttribute<DisplayAttribute>()?.GetName();

	private static Type EffectiveType(Type t) => Nullable.GetUnderlyingType(t) ?? t;

	private static TypeCode TypeCodeOf(Type t)
	{
		var et = EffectiveType(t);
		return Type.GetTypeCode(et);
	}

	private static string ToDateTimeLocalValue(DateTime dt)
	{
		var local = dt.Kind == DateTimeKind.Utc ? dt.ToLocalTime() : dt;
		return local.ToString("yyyy-MM-ddTHH:mm");
	}

	private static DateTime? ParseDateTimeLocal(string? s)
		=> DateTime.TryParse(s, out var dt) ? dt : null;

	private static decimal? ParseDecimal(string? s)
		=> decimal.TryParse(s, System.Globalization.NumberStyles.Any,
							System.Globalization.CultureInfo.InvariantCulture, out var v) ? v : null;

	private static double? ParseDouble(string? s)
		=> double.TryParse(s, System.Globalization.NumberStyles.Any,
						   System.Globalization.CultureInfo.InvariantCulture, out var v) ? v : null;

	private static object? ParseLongOrInt(Type numberType, string? s)
	{
		if (!long.TryParse(s, out var l)) return null;

		var et = EffectiveType(numberType);
		if (et == typeof(int)) return (int)l;
		if (et == typeof(long)) return l;
		if (et == typeof(short)) return (short)l;
		if (et == typeof(uint)) return (uint)Math.Max(0, l);
		if (et == typeof(ulong)) return (ulong)Math.Max(0, l);
		if (et == typeof(ushort)) return (ushort)Math.Max(0, l);

		return l;
	}

	private async Task OnChanged(string name, object? value)
	{
		if (OnFieldChanged.HasDelegate)
			await OnFieldChanged.InvokeAsync((name, value));
	}

	private async Task OnBooleanChanged(string name, ChangeEventArgs e)
	{
		bool? value = null;

		if (e.Value is bool boolValue) value = boolValue;
		else if (e.Value?.ToString() == "on") value = true;
		else if (bool.TryParse(e.Value?.ToString(), out var parsedBool)) value = parsedBool;

		await OnChanged(name, value);
	}

	private static string DeriveRelationName(string fieldName)
	{
		if (fieldName.EndsWith("Id", StringComparison.Ordinal))
			return fieldName.Substring(0, fieldName.Length - 2);

		if (fieldName.EndsWith("Ids", StringComparison.Ordinal))
			return fieldName.Substring(0, fieldName.Length - 3);

		return fieldName;
	}

	private void ShowConfigError(string msg)
		=> Dialogs.Open(new DialogRequest { Title = "Konfiguration", Message = msg, OnConfirm = () => Task.CompletedTask });
}
=== ./Shared/EditDrawer.razor ===
@using System.Reflection
@using Microsoft.AspNetCore.Components
@using CMC.Web.Services
@using CMC.Web.Shared
@implements IDisposable
@inject EditDrawerService EditDrawerService

@if (_isOpen && _request is not null)
{
	<!-- Backdrop -->
	<div class="ed-backdrop ed-backdrop--open" style="z-index:@ZIndex" aria-hidden="true"></div>

	<!-- Panel -->
	<aside class="ed-wrap ed-wrap--open" style="z-index:@(ZIndex+1)" role="dialog" aria-modal="true" aria-labelledby="ed-title" @onclick:stopPropagation>
		<header class="ed-header">
			<h3 id="ed-title">@_request.Title</h3>
			<button class="btn flat" @onclick="Cancel" aria-label="Schließen">×</button>
		</header>

		<section class="ed-body">
			<FormRenderer @ref="_form"
						  Model="_request.Model"
						  Request="_request"
						  Ctx="_adapter"
						  ExtraFields="_request.ExtraFields"
						  OnFieldChanged="OnFieldChanged" />
		</section>

<footer class="ed-body" style="border-top:1px solid #eee; padding-top:.5rem;">
  <div class="btn-group">
    <button type="button" class="btn primary" @onclick="SaveAsync">Speichern</button>
    @if (_request.OnDelete is not null && !_request.IsCreate)
    {
      <button type="button" class="btn danger" @onclick="DeleteAsync">Löschen</button>
    }
    <button type="button" class="btn flat" @onclick="Cancel">Abbrechen</button>
  </div>
</footer>

	</aside>
}

@code {
	[Parameter] public int ZIndex { get; set; } = 1000;

	// --- Parameter-Modus (Stacked) ---
	[Parameter] public EditDrawerRequest? Request { get; set; }
	private bool _openedByParameter;
	private bool _useServiceEvents;

	protected override void OnInitialized()
	{
	}

	protected override void OnParametersSet()
	{
		var wantServiceMode = Request is null;

		if (wantServiceMode && !_useServiceEvents)
		{
			EditDrawerService.OpenRequested += HandleOpen;
			EditDrawerService.CloseRequested += HandleClose;
			_useServiceEvents = true;
		}
		else if (!wantServiceMode && _useServiceEvents)
		{
			EditDrawerService.OpenRequested -= HandleOpen;
			EditDrawerService.CloseRequested -= HandleClose;
			_useServiceEvents = false;
		}

		if (Request is not null && !ReferenceEquals(Request, _request))
		{
			HandleOpen(Request);
			_openedByParameter = true;
		}
		else if (Request is null && _openedByParameter)
		{
			HandleClose();
			_openedByParameter = false;
		}
	}


	// --- State ---
	private bool _isOpen;
	private EditDrawerRequest? _request;
	private FormRenderer? _form;

	// Neues Build/Mapping-Objekt (ersetzt RequestBuildContext)
	private EditContextAdapter? _adapter;

	// Änderungen, die der FormRenderer via OnFieldChanged meldet (werden in Adapter gemappt)
	private readonly Dictionary<string, object?> _changes = new(StringComparer.OrdinalIgnoreCase);

	private void HandleOpen(EditDrawerRequest req)
	{
		Console.WriteLine($"EditDrawer: OPEN -> {req.Title}");
		_request = req;
		_changes.Clear();

		// Adapter inkl. Overrides (damit ExtraFields/OnFieldChanged in Build(...) landen)
		_adapter = new EditContextAdapter(req, req.Model, _changes);

		_isOpen = true;
		StateHasChanged();
	}

	private void HandleClose()
	{
		Console.WriteLine("EditDrawer: CLOSE");
		_isOpen = false;
		_request = null;
		_adapter = null;
		_changes.Clear();
		StateHasChanged();
	}

	private void OnFieldChanged((string Name, object? Value) change) => _changes[change.Name] = change.Value;

	private async Task SaveAsync()
	{
		if (_request is null) return;

		// Adapter frisch mit *aktuellen* Änderungen bauen
		_adapter = new EditContextAdapter(_request, _request.Model, _changes);

		if (_request.OnSave is not null)
			await _request.OnSave.Invoke(_adapter);
	}

	private async Task DeleteAsync()
	{
		_changes.Clear();
		if (_request?.OnDelete is not null && _adapter is not null)
			await _request.OnDelete.Invoke(_adapter);
		// OnDelete entscheidet i. d. R. selbst über Close (z. B. nach Confirm)
	}

	private void Cancel()
	{
		// Immer nur den obersten Drawer schließen
		EditDrawerService.Close();
	}

	public void Dispose()
	{
		if (_useServiceEvents)
		{
			EditDrawerService.OpenRequested -= HandleOpen;
			EditDrawerService.CloseRequested -= HandleClose;
		}
	}
}
=== ./Shared/ExtraField.cs ===
namespace CMC.Web.Shared;

/// <summary>
/// Beschreibt ein zusätzliches Formularfeld (z.B. Relation-Picker oder Passwort),
/// das nicht direkt aus dem DTO gerendert wird.
/// </summary>
public sealed record ExtraField(
	string Name,
	string Label,
	Type Type,
	bool ReadOnly = false,
	string? Hint = null,
	string DataType = "text",
	object? Value = null,
	List<KeyValuePair<string,string>>? Options = null,
	Func<Task<KeyValuePair<string,string>?>>? OnCreateNew = null,
	Func<string, Task<List<KeyValuePair<string,string>>>>? OnSearch = null,
	int DebounceMs = 0
);
=== ./Shared/MainLayout.razor ===
@inherits LayoutComponentBase

<NavMenu />
<main>
    @Body
<EditStackedHost />
    <DialogHost />
</main>
<MainFooter />
=== ./Shared/EditStackedHost.razor ===
@using CMC.Web.Services
@inject EditDrawerService Service
@implements IDisposable

@code {
	protected override void OnInitialized()
	{
		Service.StackChanged += StateHasChanged;
	}

	public void Dispose()
	{
		Service.StackChanged -= StateHasChanged;
	}
}

@for (var i = 0; i < Service.Stack.Count; i++)
{
	var req = Service.Stack[i];
	<EditDrawer Request="@req" ZIndex="@(1000 + i*2)" />
}
=== ./Shared/ProfileMenu.razor ===
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation

<AuthorizeView>
	<Authorized>
		<div class="relative inline-block text-left">
			<button class="profile-card flex items-center gap-2 px-3 py-2"
					@onclick="ToggleMenu"
					aria-haspopup="true"
					aria-expanded="@showMenu">
				@GetFullName(context)
				<span class="text-xs">▾</span>
			</button>

			@if (showMenu)
			{
				<div class="absolute right-0 mt-2 w-44 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black/5 z-50"
					 @onfocusout="HideMenu"
					 tabindex="-1">
					<ul class="py-1">
						<li>
							<NavLink href="profile" class="block px-4 py-2 text-sm hover:bg-gray-100">
								Profile
							</NavLink>
						</li>
						<li>
							<NavLink href="logout" class="block px-4 py-2 text-sm hover:bg-gray-100">
								Logout
							</NavLink>
						</li>
					</ul>
				</div>
			}
		</div>
	</Authorized>
	<NotAuthorized>
		<nav class="profile-nav">
			<ul>
				<NavLink href="login" Match="NavLinkMatch.All">
					<span aria-hidden="true"></span> Login
				</NavLink>
				<NavLink href="register">
					<span aria-hidden="true"></span> Register
				</NavLink>
			</ul>
		</nav>
	</NotAuthorized>
</AuthorizeView>

@code {
	private bool showMenu;

	private string GetFullName(AuthenticationState authState)
	{
		var firstName = GetClaim(authState, ClaimTypes.GivenName);
		var lastName = GetClaim(authState, ClaimTypes.Surname);
		return $"{firstName} {lastName}".Trim();
	}

	private string GetClaim(AuthenticationState authState, string claimType)
	{
		return authState.User.FindFirst(claimType)?.Value ?? "N/A";
	}

	private void ToggleMenu()
	{
		showMenu = !showMenu;
	}

	private void HideMenu(FocusEventArgs _)
	{
		showMenu = false;
	}
}
=== ./Shared/Dialog.razor ===
@* Reusable confirmation dialog for delete operations and other critical actions *@
@* src/CMC.Web/Pages/Shared/Dialog.razor *@
@if (IsOpen)
{
    <div class="confirm-backdrop" @onclick="HandleBackdropClick"></div>

    <div class="confirm-dialog confirm-dialog--open">
        <div class="card" @onclick:stopPropagation>
            <div class="confirm-header">
                <h3 id="confirm-title">@Title</h3>
            </div>

            <div class="confirm-body">
                <p>@Message</p>
                @if (!string.IsNullOrWhiteSpace(DetailMessage))
                {
                    <small class="text-muted">@DetailMessage</small>
                }
            </div>

            <div class="btn-group">
                <button class="btn danger" @onclick="Confirm" disabled="@_isProcessing">
                    @if (_isProcessing) { <span>Processing...</span> } else { @ConfirmText }
                </button>
                <button class="btn flat" @onclick="Cancel" disabled="@_isProcessing">
                    @CancelText
                </button>
            </div>
        </div>
    </div>
}


@code {
    /// <summary>
    /// Controls the visibility of the confirmation dialog.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }

    /// <summary>
    /// Title displayed in the dialog header.
    /// </summary>
    [Parameter] public string Title { get; set; } = "Confirm Action";

    /// <summary>
    /// Main confirmation message to display.
    /// </summary>
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";

    /// <summary>
    /// Optional detailed message for additional context.
    /// </summary>
    [Parameter] public string? DetailMessage { get; set; }

    /// <summary>
    /// Text for the confirmation button (default: "Confirm").
    /// </summary>
    [Parameter] public string ConfirmText { get; set; } = "Confirm";

    /// <summary>
    /// Text for the cancel button (default: "Cancel").
    /// </summary>
    [Parameter] public string CancelText { get; set; } = "Cancel";

    /// <summary>
    /// Callback invoked when user confirms the action.
    /// </summary>
    [Parameter] public EventCallback OnConfirm { get; set; }

    /// <summary>
    /// Callback invoked when user cancels the action.
    /// </summary>
    [Parameter] public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Controls whether clicking the backdrop should close the dialog.
    /// </summary>
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;

    private bool _isProcessing = false;

    /// <summary>
    /// Handles the confirmation action with async processing state.
    /// </summary>
    private async Task Confirm()
    {
        _isProcessing = true;
        StateHasChanged();

        try
        {
            await OnConfirm.InvokeAsync();
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles the cancel action.
    /// </summary>
    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    /// <summary>
    /// Handles backdrop clicks based on configuration.
    /// </summary>
    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdropClick && !_isProcessing)
        {
            await Cancel();
        }
    }
}
=== ./Shared/RedirectToCockpit.razor ===
@inject NavigationManager Navigation

@code {
	protected override void OnInitialized()
	{
		Navigation.NavigateTo("/cockpit", true);
	}
}
=== ./Shared/NavMenu.razor ===
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation

<header class="header-main">
    <AuthorizeView>
        <Authorized>
            <div>
            <a href="cockpit"><span class="audicius like-h1">CMC</span><span class="audicius">by Audicius</span></a></div>
        </Authorized>
        <NotAuthorized>
            <div>
            <a href=""><span class="audicius like-h1">CMC</span><span class="audicius">by Audicius</span></a></div>
        </NotAuthorized>
    </AuthorizeView>
    <ProfileMenu/>
</header>
=== ./Shared/ChoiceDialog.razor ===
@using CMC.Web.Services

@code {
	[Parameter] public bool IsOpen { get; set; }
	[Parameter] public string Title { get; set; } = "Auswahl";
	[Parameter] public string Message { get; set; } = "";
	[Parameter] public string ConfirmText { get; set; } = "Übernehmen";
	[Parameter] public string CancelText { get; set; } = "Abbrechen";
	[Parameter] public bool MultiSelect { get; set; } = false;
	[Parameter] public List<DialogOption> Options { get; set; } = new();
	[Parameter] public EventCallback<IReadOnlyList<string>> OnConfirmKeys { get; set; }
	[Parameter] public EventCallback OnCancel { get; set; }

	private HashSet<string> _sel = new();

	private Task Toggle(string key)
	{
		if (MultiSelect)
		{
			if (!_sel.Add(key)) _sel.Remove(key);
		}
		else
		{
			_sel.Clear();
			_sel.Add(key);
		}
		return Task.CompletedTask;
	}

	private Task Confirm() => OnConfirmKeys.InvokeAsync(_sel.ToList());
	private Task Cancel()  => OnCancel.InvokeAsync();
}

@if (!IsOpen) { <text></text>; }
else
{
	<div class="dialog-backdrop" @onclick="Cancel">
		<div class="dialog" @onclick:stopPropagation="true">
			<h3>@Title</h3>
			@if (!string.IsNullOrWhiteSpace(Message))
			{
				<p>@Message</p>
			}

			<ul class="option-list">
				@foreach (var o in Options)
				{
					var isSelected = _sel.Contains(o.Key) || o.Selected;
					<li>
						<button type="button"
								class="option-btn @(isSelected ? "selected" : null)"
								@onclick="() => Toggle(o.Key)">
							@o.Label
						</button>
					</li>
				}
			</ul>

			<div class="dialog-actions">
				<button type="button" class="btn" @onclick="Cancel">@CancelText</button>
				<button type="button" class="btn primary" @onclick="Confirm">@ConfirmText</button>
			</div>
		</div>
	</div>
}
=== ./Shared/EditHost.razor ===
@using CMC.Web.Services
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject EditDrawerService DrawerService
@implements IDisposable

<!-- Wir geben den Request als Parameter an EditDrawer weiter -->
<EditDrawer Request="@_currentRequest" />

@code {
    private EditDrawerRequest? _currentRequest;

    protected override void OnInitialized()
    {
        DrawerService.OpenRequested += OnOpenRequested;
        DrawerService.CloseRequested += OnCloseRequested;
    }

    private void OnOpenRequested(EditDrawerRequest req)
    {
        // direkte Parameterversorgung -> Drawer rendert sofort auf
        _currentRequest = req;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"EditHost: Open '{req.Title}'");
    }

    private void OnCloseRequested()
    {
        _currentRequest = null;
        InvokeAsync(StateHasChanged);
        Console.WriteLine("EditHost: Close");
    }

    public void Dispose()
    {
        DrawerService.OpenRequested -= OnOpenRequested;
        DrawerService.CloseRequested -= OnCloseRequested;
    }
}
=== ./Shared/AutoTable.razor ===
@typeparam TItem
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Linq
@attribute [Authorize]

<div class="relative">

  <div class="btn-group aud-table-interface">
    @if (AllowCreate)
    {
      <button type="button" class="btn xs flat" @onclick="RequestCreate">
        @CreateLabel
      </button>
    }
  </div>
  <table class="aud-table">
    <thead>
      <tr>
        @foreach (var col in _cols)
        {
          <th scope="col">@col.Header</th>
        }
        @if (AllowEdit)
        {
          <th scope="col" class="td-nowrap">Aktionen</th>
        }
      </tr>
    </thead>
    <tbody>
      @if (Items is not null)
      {
        @foreach (var item in Items)
        {
          <tr>
            @foreach (var col in _cols)
            {
              <td class="td-nowrap">@col.Render(item)</td>
            }
            @if (AllowEdit)
            {
              <td class="td-nowrap">
                @if (EditTemplate is not null)
                {
                  @EditTemplate(item)
                }
                else
                {
                  <button type="button" class="btn sm flat" @onclick="() => RequestEdit(item)">
                    Bearbeiten
                  </button>
                }
              </td>
            }
          </tr>
        }
      }
    </tbody>
  </table>
</div>

@code {
	[Parameter] public IEnumerable<TItem>? Items { get; set; }
	[Parameter] public bool AutoGenerate { get; set; } = true;

	// Edit
	[Parameter] public bool AllowEdit { get; set; } = false;
	[Parameter] public EventCallback<TItem> OnEdit { get; set; }
	[Parameter] public RenderFragment<TItem>? EditTemplate { get; set; }

	// Create (+)
	[Parameter] public bool AllowCreate { get; set; } = false;
	[Parameter] public EventCallback OnCreate { get; set; }
	[Parameter] public string CreateLabel { get; set; } = "+";

	private record Col(string Header, Func<TItem, object?> Getter, string? Format)
	{
		public RenderFragment Render(TItem item) => builder =>
		{
			var val = Getter(item);
			if (val is null) { builder.AddContent(0, string.Empty); return; }
			if (!string.IsNullOrWhiteSpace(Format) && val is IFormattable f)
				builder.AddContent(0, f.ToString(Format, null));
			else
				builder.AddContent(0, val.ToString());
		};
	}

	private List<Col> _cols = new();

	protected override void OnParametersSet()
	{
		if (!AutoGenerate || typeof(TItem).IsPrimitive) return;

		var props = typeof(TItem).GetProperties(BindingFlags.Public | BindingFlags.Instance)
			.Where(p => p.GetIndexParameters().Length == 0)
			.Where(p =>
			{
				var scaffoldAttr = p.GetCustomAttributes(true).OfType<ScaffoldColumnAttribute>().FirstOrDefault();
				if (scaffoldAttr is not null && scaffoldAttr.Scaffold == false) return false;
				var displayAttr = p.GetCustomAttributes(true).OfType<DisplayAttribute>().FirstOrDefault();
				if (displayAttr is not null && displayAttr.GetAutoGenerateField() == false) return false;
				return true;
			})
			.Select(p =>
			{
				var display = p.GetCustomAttributes(true).OfType<DisplayAttribute>().FirstOrDefault();
				var fmtAttr = p.GetCustomAttributes(true).OfType<DisplayFormatAttribute>().FirstOrDefault();

				var header = display?.GetName() ?? SplitPascal(p.Name);
				var order = display?.GetOrder() ?? int.MaxValue;

				string? cleanFmt = null;
				var fmt = fmtAttr?.DataFormatString;
				if (!string.IsNullOrWhiteSpace(fmt))
					cleanFmt = fmt.Contains(':') ? fmt[(fmt.IndexOf(':') + 1)..].TrimEnd('}') : fmt;

				Func<TItem, object?> getter = (TItem it) => p.GetValue(it);
				return (order, col: new Col(header, getter, cleanFmt));
			})
			.OrderBy(t => t.order)
			.Select(t => t.col)
			.ToList();

		_cols = props;
	}

	private static string SplitPascal(string s)
	{
		var sb = new System.Text.StringBuilder();
		for (int i = 0; i < s.Length; i++)
		{
			if (i > 0 && char.IsUpper(s[i]) && !char.IsUpper(s[i - 1])) sb.Append(' ');
			sb.Append(s[i]);
		}
		return sb.ToString();
	}

  private async Task RequestEdit(TItem item)
  {
    Console.WriteLine($"AutoTable: RequestEdit -> {typeof(TItem).Name}");
    if (OnEdit.HasDelegate)
      await OnEdit.InvokeAsync(item);
  }

  private async Task RequestCreate()
  {
    Console.WriteLine($"AutoTable: RequestCreate -> {typeof(TItem).Name}");
    if (OnCreate.HasDelegate)
      await OnCreate.InvokeAsync();
  }
}
=== ./Shared/MainFooter.razor ===
@using System.Security.Claims
@inject NavigationManager Navigation

<footer>
    <nav>
        <ul>
            <li class="subtle">
                <NavLink target="_blank" href="https://www.audicius.de/imprint">
                    <span aria-hidden="true"></span> Impressum
                </NavLink>
            </li>
            <li class="subtle">
                <NavLink target="_blank" href="https://www.audicius.de/privacy">
                    <span aria-hidden="true"></span> Datenschutz
                </NavLink>
            </li>
        </ul>
    </nav>
    <span class="subtle center"><span>© </span><span class="audicius">@DateTime.Now.Year Made by Audicius</span></span>
</footer>
=== ./Shared/RedirectToLogin.razor ===
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

@code {
    protected override void OnInitialized()
    {
        Navigation.NavigateTo("/login");
    }
}
=== ./Shared/EditContextAdapter.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using CMC.Web.Services;

namespace CMC.Web.Shared;

public sealed class EditContextAdapter
{
	public EditDrawerRequest Request { get; }
	public object Model { get; }
	private readonly Dictionary<string, object?> _overrides;

	public EditContextAdapter(EditDrawerRequest request, object model)
	{
		Request = request ?? throw new ArgumentNullException(nameof(request));
		Model = model ?? throw new ArgumentNullException(nameof(model));
		_overrides = new(StringComparer.OrdinalIgnoreCase);
	}

	public EditContextAdapter(EditDrawerRequest request, object model, IDictionary<string, object?>? overrides)
	{
		Request = request ?? throw new ArgumentNullException(nameof(request));
		Model = model ?? throw new ArgumentNullException(nameof(model));
		_overrides = overrides as Dictionary<string, object?>
			?? (overrides != null
				? new Dictionary<string, object?>(overrides, StringComparer.OrdinalIgnoreCase)
				: new Dictionary<string, object?>(StringComparer.OrdinalIgnoreCase));
	}

	/// <summary>Optional: einzelne Feldwerte setzen/überschreiben (falls dein FormRenderer das nutzt).</summary>
	public void Set(string name, object? value)
	{
		if (string.IsNullOrWhiteSpace(name)) return;
		_overrides[name] = value;
	}

	/// <summary>
	/// Baut per Konvention den Request-Typ:
	/// Kandidaten: {action}{ModelName}Request, {action}{ModelName}, {ModelName}{action}Request, {ModelName}{action}
	/// Beispiel: Model = UserDto, action="Register" -> RegisterUserRequest
	/// </summary>
	public object Build(string action)
	{
		if (Request.ContractsAssembly == null)
			throw new InvalidOperationException("ContractsAssembly ist nicht gesetzt.");

		var modelName = StripSuffix(Model.GetType().Name, "Dto");
		var candidates = new[]
		{
			$"{action}{modelName}Request",
			$"{action}{modelName}",
			$"{modelName}{action}Request",
			$"{modelName}{action}"
		};

		var targetType = Request.ContractsAssembly
			.GetTypes()
			.FirstOrDefault(t => candidates.Any(c => string.Equals(t.Name, c, StringComparison.OrdinalIgnoreCase)));

		if (targetType == null)
			throw new InvalidOperationException($"Kein Request-Typ für Aktion '{action}' und Model '{modelName}' gefunden (gesucht: {string.Join(", ", candidates)}).");

		// ---------------- Wert-Vorrat zusammenstellen (Model -> ExtraFields -> Overrides) ----------------
		var bag = new Dictionary<string, object?>(StringComparer.OrdinalIgnoreCase);

		foreach (var sp in Model.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance))
		{
			if (!sp.CanRead) continue;
			bag[sp.Name] = sp.GetValue(Model);
		}

		if (Request.ExtraFields is { Count: > 0 })
		{
			foreach (var ef in Request.ExtraFields)
				bag[ef.Name] = ef.Value;
		}

		if (_overrides.Count > 0)
		{
			foreach (var kv in _overrides)
				bag[kv.Key] = kv.Value;
		}

		// ---------------- Instanz anlegen ----------------
		object? instance = TryCreateWithParameterlessCtor(targetType)
						   ?? TryCreateWithBestMatchingCtor(targetType, bag)
						   ?? FormatterServices.GetUninitializedObject(targetType); // letzter Ausweg

		// ---------------- Properties nachziehen (nur schreibbar & nicht init-only) ----------------
		MapByName(bag, instance);

		return instance!;
	}

	// ========================= Erzeugungs-Strategien =========================

	private static object? TryCreateWithParameterlessCtor(Type targetType)
	{
		var hasDefault = targetType.GetConstructors(BindingFlags.Public | BindingFlags.Instance)
								   .Any(c => c.GetParameters().Length == 0);
		return hasDefault ? Activator.CreateInstance(targetType) : null;
	}

	private object? TryCreateWithBestMatchingCtor(Type targetType, IDictionary<string, object?> bag)
	{
		var ctors = targetType.GetConstructors(BindingFlags.Public | BindingFlags.Instance);
		if (ctors.Length == 0) return null;

		// Score: wie viele Parameter können wir befüllen (oder haben Default)?
		var best = ctors
			.Select(c =>
			{
				var ps = c.GetParameters();
				int matched = 0;
				bool allBindable = true;

				foreach (var p in ps)
				{
					if (bag.ContainsKey(p.Name!)) { matched++; continue; }
					if (p.HasDefaultValue) continue;

					// Werttypen ohne Default sind nicht bindbar
					if (Nullable.GetUnderlyingType(p.ParameterType) is null && p.ParameterType.IsValueType)
					{
						allBindable = false;
						break;
					}
				}

				return new { Ctor = c, Params = ps, Matched = matched, AllBindable = allBindable };
			})
			// nur die, die wir vollständig befüllen können (oder Defaults/Nulle zulassen)
			.Where(x => x.AllBindable)
			.OrderByDescending(x => x.Matched)
			.ThenBy(x => x.Params.Length)
			.FirstOrDefault();

		if (best is null) return null;

		var args = new object?[best.Params.Length];
		for (int i = 0; i < best.Params.Length; i++)
		{
			var p = best.Params[i];
			if (bag.TryGetValue(p.Name!, out var raw))
			{
				args[i] = ConvertToType(raw, p.ParameterType);
			}
			else if (p.HasDefaultValue)
			{
				args[i] = p.DefaultValue;
			}
			else
			{
				// null oder default(T) für nicht-bindbare optionale
				args[i] = GetNullDefault(p.ParameterType);
			}
		}

		return best.Ctor.Invoke(args);
	}

	// ========================= Mapping Helpers =========================

	/// <summary>
	/// Werte aus Bag per Name auf das Zielobjekt mappen (nur schreibbare & nicht init-only Properties).
	/// </summary>
	private static void MapByName(IDictionary<string, object?> sourceBag, object target)
	{
		var tgtProps = target.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance)
			.Where(p => p.CanWrite && !IsInitOnly(p))
			.ToDictionary(p => p.Name, p => p, StringComparer.OrdinalIgnoreCase);

		foreach (var (name, val) in sourceBag)
		{
			if (!tgtProps.TryGetValue(name, out var tp)) continue;
			var converted = ConvertToType(val, tp.PropertyType);
			tp.SetValue(target, converted);
		}
	}

	private static bool TrySet(object target, string propName, object? value)
	{
		var p = target.GetType().GetProperty(propName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
		if (p == null || !p.CanWrite || IsInitOnly(p)) return false;

		var converted = ConvertToType(value, p.PropertyType);
		p.SetValue(target, converted);
		return true;
	}

	private static bool IsInitOnly(PropertyInfo p)
	{
		var set = p.SetMethod;
		if (set is null) return true;
		// init-only: hat den Modifizierer IsExternalInit
		var mods = set.ReturnParameter?.GetRequiredCustomModifiers() ?? Type.EmptyTypes;
		return mods.Contains(typeof(IsExternalInit));
	}

	private static object? ConvertToType(object? value, Type targetType)
	{
		if (value == null) return GetNullDefault(targetType);

		var nonNullTarget = Nullable.GetUnderlyingType(targetType) ?? targetType;

		// Bereits passend?
		if (nonNullTarget.IsInstanceOfType(value)) return value;

		// String-Quelle?
		if (value is string s)
		{
			if (nonNullTarget == typeof(Guid))
				return Guid.TryParse(s, out var g) ? g : GetNullDefault(targetType);

			if (nonNullTarget == typeof(DateTime))
				return DateTime.TryParse(s, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out var dt) ? dt : GetNullDefault(targetType);

			if (nonNullTarget.IsEnum)
				return Enum.TryParse(nonNullTarget, s, true, out var ev) ? ev : GetNullDefault(targetType);

			// Zahlen / bool
			try
			{
				return System.Convert.ChangeType(s, nonNullTarget, CultureInfo.InvariantCulture);
			}
			catch { /* fallthrough */ }
		}

		// IEnumerable<string> -> List<Guid> / List<int> / ...
		if (IsGenericList(nonNullTarget, out var itemType))
		{
			if (value is IEnumerable enumerable)
			{
				var list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(itemType))!;
				foreach (var obj in enumerable)
				{
					var elem = obj;
					if (obj is string es)
					{
						elem = ConvertStringTo(es, itemType);
					}
					else if (obj != null && !itemType.IsInstanceOfType(obj))
					{
						elem = System.Convert.ChangeType(obj, itemType, CultureInfo.InvariantCulture);
					}
					list.Add(elem!);
				}
				return list;
			}
		}

		// Alles andere: ChangeType versuchen
		try
		{
			return System.Convert.ChangeType(value, nonNullTarget, CultureInfo.InvariantCulture);
		}
		catch
		{
			return GetNullDefault(targetType);
		}
	}

	private static object? ConvertStringTo(string s, Type itemType)
	{
		var nn = Nullable.GetUnderlyingType(itemType) ?? itemType;

		if (nn == typeof(Guid))
			return Guid.TryParse(s, out var g) ? g : GetNullDefault(itemType);

		if (nn == typeof(DateTime))
			return DateTime.TryParse(s, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out var dt) ? dt : GetNullDefault(itemType);

		if (nn.IsEnum)
			return Enum.TryParse(nn, s, true, out var ev) ? ev : GetNullDefault(itemType);

		try
		{
			return System.Convert.ChangeType(s, nn, CultureInfo.InvariantCulture);
		}
		catch
		{
			return GetNullDefault(itemType);
		}
	}

	private static bool IsGenericList(Type t, out Type itemType)
	{
		itemType = typeof(object);
		if (!t.IsGenericType) return false;
		if (t.GetGenericTypeDefinition() != typeof(List<>)) return false;
		itemType = t.GetGenericArguments()[0];
		return true;
	}

	private static object? GetNullDefault(Type t)
	{
		var nn = Nullable.GetUnderlyingType(t) ?? t;
		if (nn.IsValueType && Nullable.GetUnderlyingType(t) == null)
		{
			// non-nullable value type -> default(T)
			return Activator.CreateInstance(nn);
		}
		return null;
	}

	private static string StripSuffix(string name, string suffix)
	{
		return name.EndsWith(suffix, StringComparison.OrdinalIgnoreCase)
			? name[..^suffix.Length]
			: name;
	}
}
=== ./Shared/DialogHost.razor ===
@inject CMC.Web.Services.DialogService Dialogs
@implements IDisposable

<Dialog IsOpen="@_dlgOpen"
        Title="@(_dlgReq?.Title ?? "")"
        Message="@(_dlgReq?.Message ?? "")"
        ConfirmText="@(_dlgReq?.ConfirmText ?? "OK")"
        CancelText="@_dlgReq?.CancelText"
        OnConfirm="HandleDlgConfirm"
        OnCancel="HandleDlgCancel" />

<ChoiceDialog
    IsOpen="@_choiceOpen"
    Title="@(_choiceReq?.Title ?? string.Empty)"
    Message="@(_choiceReq?.Message ?? string.Empty)"
    ConfirmText="@(_choiceReq?.ConfirmText ?? "Übernehmen")"
    CancelText="@(_choiceReq?.CancelText ?? "Abbrechen")"
    Options="@_choiceOptions"
    MultiSelect="@(_choiceReq?.MultiSelect ?? false)"
    OnConfirmKeys="HandleChoiceConfirm"
    OnCancel="HandleChoiceCancel" />

@code {
    // --- Confirm/Info Dialog ---
    private bool _dlgOpen;
    private DialogRequest? _dlgReq;

    // --- Choice Dialog (dein bestehendes) ---
    private bool _choiceOpen;
    private ChoiceRequest? _choiceReq;
    private List<DialogOption> _choiceOptions = new();

    protected override void OnInitialized()
    {
        Dialogs.OnOpen += OpenDialog;
        Dialogs.OnOpenChoice += OpenChoice;
    }

    private void OpenDialog(DialogRequest req)
    {
        _dlgReq = req;
        _dlgOpen = true;
        StateHasChanged();
    }

    private async Task HandleDlgConfirm()
    {
        var cb = _dlgReq?.OnConfirm;
        _dlgOpen = false; StateHasChanged();
        if (cb is not null) await cb();
    }

    private async Task HandleDlgCancel()
    {
        var cb = _dlgReq?.OnCancel;
        _dlgOpen = false; StateHasChanged();
        if (cb is not null) await cb();
    }

    private void OpenChoice(ChoiceRequest req)
    {
        _choiceReq = req;
        _choiceOptions = req.Options?.ToList() ?? new();
        _choiceOpen = true;
        StateHasChanged();
    }

    private async Task HandleChoiceConfirm(IReadOnlyList<string> keys)
    {
        var cb = _choiceReq?.OnConfirm;
        _choiceOpen = false; StateHasChanged();
        if (cb is not null) await cb(keys);
    }

    private async Task HandleChoiceCancel()
    {
        var cb = _choiceReq?.OnCancel;
        _choiceOpen = false; StateHasChanged();
        if (cb is not null) await cb();
    }

    public void Dispose()
    {
        Dialogs.OnOpen -= OpenDialog;
        Dialogs.OnOpenChoice -= OpenChoice;
    }
}
=== ./CockpitPagesSuperAdmins/Exceptions.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Ausnahmen</h2>
</div>
=== ./CockpitPagesSuperAdmins/LibraryFrameworks.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Vorlagen: Framework</h2>
</div>
=== ./CockpitPagesSuperAdmins/Overview.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Übersicht</h2>
	<p>Willkommen! Hier siehst du dein SuperAdmin-Dashboard.</p>
</div>
=== ./CockpitPagesSuperAdmins/LibraryScenarios.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Vorlagen: Szenarien</h2>
</div>
=== ./CockpitPagesSuperAdmins/ReportDefinitions.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Vorlagen: Berichte</h2>
</div>
=== ./CockpitPagesSuperAdmins/Tasks.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Aufgaben</h2>
</div>
=== ./CockpitPagesSuperAdmins/Reports.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Berichte</h2>
</div>
=== ./CockpitPagesSuperAdmins/Evidences.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Nachweise</h2>
</div>
=== ./CockpitPagesSuperAdmins/Controls.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Controls</h2>
</div>
=== ./CockpitPagesSuperAdmins/Customers.razor ===
@attribute [Authorize(Roles = "super-admin")]
@using System.Linq
@using CMC.Contracts.Customers
@using CMC.Web.Services
@inject CMC.Application.Services.CustomerService CustomerService
@inject EditDrawerService DrawerService
@inject DialogService ConfirmService

<div class="card">
    <AutoTable TItem="CustomerDto"
               Items="_customers"
               AllowEdit="true"
               OnEdit="StartEdit"
               AllowCreate="true"
               OnCreate="StartCreate" />
</div>

@code {
    private List<CustomerDto> _customers = new();

    protected override async Task OnInitializedAsync()
        => _customers = await CustomerService.GetAllAsync();

    private async Task Reload()
    {
        _customers = await CustomerService.GetAllAsync();
        StateHasChanged();
    }

    private void StartEdit(CustomerDto c)
    {
        var req = new EditDrawerRequest
        {
            Title = "Kunde bearbeiten",
            Model = c,
            ContractsAssembly = typeof(CustomerDto).Assembly, // <-- WICHTIG
            IsCreate = false,
            OnSave = async ctx =>
            {
                try
                {
                    var up = (UpdateCustomerRequest)ctx.Build("Update");
                    _ = await CustomerService.UpdateAsync(up);
                    await Reload();
                    DrawerService.Close();
                }
                catch (Exception ex)
                {
                    ConfirmService.Open(new DialogRequest
                    {
                        Title = "Fehler beim Speichern",
                        Message = ex.Message,
                        ConfirmText = "Okay",
                        OnConfirm = () => Task.CompletedTask
                    });
                }
            },
            OnDelete = async ctx =>
            {
                var model = (CustomerDto)ctx.Model;

                ConfirmService.Open(new DialogRequest
                {
                    Title = "Löschen bestätigen",
                    Message = $"Firma „{model.Name}“ wirklich löschen?",
                    ConfirmText = "Löschen",
                    OnConfirm = async () =>
                    {
                        try
                        {
                            await CustomerService.DeleteAsync(new DeleteCustomerRequest(model.Id));
                            await Reload();
                            DrawerService.Close();
                        }
                        catch (Exception ex)
                        {
                            ConfirmService.Open(new DialogRequest
                            {
                                Title = "Löschen fehlgeschlagen",
                                Message = ex.Message,
                                ConfirmText = "Okay",
                                OnConfirm = () => Task.CompletedTask
                            });
                        }
                    }
                });
            }
        };

        DrawerService.Open(req);
    }

    private void StartCreate()
    {
        var empty = new CustomerDto(
            Id: Guid.Empty,
            Name: "",
            Industry: "",
            EmployeeCount: 0,
            RevenuePerYear: 0m,
            IsActive: true,
            CreatedAt: DateTime.UtcNow,
            UpdatedAt: DateTime.UtcNow,
            UserCount: 0
        );

        DrawerService.Open(new EditDrawerRequest
        {
            Title = "Firma anlegen",
            Model = empty,
            ContractsAssembly = typeof(CustomerDto).Assembly, // <-- WICHTIG
            IsCreate = true,
            OnSave = async ctx =>
            {
                try
                {
                    var req = (CreateCustomerRequest)ctx.Build("Create");
                    _ = await CustomerService.CreateAsync(req);
                    await Reload();
                    DrawerService.Close();
                }
                catch (Exception ex)
                {
                    ConfirmService.Open(new DialogRequest
                    {
                        Title = "Fehler beim Anlegen",
                        Message = ex.Message,
                        ConfirmText = "Okay",
                        OnConfirm = () => Task.CompletedTask
                    });
                }
            }
        });
    }
}
=== ./CockpitPagesSuperAdmins/LibraryControls.razor ===
@attribute [Authorize(Roles = "super-admin")]
@* CockpitPages/CockpitOverview.razor *@
<div class="card">
    <h2>Vorlagen: Controls</h2>
</div>
=== ./CockpitPagesSuperAdmins/Users.razor ===
@attribute [Authorize(Roles = "super-admin")]
@using System.Linq
@using CMC.Contracts.Users
@using CMC.Web.Shared
@using CMC.Web.Services
@using CMC.Domain.Entities

@inject CMC.Application.Services.UserService UserService
@inject EditDrawerService DrawerService
@inject DialogService ConfirmService

<div class="card">
	<AutoTable TItem="UserDto"
			   Items="_users"
			   AllowEdit="true"
			   OnEdit="StartEdit"
			   AllowCreate="true"
			   OnCreate="StartCreate" />
</div>

@code {
	private List<UserDto> _users = new();

	protected override async Task OnInitializedAsync()
	{
		_users = await UserService.GetAllAsync();
	}

	private async Task ReloadAsync()
	{
		_users = await UserService.GetAllAsync();
		StateHasChanged();
	}

	private async Task<EditDrawerRequest> BuildUserDrawer(UserDto model, bool isCreate)
	{
		var req = new EditDrawerRequest
		{
			Title = isCreate ? "Benutzer anlegen" : "Benutzer bearbeiten",
			Model = model,
			ContractsAssembly = typeof(UserDto).Assembly,
			IsCreate = isCreate,

			// Für relation-auto (FormRenderer lädt Optionen via Rels + EfParentType)
			EfParentType = typeof(User),
			GetParentKey = m => ((UserDto)m).Id,

			OnSave = async ctx =>
			{
				try
				{
					if (isCreate)
					{
						var reg = (RegisterUserRequest)ctx.Build("Register");
						_ = await UserService.RegisterAsync(reg);
					}
					else
					{
						var up = (UpdateUserRequest)ctx.Build("Update");
						await UserService.UpdateAsync(up);
					}

					await ReloadAsync();
					DrawerService.Close();
				}
				catch (Exception ex)
				{
					ConfirmService.Open(new DialogRequest
					{
						Title = "Fehler",
						Message = ex.Message,
						ConfirmText = "Okay",
						OnConfirm = () => Task.CompletedTask
					});
				}
			},

			OnDelete = async ctx =>
			{
				var m = (UserDto)ctx.Model;

				ConfirmService.Open(new DialogRequest
				{
					Title = "Löschen bestätigen",
					Message = $"Benutzer „{m.FirstName} {m.LastName}“ wirklich löschen?",
					ConfirmText = "Löschen",
					OnConfirm = async () =>
					{
						try
						{
							await UserService.DeleteAsync(new DeleteUserRequest(m.Id));
							await ReloadAsync();
							DrawerService.Close();
						}
						catch (Exception ex)
						{
							ConfirmService.Open(new DialogRequest
							{
								Title = "Löschen fehlgeschlagen",
								Message = ex.Message,
								ConfirmText = "Okay",
								OnConfirm = () => Task.CompletedTask
							});
						}
					}
				});
			}
		};

		// Passwort nur bei Create
		if (isCreate)
		{
			req.ExtraFields.Add(new ExtraField(
				Name: "Password",
				Label: "Passwort",
				Type: typeof(string),
				ReadOnly: false,
				Hint: "Mindestens 8 Zeichen",
				DataType: "password"
			));
		}

		// Firma als relation-auto -> FormRenderer rendert <select> aus Rels.LoadOptions()
		req.ExtraFields.Add(new ExtraField(
			Name: "CustomerId",
			Label: "Firma",
			Type: typeof(Guid?),
			ReadOnly: false,
			Hint: "Aus Liste wählen.",
			DataType: "relation-auto",
	        Value: model.CustomerId
		));

		return req;
	}

	private async Task StartEdit(UserDto u)
		=> DrawerService.Open(await BuildUserDrawer(u, isCreate: false));

	private async Task StartCreate()
	{
		var empty = new UserDto(
			Id: Guid.Empty,
			Email: "",
			FirstName: "",
			LastName: "",
			Role: "",
			Department: "",
			IsEmailConfirmed: false,
			CreatedAt: DateTime.UtcNow,
			LastLoginAt: null,
			CustomerId: null,
			CustomerName: null
		);

		DrawerService.Open(await BuildUserDrawer(empty, isCreate: true));
	}
}
=== ./Index.razor ===
@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IJSRuntime JS

<PageTitle>CMC - Home</PageTitle>

<section class="slim">
    <div class="card">
        <h1>
            Welcome to Cybersecurity Management Cockpit
        </h1>
    </div>
</section>
<section class="slim">
	<div class="card">
		<h2>Button Variants (ungrouped)</h2>

		<!-- primary -->
		<p><strong>primary</strong></p>
		<a class="btn primary" href="#">Link </a>
		<NavLink class="btn primary" href="#">NavLink</NavLink>
		<button class="btn primary" @onclick='() => Alert("Primary clicked!")'>Button</button>

		<!-- secondary -->
		<p><strong>secondary</strong></p>
		<a class="btn secondary" href="#">Link </a>
		<NavLink class="btn secondary" href="#">NavLink</NavLink>
		<button class="btn secondary" @onclick='() => Alert("Sekundär clicked!")'>Button</button>

		<!-- flat -->
		<p><strong>flat</strong></p>
		<a class="btn flat" href="#">Link </a>
		<NavLink class="btn flat" href="#">NavLink</NavLink>
		<button class="btn flat" @onclick='() => Alert("Flat clicked!")'>Button</button>

		<!-- danger -->
		<p><strong>danger</strong></p>
		<a class="btn danger" href="#">Link </a>
		<NavLink class="btn danger" href="#">NavLink</NavLink>
		<button class="btn danger" @onclick='() => Alert("Danger clicked!")'>Button</button>

		<!-- primary -->
		<p><strong>primary</strong></p>
		<a class="btn sm primary" href="#">Link </a>
		<NavLink class="btn sm primary" href="#">NavLink</NavLink>
		<button class="btn sm primary" @onclick='() => Alert("Primary clicked!")'>Button</button>

		<!-- secondary -->
		<p><strong>secondary</strong></p>
		<a class="btn sm secondary" href="#">Link </a>
		<NavLink class="btn sm secondary" href="#">NavLink</NavLink>
		<button class="btn sm secondary" @onclick='() => Alert("Sekundär clicked!")'>Button</button>

		<!-- flat -->
		<p><strong>flat</strong></p>
		<a class="btn sm flat" href="#">Link </a>
		<NavLink class="btn sm flat" href="#">NavLink</NavLink>
		<button class="btn sm flat" @onclick='() => Alert("Flat clicked!")'>Button</button>

		<!-- danger -->
		<p><strong>danger</strong></p>
		<a class="btn sm danger" href="#">Link </a>
		<NavLink class="btn sm danger" href="#">NavLink</NavLink>
		<button class="btn sm danger" @onclick='() => Alert("Danger clicked!")'>Button</button>
	</div>

	<div class="card">
		<h2>Button Variants (grouped)</h2>

		<p><strong>primary</strong></p>
		<div class="btn-group">
			<a class="btn primary" href="#">Link </a>
			<NavLink class="btn primary" href="#">NavLink</NavLink>
			<button class="btn primary" @onclick='() => Alert("Primary in group!")'>Button</button>
		</div>

		<p><strong>secondary</strong></p>
		<div class="btn-group">
			<a class="btn secondary" href="#">Link </a>
			<NavLink class="btn secondary" href="#">NavLink</NavLink>
			<button class="btn secondary" @onclick='() => Alert("Secondary in group!")'>Button</button>
		</div>

		<p><strong>flat</strong></p>
		<div class="btn-group">
			<a class="btn flat" href="#">Link </a>
			<NavLink class="btn flat" href="#">NavLink</NavLink>
			<button class="btn flat" @onclick='() => Alert("Flat in group!")'>Button</button>
		</div>

		<p><strong>danger</strong></p>
		<div class="btn-group">
			<a class="btn danger" href="#">Link </a>
			<NavLink class="btn danger" href="#">NavLink</NavLink>
			<button class="btn danger" @onclick='() => Alert("Danger in group!")'>Button</button>
		</div>

		<p><strong>primary</strong></p>
		<div class="btn-group">
			<a class="btn sm primary" href="#">Link </a>
			<NavLink class="btn sm primary" href="#">NavLink</NavLink>
			<button class="btn sm primary" @onclick='() => Alert("Primary in group!")'>Button</button>
		</div>

		<p><strong>secondary</strong></p>
		<div class="btn-group">
			<a class="btn sm secondary" href="#">Link </a>
			<NavLink class="btn sm secondary" href="#">NavLink</NavLink>
			<button class="btn sm secondary" @onclick='() => Alert("Secondary in group!")'>Button</button>
		</div>

		<p><strong>flat</strong></p>
		<div class="btn-group">
			<a class="btn sm flat" href="#">Link </a>
			<NavLink class="btn sm flat" href="#">NavLink</NavLink>
			<button class="btn sm flat" @onclick='() => Alert("Flat in group!")'>Button</button>
		</div>

		<p><strong>danger</strong></p>
		<div class="btn-group">
			<a class="btn sm danger" href="#">Link </a>
			<NavLink class="btn sm danger" href="#">NavLink</NavLink>
			<button class="btn sm danger" @onclick='() => Alert("Danger in group!")'>Button</button>
		</div>
	</div>
</section>
<section class="slim">
    <div class="card">
        <h1>
            Form
        </h1>

		<form action="#" method="post" autocomplete="on">

			<fieldset>
				<legend>Profil</legend>

				<div class="form-group">
					<label for="name">Vollständiger Name</label>
					<input id="name" name="name" type="text" class="form-control"
						autocomplete="name" required />
				</div>

				<div class="form-group">
					<label for="email">E-Mail</label>
					<input id="email" name="email" type="email" class="form-control"
						autocomplete="email" inputmode="email" required />
					<small id="email-help">Wir teilen deine E-Mail nicht.</small>
				</div>

				<div class="form-group">
					<label for="password">Passwort</label>
					<input id="password" name="password" type="password" class="form-control"
						autocomplete="new-password" minlength="8" required aria-describedby="pw-help" />
					<small id="pw-help">Mind. 8 Zeichen.</small>
				</div>

				<div class="form-group">
					<label for="tel">Telefon</label>
					<input id="tel" name="tel" type="tel" class="form-control"
						autocomplete="tel" inputmode="tel" placeholder="+49 123 456789" />
				</div>
			</fieldset>

			<fieldset>
				<legend>Eingaben</legend>

				<div class="form-group">
					<label for="username">Username (mit Vorschlägen)</label>
					<input id="username" name="username" type="text" class="form-control" list="user-suggestions" />
					<datalist id="user-suggestions">
						<option value="jonathan42"></option>
						<option value="jkjeberle"></option>
						<option value="dev-jon"></option>
					</datalist>
				</div>

				<div class="form-group">
					<label for="search">Suche</label>
					<input id="search" name="search" type="search" class="form-control" inputmode="search" />
				</div>

				<div class="form-group">
					<label for="url">Website</label>
					<input id="url" name="url" type="url" class="form-control" placeholder="https://example.com" />
				</div>

				<div class="form-group">
					<label for="number">Zahl (0–100)</label>
					<input id="number" name="number" type="number" class="form-control" min="0" max="100" step="1" />
				</div>

				<div class="form-group">
					<label for="range">Range (Live-Ausgabe)</label>
					<input id="range" name="range" type="range" min="0" max="10" value="5"
						oninput="range_out.value=this.value" />
					<output id="range_out" for="range">5</output>
				</div>

				<div class="form-group">
					<label for="color">Farbe</label>
					<input id="color" name="color" type="color" value="#4f46e5" />
				</div>

				<div class="form-group">
					<label for="file">Datei(en)</label>
					<input id="file" name="file" type="file" multiple accept=".png,.jpg,.jpeg,.pdf" />
				</div>

				<div class="form-group">
					<label for="bio">Kurzbio</label>
					<textarea id="bio" name="bio" class="form-control" rows="4" maxlength="500" spellcheck="true"></textarea>
				</div>

				<div class="form-group">
					<label for="select">Auswahl</label>
					<select id="select" name="select" class="form-control" required>
						<option value="" disabled selected>Bitte wählen…</option>
						<optgroup label="Gruppe A">
							<option value="a1">A1</option>
							<option value="a2">A2</option>
						</optgroup>
						<optgroup label="Gruppe B">
							<option value="b1">B1</option>
							<option value="b2">B2</option>
						</optgroup>
					</select>
				</div>
			</fieldset>

			<!-- Zeit & Datum -->
			<fieldset>
				<legend>Zeit & Datum</legend>

				<div class="form-group">
					<label for="date">Datum</label>
					<input id="date" name="date" type="date" />
				</div>

				<div class="form-group">
					<label for="time">Uhrzeit</label>
					<input id="time" name="time" type="time" />
				</div>

				<div class="form-group">
					<label for="datetime">Lokal (Datum & Zeit)</label>
					<input id="datetime" name="datetime" type="datetime-local" />
				</div>

				<div class="form-group">
					<label for="month">Monat</label>
					<input id="month" name="month" type="month" />
				</div>

				<div class="form-group">
					<label for="week">Kalenderwoche</label>
					<input id="week" name="week" type="week" />
				</div>
			</fieldset>

			<fieldset>
				<legend>Optionen</legend>

				<div class="form-group">
					<span id="rad-legend">Radio</span><br />
					<input id="r1" name="radio" type="radio" value="1" aria-labelledby="rad-legend" />
					<label for="r1">Option 1</label>
					<input id="r2" name="radio" type="radio" value="2" />
					<label for="r2">Option 2</label>
				</div>

				<div class="form-group">
					<span id="chk-legend">Checkboxen</span><br />
					<input id="c1" name="features" type="checkbox" value="f1" aria-labelledby="chk-legend" />
					<label for="c1">Feature 1</label>
					<input id="c2" name="features" type="checkbox" value="f2" />
					<label for="c2">Feature 2</label>
				</div>
			</fieldset>

			<fieldset>
				<legend>Extras</legend>

				<div class="form-group">
					<label for="meter">Fortschritt (Meter)</label>
					<meter id="meter" min="0" max="100" low="30" high="70" optimum="85" value="60">60</meter>
				</div>

				<div class="form-group">
					<label for="progress">Upload (Progress)</label>
					<progress id="progress" value="0" max="100">0%</progress>
				</div>

				<input type="hidden" name="hidden_token" value="abc123" />
			</fieldset>

			<div class="form-group">
				<button type="submit" class="btn primary">Absenden</button>
				<button type="reset" class="btn flat">Zurücksetzen</button>
			</div>
		</form>
    </div>
</section>
<section class="slim">
    <div class="card">
        <h1>
            Test
        </h1><div class="table-wrap table-sm" style="--col-1-w: 22ch; --col-2-w: 16ch; --col-3-w: 34ch; --col-4-w: 12ch; --col-5-w: 12ch;">
    <table class="aud-table">
        <colgroup>
            <col />
            <col />
            <col />
            <col />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th scope="col">Order #</th>
                <th scope="col">Date</th>
                <th scope="col">Customer</th>
                <th scope="col">Total</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td data-label="Order #" class="td-nowrap">ORD-2025-0001</td>
                <td data-label="Date" class="td-nowrap">2025-08-01</td>
                <td data-label="Customer" class="td-truncate">Acme Industries GmbH, Procurement Team South-West</td>
                <td data-label="Total" class="td-num">1 249,00 €</td>
                <td data-label="Status"><span class="td-badge success">Paid</span></td>
            </tr>
            <tr>
                <td data-label="Order #" class="td-nowrap">ORD-2025-0002</td>
                <td data-label="Date" class="td-nowrap">2025-08-03</td>
                <td data-label="Customer" class="td-truncate">Müller & Söhne KG</td>
                <td data-label="Total" class="td-num">219,90 €</td>
                <td data-label="Status"><span class="td-badge warn">Pending</span></td>
            </tr>
            <tr>
                <td data-label="Order #" class="td-nowrap">ORD-2025-0003</td>
                <td data-label="Date" class="td-nowrap">2025-08-05</td>
                <td data-label="Customer" class="td-truncate">Globex Europe AG</td>
                <td data-label="Total" class="td-num">9 870,00 €</td>
                <td data-label="Status"><span class="td-badge danger">Overdue</span></td>
            </tr>
        </tbody>
    </table>
</div>
    </div>
</section>

<AuthorizeView>
    <Authorized>
        <RedirectToCockpit />
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {
	private async Task Alert(string message)
	{
		await JS.InvokeVoidAsync("alert", message);
	}
}
=== ./Logout.razor ===
@page "/logout"
@inject NavigationManager Navigation

@code {
    protected override void OnInitialized()
    {
        // Einfache Weiterleitung zu AuthController
        Navigation.NavigateTo("/api/auth/logout", true);
    }
}
=== ./Login.razor ===
@page "/login"
@using CMC.Contracts.Users
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<section class="slim">
    <div class="card">
        <h2>Login</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <button type="submit" class="btn primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        <p>
            Don't have an account? <a href="/register">Register here</a>
        </p>
        <p>
            <a href="/forgot-password">Forgot Password?</a>
        </p>

    </div>
</section>
@code {
    private LoginRequest loginRequest = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            Logger.LogInformation("🔐 Login attempt for: {Email}", loginRequest.Email);

            // Sende Login-Request an API Controller
            var response = await JSRuntime.InvokeAsync<bool>("submitLoginForm", loginRequest);

            if (response)
            {
                Logger.LogInformation("✅ Login successful for: {Email}", loginRequest.Email);
                successMessage = "Login successful! Redirecting...";
                StateHasChanged();

                // Warte kurz und lade die Seite neu für Auth-State Update
                await Task.Delay(1000);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Logger.LogWarning("❌ Login failed for: {Email}", loginRequest.Email);
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error for: {Email}", loginRequest.Email);
            errorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isLoading = false;
        }
    }

}
=== ./ForgotPassword.razor ===
@page "/forgot-password"
@using CMC.Application.Services
@inject UserService UserService

<PageTitle>Forgot Password</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Forgot Password</h2>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info">@message</div>
        }

        <EditForm Model="@emailModel" OnValidSubmit="@HandleForgotPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="emailModel.Email" />
                <ValidationMessage For="@(() => emailModel.Email)" />
            </div>

            <button type="submit" class="btn primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Sending...</span>
                }
                else
                {
                    <span>Send Reset Link</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            <a href="/login">Back to Login</a>
        </p>
    </div>
</div>

@code {
    public class EmailModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }

    private EmailModel emailModel = new();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleForgotPassword()
    {
        try
        {
            isLoading = true;
            message = string.Empty;

            await UserService.RequestPasswordResetAsync(emailModel.Email);
            message = "If an account with that email exists, a password reset link has been sent.";

            emailModel.Email = string.Empty;
        }
        catch (Exception)
        {
            message = "An error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
=== ./_Host.cshtml ===
@page "/"
@namespace CMC.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CMC</title>
    <base href="~/" />
    <link rel="stylesheet" href="~/style.css" asp-append-version="true" />
    <script src="js/cockpit.js"></script>
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />
    <script src="_framework/blazor.server.js"></script>
    <script>
        // 🔧 Login Form Submit Helper
        window.submitLoginForm = async function(loginRequest) {
            try {
                console.log('🔐 Submitting login form...', loginRequest);

                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(loginRequest),
                    credentials: 'include'
                });

                const result = await response.json();

                if (response.ok) {
                    console.log('✅ Login successful');
                    return true;
                } else {
                    console.log('❌ Login failed:', result.message);
                    return false;
                }
            } catch (error) {
                console.error('❌ Login error:', error);
                return false;
            }
        };
    </script>
</body>
</html>
=== ./Profile.razor ===
@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<section class="slim">
    <div class="card">
        <h1>User Profile</h1>
        <AuthorizeView>
            <Authorized>
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@GetFullName(context)</h5>
                        <p class="card-text">
                            <strong>Email:</strong> @context.User.Identity?.Name<br />
                            <strong>User ID:</strong> @GetUserId(context)<br />
                            <strong>First Name:</strong> @GetClaim(context, System.Security.Claims.ClaimTypes.GivenName)<br />
                            <strong>Last Name:</strong> @GetClaim(context, System.Security.Claims.ClaimTypes.Surname)
                        </p>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</section>

@code {
    private string GetFullName(AuthenticationState authState)
    {
        var firstName = GetClaim(authState, System.Security.Claims.ClaimTypes.GivenName);
        var lastName = GetClaim(authState, System.Security.Claims.ClaimTypes.Surname);
        return $"{firstName} {lastName}".Trim();
    }

    private string GetUserId(AuthenticationState authState)
    {
        return GetClaim(authState, System.Security.Claims.ClaimTypes.NameIdentifier);
    }

    private string GetClaim(AuthenticationState authState, string claimType)
    {
        return authState.User.FindFirst(claimType)?.Value ?? "N/A";
    }
}
=== ./ResetPassword.razor ===
@page "/reset-password"
@using CMC.Application.Services
@using CMC.Contracts.Users
@inject UserService UserService
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2>Reset Password</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@resetRequest" OnValidSubmit="@HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="token">Reset Token:</label>
                <InputText id="token" class="form-control" @bind-Value="resetRequest.Token" />
                <ValidationMessage For="@(() => resetRequest.Token)" />
            </div>

            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetRequest.NewPassword" />
                <ValidationMessage For="@(() => resetRequest.NewPassword)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm New Password:</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
                @if (!string.IsNullOrEmpty(confirmPassword) && resetRequest.NewPassword != confirmPassword)
                {
                    <div class="text-danger">Passwords do not match.</div>
                }
            </div>

            <button type="submit" class="btn primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Resetting...</span>
                }
                else
                {
                    <span>Reset Password</span>
                }
            </button>
        </EditForm>

        <hr />
        <p>
            <a href="/login">Back to Login</a>
        </p>
    </div>
</div>

@code {
    private ResetPasswordRequest resetRequest = new()
    {
        Token = string.Empty,
        NewPassword = string.Empty
    };
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Get token from query string if provided
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var token))
        {
            resetRequest.Token = token.ToString();
        }
    }

    private async Task HandleResetPassword()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (resetRequest.NewPassword != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var success = await UserService.ResetPasswordAsync(resetRequest);
            if (success)
            {
                successMessage = "Password reset successful! You can now login with your new password.";
                resetRequest = new()
                {
                    Token = string.Empty,
                    NewPassword = string.Empty
                };
                confirmPassword = string.Empty;
            }
            else
            {
                errorMessage = "Invalid or expired reset token.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
=== ./Register.razor ===
@page "/register"
@using CMC.Application.Services
@using CMC.Contracts.Users
@using CMC.Domain.Common
@inject UserService UserService
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<section class="slim">
    <div class="card">
        <h1>
            Register
        </h1>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name:</label>
                <InputText id="firstName" class="form-control" @bind-Value="registerRequest.FirstName" />
                <ValidationMessage For="@(() => registerRequest.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name:</label>
                <InputText id="lastName" class="form-control" @bind-Value="registerRequest.LastName" />
                <ValidationMessage For="@(() => registerRequest.LastName)" />
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" />
                <ValidationMessage For="@(() => registerRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
                @if (!string.IsNullOrEmpty(confirmPassword) && registerRequest.Password != confirmPassword)
                {
                    <div class="text-danger">Passwords do not match.</div>
                }
            </div>

            <button type="submit" class="btn primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Registering...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </EditForm>

        <p>
            Already have an account? <a href="/login">Login here</a>
        </p>
    </div>
</section>

@code {
    private RegisterUserRequest registerRequest = new()
    {
        FirstName = string.Empty,
        LastName = string.Empty,
        Email = string.Empty,
        Password = string.Empty
    };
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (registerRequest.Password != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var user = await UserService.RegisterAsync(registerRequest);
            successMessage = "Registration successful! You can now login.";

            // Clear form
            registerRequest = new()
            {
                FirstName = string.Empty,
                LastName = string.Empty,
                Email = string.Empty,
                Password = string.Empty
            };
            confirmPassword = string.Empty;
        }
        catch (DomainException domainEx)
        {
            errorMessage = domainEx.Message;
        }
        catch
        {
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
=== ./Cockpit.razor ===
@* Pages/Cockpit.razor *@
@attribute [Authorize]
@page "/cockpit"
@page "/cockpit/{*Section}"

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@using CMC.Web.Pages.CockpitPagesSuperAdmins
@using CMC.Web.Pages.CockpitPagesUsers

@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>CMC - Cockpit</PageTitle>

<style>
	/* Menü-Visibility: default aus, wenn .open → display: inherit */
	.cockpit .submenu { display: none; }
	.cockpit .menu-node.open > .submenu { display: inherit; }

	/* Optionales UX-Feintuning */
	.cockpit .menu-row a { text-decoration: none; }
	.cockpit .menu-node.has-children > .menu-row a { cursor: pointer; }
</style>

<div class="cockpit">
	<aside class="box">
		<ul class="menu-root">
			@RenderNodes(Nodes)
		</ul>
	</aside>

	<div class="board">
		@RenderContent()
	</div>
</div>

@code {
	[Parameter] public string? Section { get; set; }

	[CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;

	private readonly HashSet<string> _open = new();
	private List<MenuNode> Nodes = new();

	private ClaimsPrincipal? _user;
	private bool _isSuperAdmin;
	private bool _isUser;

	protected override async Task OnInitializedAsync()
	{
		await LoadAuthAsync();
		BuildMenu();
		Navigation.LocationChanged += HandleLocationChanged;
		UpdateSectionFromUri();
		ExpandAncestorsForCurrentPath();
	}

	protected override async Task OnParametersSetAsync()
	{
		await LoadAuthAsync();
		BuildMenu();
		UpdateSectionFromUri();
		ExpandAncestorsForCurrentPath();
	}

	private async Task LoadAuthAsync()
	{
		var state = await AuthTask;
		_user = state.User;
		_isSuperAdmin = _user.IsInRole("super-admin");
		_isUser = _user.IsInRole("user");

		Console.WriteLine($"[Cockpit] Authenticated={_user.Identity?.IsAuthenticated}");
		Console.WriteLine($"[Cockpit] Roles={string.Join(",", _user.FindAll(ClaimTypes.Role).Select(c => c.Value))}");
		Console.WriteLine($"[Cockpit] _isSuperAdmin={_isSuperAdmin}, _isUser={_isUser}");
	}

	private void BuildMenu()
	{
		var n = new List<MenuNode>();

		if (_isSuperAdmin)
		{
			n.Add(new MenuNode
			{
				Id = "customers",
				Text = "Firmenkunden",
				Href = "/cockpit/customers",
				Match = NavLinkMatch.All,
				Component = typeof(Customers)
			});

			n.Add(new MenuNode
			{
				Id = "users",
				Text = "Benutzer",
				Href = "/cockpit/users",
				Match = NavLinkMatch.All,
				Component = typeof(Users)
			});

			n.Add(new MenuNode
			{
				Id = "libraries",
				Text = "Vorlagen",
				Href = "/cockpit/library/scenarios", // Parent ist Link (führt aufs erste Kind)
				Match = NavLinkMatch.Prefix,
				Component = typeof(LibraryScenarios),
				Children = new List<MenuNode>
				{
					new MenuNode
					{
						Id = "lib-scenarios",
						Text = "Szenarien",
						Href = "/cockpit/library/scenarios",
						Match = NavLinkMatch.All,
						Component = typeof(LibraryScenarios)
					},
					new MenuNode
					{
						Id = "lib-controls",
						Text = "Controls",
						Href = "/cockpit/library/controls",
						Match = NavLinkMatch.All,
						Component = typeof(LibraryControls)
					},
					new MenuNode
					{
						Id = "lib-frameworks",
						Text = "Frameworks",
						Href = "/cockpit/library/frameworks",
						Match = NavLinkMatch.All,
						Component = typeof(LibraryFrameworks)
					}
				}
			});

			n.Add(new MenuNode
			{
				Id = "reports",
				Text = "Reports",
				Href = "/cockpit/reports/instances",
				Match = NavLinkMatch.Prefix,
				Component = typeof(Reports),
				Children = new List<MenuNode>
				{
					new MenuNode
					{
						Id = "report-definitions",
						Text = "Vorlagen",
						Href = "/cockpit/reports/definitions",
						Match = NavLinkMatch.All,
						Component = typeof(ReportDefinitions)
					}
				}
			});

			n.Add(new MenuNode
			{
				Id = "controls",
				Text = "Controls",
				Href = "/cockpit/controls",
				Match = NavLinkMatch.All,
				Component = typeof(Controls)
			});

			n.Add(new MenuNode
			{
				Id = "exception",
				Text = "Ausnahmen",
				Href = "/cockpit/exceptions",
				Match = NavLinkMatch.All,
				Component = typeof(Exceptions)
			});

			n.Add(new MenuNode
			{
				Id = "tasks",
				Text = "Aufgaben",
				Href = "/cockpit/tasks",
				Match = NavLinkMatch.All,
				Component = typeof(Tasks)
			});

			n.Add(new MenuNode
			{
				Id = "evidences",
				Text = "Nachweise",
				Href = "/cockpit/evidences",
				Match = NavLinkMatch.All,
				Component = typeof(Evidences)
			});

			_open.Add("libraries");
		}
		else if (_isUser)
		{
			n.Add(new MenuNode
			{
				Id = "dashboard",
				Text = "Dashboard",
				Href = "/cockpit/",
				Match = NavLinkMatch.All,
				Component = typeof(Evidences)
			});
			n.Add(new MenuNode
			{
				Id = "controls",
				Text = "Controls",
				Href = "/cockpit/user-controls",
				Match = NavLinkMatch.All,
				Component = typeof(UserControls)
			});
			n.Add(new MenuNode
			{
				Id = "scenarios",
				Text = "Szenarien",
				Href = "/cockpit/user-scenarios",
				Match = NavLinkMatch.All,
				Component = typeof(UserScenarios)
			});
			n.Add(new MenuNode
			{
				Id = "tasks",
				Text = "Aufgaben",
				Href = "/cockpit/user-tasks",
				Match = NavLinkMatch.All,
				Component = typeof(UserTasks)
			});
			n.Add(new MenuNode
			{
				Id = "reports",
				Text = "Reports",
				Href = "/cockpit/reports",
				Match = NavLinkMatch.All,
				Component = typeof(UserReports),
				Children = new List<MenuNode>
				{
					new MenuNode
					{
						Id = "user-report-definitions",
						Text = "Vorlagen",
						Href = "/cockpit/reports/user-report-definitions",
						Match = NavLinkMatch.All,
						Component = typeof(UserReportDefinitions)
					}
				}
			});
		}

		Nodes = n;
		Console.WriteLine($"[Cockpit] Menu nodes={Nodes.Count}");
	}

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		UpdateSectionFromUri();
		ExpandAncestorsForCurrentPath();
		InvokeAsync(StateHasChanged);
	}

	private void UpdateSectionFromUri()
	{
		var path = Navigation.ToBaseRelativePath(Navigation.Uri);

		if (path.StartsWith("cockpit/"))
		{
			Section = path["cockpit/".Length..];
		}
		else if (path == "cockpit" || path == "cockpit/")
		{
			Section = "overview";
		}
	}

	private RenderFragment RenderNodes(IEnumerable<MenuNode> nodes) => builder =>
	{
		var seq = 0;
		foreach (var node in nodes)
		{
			var hasChildren = node.Children is { Count: > 0 };
			var isOpen = _open.Contains(node.Id);

			builder.OpenElement(seq++, "li");
			builder.SetKey(node.Id);
			builder.AddAttribute(seq++, "class", $"menu-node{(hasChildren ? " has-children" : "")}{(isOpen ? " open" : "")}");

			builder.OpenElement(seq++, "div");
			builder.AddAttribute(seq++, "class", "menu-row");

			if (!string.IsNullOrWhiteSpace(node.Href))
			{
				builder.OpenComponent<NavLink>(seq++);
				builder.AddAttribute(seq++, "href", node.Href);
				if (node.Match.HasValue) builder.AddAttribute(seq++, "Match", node.Match.Value);

				if (hasChildren)
				{
					builder.AddAttribute(seq++, "onclick",
						EventCallback.Factory.Create<MouseEventArgs>(this, () => Toggle(node.Id)));
				}

				builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(b => b.AddContent(0, node.Text)));
				builder.CloseComponent();
			}
			else
			{
				builder.OpenElement(seq++, "span");
				builder.AddAttribute(seq++, "class", "menu-label");
				if (hasChildren)
				{
					builder.AddAttribute(seq++, "onclick",
						EventCallback.Factory.Create<MouseEventArgs>(this, () => Toggle(node.Id)));
				}
				builder.AddContent(seq++, node.Text);
				builder.CloseElement();
			}

			builder.CloseElement(); // .menu-row

			if (hasChildren)
			{
				builder.OpenElement(seq++, "ul");
				builder.AddAttribute(seq++, "id", $"sub-{node.Id}");
				builder.AddAttribute(seq++, "class", "submenu");
				builder.AddContent(seq++, RenderNodes(node.Children!));
				builder.CloseElement();
			}

			builder.CloseElement(); // li
		}
	};

	// ---------- CONTENT RENDER ----------
	private RenderFragment RenderContent() => builder =>
	{
		var currentPath = "/" + Navigation.ToBaseRelativePath(Navigation.Uri).TrimEnd('/');
		if (string.IsNullOrWhiteSpace(currentPath) || currentPath == "/cockpit")
			currentPath = "/cockpit";

		var activeNode = FindNodeByHref(Nodes, currentPath);

		var defaultOverview = _isSuperAdmin
			? typeof(CockpitPagesSuperAdmins.Overview)
			: typeof(CockpitPagesUsers.Dashboard);

		var componentType = activeNode?.Component ?? defaultOverview;

		builder.OpenComponent(0, componentType);
		builder.CloseComponent();
	};

	// ---------- HELPERS ----------
	private MenuNode? FindNodeByHref(IEnumerable<MenuNode> nodes, string path)
	{
		foreach (var node in nodes)
		{
			if (!string.IsNullOrWhiteSpace(node.Href) &&
				string.Equals(node.Href.TrimEnd('/'), path.TrimEnd('/'), StringComparison.OrdinalIgnoreCase))
			{
				return node;
			}

			if (node.Children?.Any() == true)
			{
				var child = FindNodeByHref(node.Children, path);
				if (child != null) return child;
			}
		}
		return null;
	}

	private void Toggle(string id)
	{
		if (_open.Contains(id)) _open.Remove(id);
		else _open.Add(id);
		Console.WriteLine($"[Cockpit] Toggle '{id}' -> open={_open.Contains(id)}");
		InvokeAsync(StateHasChanged);
	}

	private void ExpandAncestorsForCurrentPath()
	{
		var currentPath = "/" + Navigation.ToBaseRelativePath(Navigation.Uri);
		var active = FindPathByHref(Nodes, currentPath);
		if (active is null || active.Count == 0) return;

		foreach (var ancestor in active)
			_open.Add(ancestor.Id);
	}

	private List<MenuNode>? FindPathByHref(IEnumerable<MenuNode> nodes, string currentPath)
	{
		foreach (var n in nodes)
		{
			var isMatch = !string.IsNullOrWhiteSpace(n.Href) &&
				(string.Equals(n.Href!.TrimEnd('/'), currentPath.TrimEnd('/'), StringComparison.OrdinalIgnoreCase)
					|| currentPath.StartsWith(n.Href!.TrimEnd('/') + "/", StringComparison.OrdinalIgnoreCase));

			if (isMatch) return new List<MenuNode> { n };

			if (n.Children?.Any() == true)
			{
				var childPath = FindPathByHref(n.Children!, currentPath);
				if (childPath != null)
				{
					childPath.Insert(0, n);
					return childPath;
				}
			}
		}
		return null;
	}

	public void Dispose()
	{
		Navigation.LocationChanged -= HandleLocationChanged;
	}

	private sealed class MenuNode
	{
		public string Id { get; set; } = Guid.NewGuid().ToString("N");
		public string Text { get; set; } = "";
		public string? Href { get; set; }
		public NavLinkMatch? Match { get; set; } = NavLinkMatch.Prefix;
		public List<MenuNode>? Children { get; set; }
		public Type? Component { get; set; }
	}
}
