@using CMC.Web.FormFields
@using CMC.Web.Services
@inherits FormFieldBase
@inject IRelationshipManager Rels

<div class="form-row">
    <label class="form-label" for="@Name">@Label</label>

    @if (_isLoading)
    {
        <input class="form-control" type="text" value="Lade Optionen..." disabled />
    }
    else
    {
        <select class="form-control"
                id="@Name"
                disabled="@ReadOnly"
                required="@Required"
                @onchange="HandleChange">

            <option value="">-- bitte w√§hlen --</option>

            @foreach (var option in _options)
            {
                var isSelected = string.Equals(option.Value, Value?.ToString(), StringComparison.OrdinalIgnoreCase);
                <option value="@option.Value" selected="@isSelected">@option.Key</option>
            }
        </select>
    }

    @if (!string.IsNullOrWhiteSpace(Hint))
    {
        <div class="form-hint">@Hint</div>
    }
</div>

@code {
    [Parameter] public string RelationName { get; set; } = "";
    [Parameter] public Type? ParentType { get; set; }

    private bool _isLoading = true;
    private List<KeyValuePair<string, string>> _options = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadOptionsAsync();
    }

    private async Task LoadOptionsAsync()
    {
        _options.Clear();

        if (ParentType is null || string.IsNullOrWhiteSpace(RelationName))
        {
            _isLoading = false;
            return;
        }

        try
        {
            _isLoading = true;

            var descriptor = TryGetDescriptor(RelationName)
                          ?? TryGetDescriptor(ParentType.Name + RelationName);

            if (descriptor is null || descriptor.Kind != RelationKind.Reference)
            {
                _isLoading = false;
                return;
            }

            var relationOptions = await descriptor.LoadOptions();
            _options = relationOptions.Select(o => new KeyValuePair<string, string>(o.Label, o.Value)).ToList();
        }
        catch
        {
            _options = new();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private RelationDescriptor? TryGetDescriptor(string rel)
    {
        try { return Rels.GetDescriptor(ParentType!, rel); }
        catch { return null; }
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        await OnChanged(e.Value?.ToString());
    }
}
