name: Deploy CMC Test

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cmc_test
        options: >-
          --health-cmd "pg_isready -U postgres -d cmc_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore -c Release

      - name: Test
        run: dotnet test --no-build -c Release --verbosity normal
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=cmc_test;Username=postgres;Password=postgres"

  build-and-deploy:
    needs: test
    if: github.ref == 'refs/heads/test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Optional: Tailwind CSS vor dem Build erzeugen (nur wenn du die Datei nicht im Docker-Build erzeugst)
      - name: Build Tailwind CSS
        run: |
          set -e
          cd src/CMC.Web
          npx @tailwindcss/cli@latest -i ./Styles/app.css -o ./wwwroot/style.css --minify
          test -s ./wwwroot/style.css

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:test-latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: Write kubeconfig from secret
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.kube
          echo "${KUBECONFIG_B64}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl cluster-info
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}

      - name: Replace image name in test manifests
        run: |
          set -e
          sed -i "s|ghcr.io/USERNAME/REPOSITORY|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|g" k8s/test/cmc-app.yaml

      - name: Create namespaces
        run: kubectl apply -f k8s/namespaces.yaml

      - name: Create/update secrets (test)
        env:
          DB_PASSWORD: ${{ secrets.DB_PW }}
        run: |
          set -euo pipefail
          kubectl -n cmc-test create secret generic postgres-secret \
            --from-literal=password="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          CONNECTION_STRING="Host=postgres;Port=5432;Database=cmc_test;Username=cmc_user;Password=${DB_PASSWORD};Pooling=true;SslMode=Disable;"
          kubectl -n cmc-test create secret generic cmc-app-secret \
            --from-literal=connection="${CONNECTION_STRING}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to test
        run: kubectl apply -f k8s/test/

      - name: Wait for rollout
        shell: bash
        run: |
          set -e
          if kubectl -n cmc-test get statefulset postgres >/dev/null 2>&1; then
            kubectl -n cmc-test rollout status statefulset/postgres --timeout=600s
          fi
          if kubectl -n cmc-test get deployment postgres >/dev/null 2>&1; then
            kubectl -n cmc-test rollout status deployment/postgres --timeout=600s
          fi
          kubectl -n cmc-test rollout status deployment/cmc-app --timeout=600s

      - name: Show service info
        shell: bash
        run: |
          set -e
          kubectl get pods -n cmc-test
          kubectl get services -n cmc-test
          if kubectl -n cmc-test get svc cmc-app >/dev/null 2>&1; then
            echo -n "NodePort cmc-app: "
            kubectl get svc cmc-app -n cmc-test -o jsonpath='{.spec.ports[0].nodePort}'; echo
          fi
