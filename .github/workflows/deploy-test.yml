name: Deploy CMC Test

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cmc_test
        options: >-
          --health-cmd "pg_isready -U postgres -d cmc_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - run: dotnet restore
      - run: dotnet build --no-restore -c Release
      # Tests bei Bedarf wieder aktivieren:
      # - name: Run tests
      #   run: dotnet test --no-build -c Release --verbosity normal
      #   env:
      #     ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=cmc_test;Username=postgres;Password=postgres;Pooling=true;SslMode=Disable;"

  build-and-deploy:
    needs: test
    if: github.ref == 'refs/heads/test'
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (test-latest + test-SHA)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:test-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:test-${{ github.sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Write kubeconfig from KUBECONFIG_B64
        shell: bash
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          set -euo pipefail
          test -n "${KUBECONFIG_B64:-}" || { echo "Missing KUBECONFIG_B64"; exit 1; }
          mkdir -p ~/.kube
          echo "$KUBECONFIG_B64" | base64 -d > ~/.kube/config 2>/dev/null || { echo "Invalid base64"; exit 1; }
          chmod 600 ~/.kube/config
          kubectl cluster-info

      - name: Create namespaces
        run: kubectl apply -f k8s/namespaces.yaml

      # GHCR Pull im Cluster (cmc-test) â€“ nutzt NUR GHCR_PAT; Username = Repo-Owner
      - name: Create/Update GHCR imagePullSecret (cmc-test)
        shell: bash
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          GHCR_USER_FALLBACK: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          if [ -n "${GHCR_PAT:-}" ]; then
            kubectl -n cmc-test delete secret ghcr-cred --ignore-not-found
            kubectl -n cmc-test create secret docker-registry ghcr-cred \
              --docker-server=${{ env.REGISTRY }} \
              --docker-username="${GHCR_USER_FALLBACK}" \
              --docker-password="${GHCR_PAT}"
          else
            echo "No GHCR_PAT provided; skipping imagePullSecret (images must be public)."
          fi

      - name: Create/update DB + APP secrets (test)
        shell: bash
        env:
          DB_PW_TEST: ${{ secrets.DB_PW_TEST }}
          DB_PW_PROD: ${{ secrets.DB_PW }}
        run: |
          set -euo pipefail
          DB_PASSWORD="${DB_PW_TEST:-$DB_PW_PROD}"
          test -n "${DB_PASSWORD:-}" || { echo "No DB password provided (DB_PW_TEST/DB_PW)"; exit 1; }

          kubectl -n cmc-test create secret generic postgres-secret \
            --from-literal=password="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          CONNECTION_STRING="Host=postgres;Port=5432;Database=cmc_test;Username=cmc_user;Password=${DB_PASSWORD};Pooling=true;SslMode=Disable;"
          kubectl -n cmc-test create secret generic cmc-app-secret \
            --from-literal=connection="${CONNECTION_STRING}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update master-user secret (email+password)
        shell: bash
        env:
          MASTER_MAIL: ${{ secrets.MASTER_MAIL }}
          MASTER_PW:   ${{ secrets.MASTER_PW }}
        run: |
          set -euo pipefail
          test -n "${MASTER_MAIL:-}" -a -n "${MASTER_PW:-}" || { echo "MASTER_* secrets missing"; exit 1; }
          kubectl -n cmc-test create secret generic master-user \
            --from-literal=email="${MASTER_MAIL}" \
            --from-literal=password="${MASTER_PW}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update TLS secret for Ingress (test)
        shell: bash
        env:
          TLS_CRT_B64: ${{ secrets.TLS_CRT_B64 }}
          TLS_KEY_B64: ${{ secrets.TLS_KEY_B64 }}
        run: |
          set -euo pipefail
          if [ -n "${TLS_CRT_B64:-}" ] && [ -n "${TLS_KEY_B64:-}" ]; then
            echo "$TLS_CRT_B64" | base64 -d > crt.pem
            echo "$TLS_KEY_B64" | base64 -d > key.pem
            kubectl -n cmc-test create secret tls cmc-app-tls \
              --cert=crt.pem --key=key.pem \
              --dry-run=client -o yaml | kubectl apply -f -
            rm -f crt.pem key.pem
          else
            echo "TLS secrets not set; skipping TLS secret creation."
          fi

      - name: Replace image name in test manifests
        run: |
          sed -i "s|ghcr.io/USERNAME/REPOSITORY|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|g" k8s/test/cmc-app.yaml

      - name: Apply manifests (test)
        run: |
          kubectl apply -f k8s/test/postgres.yaml
          kubectl apply -f k8s/test/cmc-app.yaml
          kubectl apply -f k8s/test/ingress.yaml

      # Falls Private-Images: imagePullSecrets am Deployment sicherstellen
      - name: Ensure imagePullSecrets on cmc-app (if private images)
        shell: bash
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          set -euo pipefail
          if [ -n "${GHCR_PAT:-}" ]; then
            kubectl -n cmc-test patch deploy cmc-app \
              --type=merge -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ghcr-cred"}]}}}}' || true
          else
            echo "No GHCR_PAT -> assuming public image; skipping imagePullSecrets patch."
          fi

      - name: Set deployment image to current test-SHA (force rollout)
        run: |
          kubectl -n cmc-test set image deploy/cmc-app \
            cmc-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:test-${{ github.sha }}

      - name: Wait for rollout (with diagnostics)
        shell: bash
        run: |
          set -euo pipefail
          if kubectl -n cmc-test get deploy postgres >/dev/null 2>&1; then
            kubectl -n cmc-test rollout status deploy/postgres --timeout=600s || POSTGRES_ROLLOUT_FAILED=1
          elif kubectl -n cmc-test get statefulset postgres >/dev/null 2>&1; then
            kubectl -n cmc-test rollout status statefulset/postgres --timeout=600s || POSTGRES_ROLLOUT_FAILED=1
          fi

          kubectl -n cmc-test rollout status deploy/cmc-app --timeout=600s || APP_ROLLOUT_FAILED=1

          if [ "${POSTGRES_ROLLOUT_FAILED:-0}" = "1" ] || [ "${APP_ROLLOUT_FAILED:-0}" = "1" ]; then
            echo "=== Pods ==="
            kubectl -n cmc-test get pods -o wide || true
            echo "=== Events (last 100) ==="
            kubectl -n cmc-test get events --sort-by=.lastTimestamp | tail -n 100 || true
            echo "=== Describe cmc-app ==="
            kubectl -n cmc-test describe deploy/cmc-app || true
            if kubectl -n cmc-test get deploy postgres >/dev/null 2>&1; then
              echo "=== Describe postgres (deploy) ==="
              kubectl -n cmc-test describe deploy/postgres || true
              echo "=== Logs postgres ==="
              kubectl -n cmc-test logs deploy/postgres --all-containers=true --tail=200 || true
            elif kubectl -n cmc-test get statefulset postgres >/dev/null 2>&1; then
              echo "=== Describe postgres (statefulset) ==="
              kubectl -n cmc-test describe statefulset/postgres || true
              echo "=== Logs postgres ==="
              kubectl -n cmc-test logs statefulset/postgres --all-containers=true --tail=200 || true
            fi
            echo "=== Logs cmc-app ==="
            kubectl -n cmc-test logs deploy/cmc-app --all-containers=true --tail=200 || true
            exit 1
          fi

      - name: Seed master user (K8s Job - test)
        run: |
          kubectl apply -f k8s/test/seed-master-user-configmap.yaml
          kubectl -n cmc-test delete job seed-master-user --ignore-not-found
          kubectl apply -f k8s/test/seed-master-user.yaml
          kubectl -n cmc-test wait --for=condition=complete job/seed-master-user --timeout=180s
          kubectl -n cmc-test logs job/seed-master-user --tail=200 || true
