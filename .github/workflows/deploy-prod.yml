name: Deploy CMC Production

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (latest + SHA)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ github.sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Write kubeconfig from KUBECONFIG_B64
        shell: bash
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          set -euo pipefail
          test -n "${KUBECONFIG_B64:-}" || { echo "Missing KUBECONFIG_B64"; exit 1; }
          mkdir -p ~/.kube
          echo "$KUBECONFIG_B64" | base64 -d > ~/.kube/config 2>/dev/null || { echo "Invalid base64"; exit 1; }
          chmod 600 ~/.kube/config
          kubectl cluster-info

      - name: Replace image name in manifests (no-op if already set)
        shell: bash
        run: |
          sed -i "s|ghcr.io/USERNAME/REPOSITORY|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|g" k8s/prod/cmc-app.yaml || true
          sed -i "s|ghcr.io/USERNAME/REPOSITORY|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|g" k8s/prod/seed-master-user.yaml || true

      - name: Create namespaces
        run: kubectl apply -f k8s/namespaces.yaml

      - name: Create/update DB + APP secrets
        shell: bash
        env:
          DB_PASSWORD: ${{ secrets.DB_PW }}
        run: |
          set -euo pipefail
          kubectl -n cmc-prod create secret generic postgres-secret \
            --from-literal=password="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          CONNECTION_STRING="Host=postgres;Port=5432;Database=cmc_production;Username=cmc_user;Password=${DB_PASSWORD};Pooling=true;SslMode=Disable;"
          kubectl -n cmc-prod create secret generic cmc-app-secret \
            --from-literal=connection="${CONNECTION_STRING}" \
            --dry-run=client -o yaml | kubectl apply -f -

      # bcrypt-Hash aus MASTER_PW erzeugen und als Secret bereitstellen
      - name: Setup Node for bcrypt
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate bcrypt hash for MASTER_PW
        id: bcrypt
        shell: bash
        env:
          MASTER_PW: ${{ secrets.MASTER_PW }}
        run: |
          set -euo pipefail
          test -n "${MASTER_PW:-}" || { echo "MASTER_PW missing"; exit 1; }
          npm install bcryptjs --no-save >/dev/null 2>&1
          HASH=$(node -e "const b=require('bcryptjs');console.log(b.hashSync(process.env.MASTER_PW, 12));")
          echo "HASH=$HASH" >> "$GITHUB_OUTPUT"

      - name: Create/Update master-user secret (email+bcrypt hash)
        shell: bash
        env:
          MASTER_MAIL: ${{ secrets.MASTER_MAIL }}
          MASTER_PWHASH: ${{ steps.bcrypt.outputs.HASH }}
        run: |
          set -euo pipefail
          test -n "${MASTER_MAIL:-}" -a -n "${MASTER_PWHASH:-}" || { echo "MASTER_* missing"; exit 1; }
          kubectl -n cmc-prod create secret generic master-user \
            --from-literal=email="${MASTER_MAIL}" \
            --from-literal=passwordHash="${MASTER_PWHASH}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update TLS secret for Ingress
        shell: bash
        env:
          TLS_CRT_B64: ${{ secrets.TLS_CRT_B64 }}
          TLS_KEY_B64: ${{ secrets.TLS_KEY_B64 }}
        run: |
          set -euo pipefail
          test -n "${TLS_CRT_B64:-}" -a -n "${TLS_KEY_B64:-}" || { echo "TLS secrets missing"; exit 1; }
          echo "$TLS_CRT_B64" | base64 -d > crt.pem
          echo "$TLS_KEY_B64" | base64 -d > key.pem
          kubectl -n cmc-prod create secret tls cmc-app-tls \
            --cert=crt.pem --key=key.pem \
            --dry-run=client -o yaml | kubectl apply -f -
          rm -f crt.pem key.pem

      - name: Apply app manifests (ohne Seed-Dateien)
        shell: bash
        run: |
          set -euo pipefail
          # alles in k8s/prod anwenden, aber seed-* auslassen
          find k8s/prod -maxdepth 1 -type f ! -name 'seed-master-user*' -print0 \
            | xargs -0 -r -I {} kubectl apply -f {}

      - name: Set deployment image to current SHA (force rollout)
        run: |
          kubectl -n cmc-prod set image deploy/cmc-app \
            cmc-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ github.sha }}

      - name: Wait for rollout
        run: |
          if kubectl -n cmc-prod get statefulset postgres >/dev/null 2>&1; then
            kubectl -n cmc-prod rollout status statefulset/postgres --timeout=600s
          fi
          kubectl -n cmc-prod rollout status deploy/cmc-app --timeout=600s

      - name: Seed master user (Job)
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f k8s/prod/seed-master-user-configmap.yaml
          kubectl -n cmc-prod delete job seed-master-user --ignore-not-found
          kubectl apply -f k8s/prod/seed-master-user.yaml

          kubectl -n cmc-prod wait --for=condition=complete job/seed-master-user --timeout=480s

          echo "=== Job ==="
          kubectl -n cmc-prod describe job seed-master-user || true
          echo "=== Pods ==="
          kubectl -n cmc-prod get pods -l job-name=seed-master-user -o wide || true
          POD=$(kubectl -n cmc-prod get pods -l job-name=seed-master-user -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "${POD:-}" ]; then
            echo "=== Pod describe ==="
            kubectl -n cmc-prod describe pod "$POD" || true
            echo "=== Pod logs ==="
            kubectl -n cmc-prod logs "$POD" --all-containers=true --tail=500 || true
          fi

      - name: Post-check: Service/Endpoints/Ingress + Smoke
        shell: bash
        run: |
          set -e
          kubectl -n cmc-prod get svc cmc-app -o wide
          kubectl -n cmc-prod get endpoints cmc-app -o wide
          kubectl -n cmc-prod get ingress cmc-app -o wide
          curl -I http://cmc.audicius.de || true
          curl -kI https://cmc.audicius.de/ || true
