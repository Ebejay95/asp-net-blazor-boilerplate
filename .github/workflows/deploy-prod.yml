name: Deploy CMC Production

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Write kubeconfig from KUBECONFIG_B64 (single source of truth)
        shell: bash
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          set -euo pipefail

          if [ -z "${KUBECONFIG_B64:-}" ]; then
            echo "Fehler: Secret KUBECONFIG_B64 fehlt."
            exit 1
          fi

          mkdir -p ~/.kube
          echo "$KUBECONFIG_B64" | base64 -d > ~/.kube/config 2>/dev/null || {
            echo "Fehler: KUBECONFIG_B64 ist kein gültiges Base64 (einzeilig!)."
            exit 1
          }
          chmod 600 ~/.kube/config

          SERVER="$(kubectl config view --minify --raw -o jsonpath='{.clusters[0].cluster.server}')"
          echo "Server in kubeconfig: $SERVER"

          # CA extrahieren (falls vorhanden)
          CA_TMP=/tmp/ca.crt
          kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' \
            | base64 -d > "$CA_TMP" 2>/dev/null || true

          # TLS-Erreichbarkeit prüfen (401/403 sind OK! nur TLS zählt)
          if [ -s "$CA_TMP" ]; then
            CODE="$(curl -sS -o /dev/null -w '%{http_code}' --cacert "$CA_TMP" "$SERVER/version" || true)"
          else
            # Falls keine CA eingebettet ist, trotzdem testen (z.B. öffentliche CA)
            CODE="$(curl -sS -o /dev/null -w '%{http_code}' "$SERVER/version" || true)"
          fi

          case "$CODE" in
            200|401|403)
              echo "TLS ok (HTTP $CODE)."
              ;;
            *)
              echo "TLS/CA-Problem oder Server unerreichbar (HTTP $CODE)."
              echo "Hinweis: 401/403 wären in Ordnung; alles andere weist auf TLS/Netz hin."
              exit 1
              ;;
          esac

          # Kubectl spricht mit dem Cluster (hier kann Auth fehlschlagen; das zeigt echte RBAC/Token-Probleme)
          kubectl cluster-info

      - name: Replace image name in manifests
        run: |
          sed -i "s|ghcr.io/USERNAME/REPOSITORY|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|g" k8s/prod/cmc-app.yaml

      - name: Create namespaces
        run: kubectl apply -f k8s/namespaces.yaml

      - name: Create/update secrets
        env:
          DB_PASSWORD: ${{ secrets.DB_PW }}
        run: |
          set -euo pipefail
          kubectl -n cmc-prod create secret generic postgres-secret \
            --from-literal=password="${DB_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

          CONNECTION_STRING="Host=postgres;Port=5432;Database=cmc_production;Username=cmc_user;Password=${DB_PASSWORD};Pooling=true;SslMode=Disable;"
          kubectl -n cmc-prod create secret generic cmc-app-secret \
            --from-literal=connection="${CONNECTION_STRING}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to production
        run: kubectl apply -f k8s/prod/

      - name: Wait for rollout
        run: |
          if kubectl -n cmc-prod get statefulset postgres >/dev/null 2>&1; then
            kubectl -n cmc-prod rollout status statefulset/postgres --timeout=600s
          fi
          kubectl -n cmc-prod rollout status deploy/cmc-app --timeout=600s

      - name: Show service info
        run: |
          kubectl get pods -n cmc-prod
          kubectl get services -n cmc-prod
          echo -n "NodePort: "
          kubectl get svc cmc-app -n cmc-prod -o jsonpath='{.spec.ports[0].nodePort}'; echo
