name: CI Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create source tarball (exclude junk)
        run: |
          tar \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='**/bin' \
            --exclude='**/obj' \
            -czf source-code.tar.gz .

      - name: Upload tarball to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "source-code.tar.gz"
          target: "/tmp/source-code.tar.gz"
          strip_components: 0
          overwrite: true

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          SUDO_PASS: ${{ secrets.SUDO_PASS }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          APP_DIR: ${{ secrets.SERVER_APP_DIR || '/var/www/cmc-app' }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          command_timeout: 30m
          script_stop: true
          script: |
            set -euo pipefail

            echo "=== Starting Production Setup ==="
            APP_DIR="${APP_DIR:-/var/www/cmc-app}"

            # --- Verzeichnisse & Code ausrollen
            echo "$SUDO_PASS" | sudo -S mkdir -p "$APP_DIR"
            echo "$SUDO_PASS" | sudo -S chown "$USER:$USER" "$APP_DIR"
            cd "$APP_DIR"
            tar -xzf /tmp/source-code.tar.gz --strip-components=1
            echo "‚úÖ Source code extracted"

            # --- Systemabh√§ngigkeiten nur wenn n√∂tig
            echo "$SUDO_PASS" | sudo -S apt update -y

            # Docker (nur falls nicht vorhanden)
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              echo "$SUDO_PASS" | sudo -S sh get-docker.sh
              echo "$SUDO_PASS" | sudo -S systemctl enable --now docker
            fi

            # .NET 8 SDK / ASP.NET Runtime (nur falls nicht vorhanden)
            if ! command -v dotnet >/dev/null 2>&1; then
              wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S dpkg -i packages-microsoft-prod.deb
              rm -f packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S apt update -y
              echo "$SUDO_PASS" | sudo -S apt install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
            fi

            # Nginx (Reverse Proxy)
            if ! command -v nginx >/dev/null 2>&1; then
              echo "$SUDO_PASS" | sudo -S apt install -y nginx
              echo "$SUDO_PASS" | sudo -S systemctl enable --now nginx
            fi

            # Node.js 20 (f√ºr Tailwind v4) ‚Äì nur falls node fehlt
            if ! command -v node >/dev/null 2>&1; then
              echo "$SUDO_PASS" | sudo -S apt install -y ca-certificates curl gnupg
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              echo "$SUDO_PASS" | sudo -S apt install -y nodejs
            fi

            # --- Tailwind v4 Build (prod, minify)
            echo "üé® Building Tailwind (v4) for Production‚Ä¶"
            cd "$APP_DIR/src/CMC.Web"
            npx @tailwindcss/cli@latest -i ./Styles/app.css -o ./wwwroot/style.css --minify
            test -s ./wwwroot/style.css || (echo "‚ùå Tailwind output missing/empty" && exit 1)
            echo "‚úÖ Tailwind built: $(wc -c < ./wwwroot/style.css) bytes"

            # --- .NET Restore/Publish
            cd "$APP_DIR"
            dotnet restore
            dotnet publish src/CMC.Web/CMC.Web.csproj --configuration Release --output "$APP_DIR/publish" --no-restore

            # In Place bereitstellen
            cp -r "$APP_DIR/publish/"* "$APP_DIR/"
            rm -rf "$APP_DIR/publish"
            echo "$SUDO_PASS" | sudo -S chown -R "$USER:$USER" "$APP_DIR"

            # --- Postgres-Container sicherstellen (Passwort aus Secret)
            echo "$SUDO_PASS" | sudo -S docker stop cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker rm   cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker run -d --name cmc-postgres-prod --restart unless-stopped \
              -e POSTGRES_USER=cmc_user \
              -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
              -e POSTGRES_DB=cmc_production \
              -p 127.0.0.1:5432:5432 \
              -v cmc_postgres_data:/var/lib/postgresql/data \
              postgres:15

            # Kurze Wartezeit, bis PG bereit ist
            sleep 10
            echo "$SUDO_PASS" | sudo -S docker exec cmc-postgres-prod pg_isready -U cmc_user -d cmc_production

            # --- systemd Unit (Basis) nur einmalig anlegen, falls nicht da
            if [ ! -f /etc/systemd/system/cmc-app.service ]; then
              echo "$SUDO_PASS" | sudo -S bash -c 'cat > /etc/systemd/system/cmc-app.service <<SVC
[Unit]
Description=CMC Cybersecurity Management Cockpit
After=network.target

[Service]
Type=simple
WorkingDirectory='"$APP_DIR"'
ExecStart=/usr/bin/dotnet '"$APP_DIR"'/CMC.Web.dll --urls http://localhost:5000
Restart=always
RestartSec=10
User=www-data
Group=www-data

[Install]
WantedBy=multi-user.target
SVC'
              echo "$SUDO_PASS" | sudo -S systemctl enable cmc-app.service
            fi

            # --- systemd Drop-In mit **Secrets** (keine .env n√∂tig)
            echo "$SUDO_PASS" | sudo -S mkdir -p /etc/systemd/system/cmc-app.service.d
            echo "$SUDO_PASS" | sudo -S bash -c 'cat > /etc/systemd/system/cmc-app.service.d/override.conf <<EOF
[Service]
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=ASPNETCORE_URLS=http://localhost:5000
Environment=POSTGRES_HOST=127.0.0.1
Environment=POSTGRES_PORT=5432
Environment=POSTGRES_USER=cmc_user
Environment=POSTGRES_PASSWORD='"${POSTGRES_PASSWORD}"'
Environment=ConnectionStrings__DefaultConnection=Host=127.0.0.1;Port=5432;Database=cmc_production;Username=cmc_user;Password='"${POSTGRES_PASSWORD}"';Pooling=true;SSL Mode=Disable;Trust Server Certificate=true;
EOF'

            echo "$SUDO_PASS" | sudo -S systemctl daemon-reload
            echo "$SUDO_PASS" | sudo -S systemctl restart cmc-app.service

            # --- Nginx Site aktivieren (falls du sie schon auf dem Server hast)
            # Hier wird nur getestet & neu geladen ‚Äì die Datei /etc/nginx/sites-available/cmc-app
            # solltest du bereits einmalig erstellt haben.
            echo "$SUDO_PASS" | sudo -S nginx -t
            echo "$SUDO_PASS" | sudo -S systemctl reload nginx

            echo "=============================================="
            echo "‚úÖ Successfully executed commands to all host."
            echo "=============================================="
