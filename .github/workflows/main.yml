name: CI Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Create clean source archive
      run: |
        echo "Creating source code archive..."

        # Create a clean copy in a temporary directory
        mkdir -p /tmp/clean-source

        # Copy all files except excluded ones
        rsync -av \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='bin/' \
          --exclude='obj/' \
          --exclude='*/bin/' \
          --exclude='*/obj/' \
          --exclude='*.user' \
          --exclude='.vs/' \
          --exclude='.vscode/' \
          --exclude='node_modules/' \
          ./ /tmp/clean-source/

        # Create archive from the clean copy
        cd /tmp
        tar -czf source-code.tar.gz clean-source/

        # Move archive to workspace
        mv source-code.tar.gz $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE

        echo "Archive created:"
        ls -la source-code.tar.gz
        echo "Archive size:"
        du -h source-code.tar.gz

    - name: Prepare deployment directory
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PRIVATE_KEY_PW }}
        timeout: 300s
        script: |
          echo "=== Starting Repository Deployment ==="

          # Create backup if directory exists
          if [ -d "/var/www/cmc-app" ]; then
            sudo mv /var/www/cmc-app /var/www/cmc-app-backup-$(date +%Y%m%d_%H%M%S)
            echo "Created backup"
          fi

          # Create target directory
          sudo mkdir -p /var/www/cmc-app
          sudo chown $USER:$USER /var/www/cmc-app
          cd /var/www/cmc-app

          echo "=== Directory prepared ==="

    - name: Upload source code
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PRIVATE_KEY_PW }}
        source: "source-code.tar.gz"
        target: "/tmp/"
        timeout: 60s
        overwrite: true

    - name: Extract and Setup Production Environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PRIVATE_KEY_PW }}
        timeout: 900s
        script: |
          echo "=== Starting Production Setup ==="

          # Extract source code to target directory
          cd /var/www/cmc-app
          tar -xzf /tmp/source-code.tar.gz --strip-components=1
          echo "✅ Source code extracted"

          echo ""
          echo "🔧 Installing Server Dependencies..."

          # Update system
          sudo apt update

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "✅ Docker installed"
          else
            echo "ℹ️  Docker already installed"
          fi

          # Install .NET 8 if not present
          if ! command -v dotnet &> /dev/null; then
            echo "📦 Installing .NET 8..."
            wget https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt update
            sudo apt install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
            echo "✅ .NET 8 installed"
          else
            echo "ℹ️  .NET already installed"
          fi

          # Install Nginx if not present
          if ! command -v nginx &> /dev/null; then
            echo "📦 Installing Nginx..."
            sudo apt install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
            echo "✅ Nginx installed"
          else
            echo "ℹ️  Nginx already installed"
          fi

          echo ""
          echo "🚀 Building and Publishing Application..."

          # Build and publish the application
          cd /var/www/cmc-app
          dotnet restore
          dotnet publish src/CMC.Web/CMC.Web.csproj \
            --configuration Release \
            --output /var/www/cmc-app/publish \
            --no-restore

          # Move published files to root
          cp -r /var/www/cmc-app/publish/* /var/www/cmc-app/
          rm -rf /var/www/cmc-app/publish

          echo ""
          echo "🗄️  Setting up Database..."

          # Create production environment file
          cat > /var/www/cmc-app/.env << EOF
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          PGADMIN_EMAIL=${{ secrets.PGLADMIN_EMAIL }}
          PGADMIN_PASSWORD=${{ secrets.PGLADMIN_PASSWORD }}
          ASPNETCORE_ENVIRONMENT=Production
          EOF

          # Stop and remove existing container if it exists
          docker stop cmc-postgres-prod 2>/dev/null || true
          docker rm cmc-postgres-prod 2>/dev/null || true

          # Start PostgreSQL with Docker
          echo "🐳 Starting PostgreSQL container..."
          docker run -d \
            --name cmc-postgres-prod \
            --restart unless-stopped \
            -e POSTGRES_USER=cmc_user \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            -e POSTGRES_DB=cmc_production \
            -p 127.0.0.1:5432:5432 \
            -v cmc_postgres_data:/var/lib/postgresql/data \
            postgres:15

          echo "⏳ Waiting for database to start..."
          sleep 30

          echo ""
          echo "⚙️  Setting up Systemd Service..."

          # Stop existing service
          sudo systemctl stop cmc-app.service 2>/dev/null || true

          # Create systemd service file
          sudo tee /etc/systemd/system/cmc-app.service > /dev/null << EOF
          [Unit]
          Description=CMC Cybersecurity Management Cockpit
          After=network.target

          [Service]
          Type=simple
          WorkingDirectory=/var/www/cmc-app
          ExecStart=/usr/bin/dotnet /var/www/cmc-app/CMC.Web.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=cmc-app
          User=$USER
          Group=$USER
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5000
          Environment=DOTNET_USE_POLLING_FILE_WATCHER=true

          [Install]
          WantedBy=multi-user.target
          EOF

          # Set proper ownership
          sudo chown -R $USER:$USER /var/www/cmc-app

          # Enable service
          sudo systemctl daemon-reload
          sudo systemctl enable cmc-app.service

          echo ""
          echo "🌐 Setting up Nginx for Port 80..."

          # Create Nginx configuration
          sudo tee /etc/nginx/sites-available/cmc-app > /dev/null << 'EOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;

              # Security Headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;

              # Gzip Compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

              # Static Files
              location ~* \.(css|js|ico|png|jpg|jpeg|gif|webp|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  try_files $uri =404;
              }

              # Blazor SignalR Hub
              location /_blazor {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_buffering off;
                  proxy_read_timeout 100s;
              }

              # API Routes
              location /api/ {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Main Application
              location / {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  client_max_body_size 10M;
              }

              # Logs
              access_log /var/log/nginx/cmc-app.access.log;
              error_log /var/log/nginx/cmc-app.error.log;
          }
          EOF

          # Enable site and remove default
          sudo ln -sf /etc/nginx/sites-available/cmc-app /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default

          # Test and reload Nginx
          sudo nginx -t && sudo systemctl reload nginx

          echo ""
          echo "🚀 Starting Application..."

          # Start the application
          sudo systemctl start cmc-app.service

          # Clean up
          rm -f /tmp/source-code.tar.gz

          echo ""
          echo "✅ Deployment completed successfully!"
          echo "=================================="
          echo "🌐 Application URL: http://${{ secrets.HETZNER_HOST }}"
          echo "🧪 Test Login: test@example.com / password123"
          echo ""
          echo "📊 Status Check Commands:"
          echo "   sudo systemctl status cmc-app.service"
          echo "   sudo systemctl status nginx"
          echo "   docker ps"
          echo "   curl -I http://localhost"
          echo ""
          echo "📋 Logs:"
          echo "   sudo journalctl -u cmc-app.service -f"
          echo "   sudo tail -f /var/log/nginx/cmc-app.error.log"
