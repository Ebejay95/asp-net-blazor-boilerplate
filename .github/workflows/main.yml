name: CI Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create clean source archive
        run: |
          set -euo pipefail
          echo "Creating source code archive..."
          mkdir -p /tmp/clean-source
          rsync -av \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='bin/' \
            --exclude='obj/' \
            --exclude='*/bin/' \
            --exclude='*/obj/' \
            --exclude='*.user' \
            --exclude='.vs/' \
            --exclude='.vscode/' \
            --exclude='node_modules/' \
            ./ /tmp/clean-source/
          cd /tmp
          tar -czf source-code.tar.gz clean-source/
          mv source-code.tar.gz "$GITHUB_WORKSPACE/"

      - name: Upload source code
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "source-code.tar.gz"
          target: "/tmp/"
          timeout: 60s
          overwrite: true

      - name: Deploy & Setup (one shot)
        uses: appleboy/ssh-action@v1.0.0
        env:                                   # <-- NEU: Secret in ENV injizieren
          SUDO_PASS: ${{ secrets.SUDO_PASS }}  # <-- DAMIT $SUDO_PASS existiert
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          envs: SUDO_PASS                      # <-- diese Namen werden zur Remote-Session durchgereicht
          script: |
            set -euo pipefail
            echo "=== Starting Production Setup ==="

            echo "$SUDO_PASS" | sudo -S mkdir -p /var/www/cmc-app
            echo "$SUDO_PASS" | sudo -S chown $USER:$USER /var/www/cmc-app

            cd /var/www/cmc-app
            tar -xzf /tmp/source-code.tar.gz --strip-components=1
            echo "✅ Source code extracted"

            echo "$SUDO_PASS" | sudo -S apt update
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              echo "$SUDO_PASS" | sudo -S sh get-docker.sh
              echo "$SUDO_PASS" | sudo -S systemctl enable --now docker
            fi
            if ! command -v dotnet >/dev/null 2>&1; then
              wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S dpkg -i packages-microsoft-prod.deb
              rm -f packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S apt update
              echo "$SUDO_PASS" | sudo -S apt install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
            fi
            if ! command -v nginx >/dev/null 2>&1; then
              echo "$SUDO_PASS" | sudo -S apt install -y nginx
              echo "$SUDO_PASS" | sudo -S systemctl enable --now nginx
            fi

            dotnet restore
            dotnet publish src/CMC.Web/CMC.Web.csproj --configuration Release --output /var/www/cmc-app/publish --no-restore
            cp -r /var/www/cmc-app/publish/* /var/www/cmc-app/
            rm -rf /var/www/cmc-app/publish

            # .env  -> ACHTUNG: Secret-Namen prüfen!
            cat > /var/www/cmc-app/.env << EOF
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            PGADMIN_EMAIL=${{ secrets.PGADMIN_EMAIL }}
            PGADMIN_PASSWORD=${{ secrets.PGADMIN_PASSWORD }}
            ASPNETCORE_ENVIRONMENT=Production
            EOF

            echo "$SUDO_PASS" | sudo -S docker stop cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker rm cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker run -d --name cmc-postgres-prod --restart unless-stopped \
              -e POSTGRES_USER=cmc_user \
              -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              -e POSTGRES_DB=cmc_production \
              -p 127.0.0.1:5432:5432 \
              -v cmc_postgres_data:/var/lib/postgresql/data \
              postgres:15

            sleep 30

            echo "$SUDO_PASS" | sudo -S systemctl stop cmc-app.service 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S bash -c 'cat > /etc/systemd/system/cmc-app.service << SVC
            [Unit]
            Description=CMC Cybersecurity Management Cockpit
            After=network.target
            [Service]
            Type=simple
            WorkingDirectory=/var/www/cmc-app
            ExecStart=/usr/bin/dotnet /var/www/cmc-app/CMC.Web.dll
            Restart=always
            RestartSec=10
            KillSignal=SIGINT
            SyslogIdentifier=cmc-app
            User='"$USER"'
            Group='"$USER"'
            Environment=ASPNETCORE_ENVIRONMENT=Production
            Environment=ASPNETCORE_URLS=http://localhost:5000
            [Install]
            WantedBy=multi-user.target
            SVC'
            echo "$SUDO_PASS" | sudo -S chown -R $USER:$USER /var/www/cmc-app
            echo "$SUDO_PASS" | sudo -S systemctl daemon-reload
            echo "$SUDO_PASS" | sudo -S systemctl enable cmc-app.service

            echo "$SUDO_PASS" | sudo -S bash -c 'cat > /etc/nginx/sites-available/cmc-app << EOF
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;
                gzip on; gzip_vary on; gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
                location ~* \.(css|js|ico|png|jpg|jpeg|gif|webp|svg|woff|woff2|ttf|eot)$ { expires 1y; add_header Cache-Control "public, immutable"; try_files \$uri =404; }
                location /_blazor {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_buffering off;
                    proxy_read_timeout 100s;
                }
                location /api/ { proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Host \$host; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \$scheme; }
                location / { proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Host \$host; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \$scheme; client_max_body_size 10M; }
                access_log /var/log/nginx/cmc-app.access.log;
                error_log /var/log/nginx/cmc-app.error.log;
            }
            EOF'
            echo "$SUDO_PASS" | sudo -S ln -sf /etc/nginx/sites-available/cmc-app /etc/nginx/sites-enabled/cmc-app
            echo "$SUDO_PASS" | sudo -S rm -f /etc/nginx/sites-enabled/default
            echo "$SUDO_PASS" | sudo -S nginx -t
            echo "$SUDO_PASS" | sudo -S systemctl reload nginx

            echo "$SUDO_PASS" | sudo -S systemctl start cmc-app.service
            rm -f /tmp/source-code.tar.gz

