name: CI Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore

      # - name: Test
      #   run: dotnet test --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Wichtig: Archiv aus dem Git-Snapshot, damit nichts währenddessen "sich ändert"
      - name: Create source tarball from HEAD
        run: |
          git archive --format=tar.gz -o source-code.tar.gz HEAD

      - name: Upload files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            source-code.tar.gz
            deployment-scripts/cmc-app.service
          target: /tmp

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail

            APP_DIR="/var/www/cmc-app"
            SUDO_PASS='${{ secrets.SUDO_PASS }}'
            POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'

            echo "=== Starting Production Setup ==="

            # --- App-Verzeichnis + Code
            echo "$SUDO_PASS" | sudo -S mkdir -p "$APP_DIR"
            echo "$SUDO_PASS" | sudo -S chown "$USER:$USER" "$APP_DIR"
            cd "$APP_DIR"
            tar -xzf /tmp/source-code.tar.gz --strip-components=1
            echo "✅ Source code extracted"

            # --- Basis-Pakete
            echo "$SUDO_PASS" | sudo -S apt-get update
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              echo "$SUDO_PASS" | sudo -S sh get-docker.sh
              echo "$SUDO_PASS" | sudo -S systemctl enable --now docker
            fi
            if ! command -v dotnet >/dev/null 2>&1; then
              wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S dpkg -i packages-microsoft-prod.deb
              rm -f packages-microsoft-prod.deb
              echo "$SUDO_PASS" | sudo -S apt-get update
              echo "$SUDO_PASS" | sudo -S apt-get install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
            fi
            if ! command -v nginx >/dev/null 2>&1; then
              echo "$SUDO_PASS" | sudo -S apt-get install -y nginx
              echo "$SUDO_PASS" | sudo -S systemctl enable --now nginx
            fi
            if ! command -v node >/dev/null 2>&1; then
              echo "$SUDO_PASS" | sudo -S apt-get install -y ca-certificates curl gnupg
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              echo "$SUDO_PASS" | sudo -S apt-get install -y nodejs
            fi

            # --- Tailwind v4 Build (Prod)
            echo "🎨 Tailwind build (prod)…"
            cd "$APP_DIR/src/CMC.Web"
            npx @tailwindcss/cli@latest -i ./Styles/app.css -o ./wwwroot/style.css --minify
            test -s ./wwwroot/style.css || (echo "❌ Tailwind output missing/empty" && exit 1)
            echo "✅ Tailwind built"

            # --- .NET publish
            cd "$APP_DIR"
            dotnet restore
            dotnet publish src/CMC.Web/CMC.Web.csproj -c Release -o "$APP_DIR/publish" --no-restore
            cp -r "$APP_DIR/publish/"* "$APP_DIR/"
            rm -rf "$APP_DIR/publish"
            echo "$SUDO_PASS" | sudo -S chown -R "$USER:$USER" "$APP_DIR"

            # --- Postgres-Container (127.0.0.1 only)
            echo "$SUDO_PASS" | sudo -S docker stop cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker rm   cmc-postgres-prod 2>/dev/null || true
            echo "$SUDO_PASS" | sudo -S docker run -d --name cmc-postgres-prod --restart unless-stopped \
              -e POSTGRES_USER=cmc_user \
              -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
              -e POSTGRES_DB=cmc_production \
              -p 127.0.0.1:5432:5432 \
              -v cmc_postgres_data:/var/lib/postgresql/data \
              postgres:15
            # Warten bis DB bereit
            for i in {1..30}; do
              if sudo docker exec cmc-postgres-prod pg_isready -U cmc_user -d cmc_production >/dev/null 2>&1; then
                echo "✅ Postgres ready"; break
              fi
              sleep 2
            done

            # --- systemd Unit aus Repo (secrets-frei)
            echo "$SUDO_PASS" | sudo -S install -m 0644 /tmp/deployment-scripts/cmc-app.service /etc/systemd/system/cmc-app.service
            echo "$SUDO_PASS" | sudo -S systemctl enable cmc-app.service

            # --- Drop-In mit Secrets (stabil via printf)
            echo "$SUDO_PASS" | sudo -S mkdir -p /etc/systemd/system/cmc-app.service.d
            echo "$SUDO_PASS" | sudo -S bash -c "printf '%s\n' \
              '[Service]' \
              'Environment=ASPNETCORE_ENVIRONMENT=Production' \
              'Environment=ASPNETCORE_URLS=http://localhost:5000' \
              'Environment=POSTGRES_HOST=127.0.0.1' \
              'Environment=POSTGRES_PORT=5432' \
              'Environment=POSTGRES_USER=cmc_user' \
              'Environment=POSTGRES_PASSWORD=${POSTGRES_PASSWORD}' \
              'Environment=ConnectionStrings__DefaultConnection=Host=127.0.0.1;Port=5432;Database=cmc_production;Username=cmc_user;Password=${POSTGRES_PASSWORD};Pooling=true;SSL Mode=Disable;Trust Server Certificate=true;' \
              > /etc/systemd/system/cmc-app.service.d/override.conf"

            echo "$SUDO_PASS" | sudo -S systemctl daemon-reload
            echo "$SUDO_PASS" | sudo -S systemctl restart cmc-app.service

            # --- Nginx testen & reload (falls Site konfiguriert ist)
            echo "$SUDO_PASS" | sudo -S nginx -t || true
            echo "$SUDO_PASS" | sudo -S systemctl reload nginx || true

            echo "=============================================="
            echo "✅ Deployment finished."
            echo "=============================================="
