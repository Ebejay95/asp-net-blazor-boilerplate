name: Simple Source Code Deployment

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-source:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Create clean source archive
      run: |
        echo "Creating source code archive..."

        # Copy files to a clean directory
        mkdir -p ../clean-source
        cp -r . ../clean-source/

        # Remove unwanted files from clean copy
        cd ../clean-source
        rm -rf .git .github bin obj ***/bin ***/obj *.user .vs .vscode node_modules

        # Create archive
        cd ..
        tar -czf source-code.tar.gz clean-source/

        # Move back to original directory
        mv source-code.tar.gz $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE

        echo "Archive created:"
        ls -la source-code.tar.gz
        echo "Archive size:"
        du -h source-code.tar.gz

    - name: Upload source code to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.SSH_PRIVATE_KEY_USER_PW }}
        source: "source-code.tar.gz"
        target: "/tmp/"
        timeout: 60s
        debug: true
        overwrite: true

    - name: Build and deploy on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.SSH_PRIVATE_KEY_USER_PW }}
        timeout: 300s
        command_timeout: 15m
        script: |
          echo "=== Starting Source Code Deployment ==="

          # Check if source was uploaded
          if [ ! -f "/tmp/source-code.tar.gz" ]; then
            echo "ERROR: Source code not uploaded!"
            exit 1
          fi

          echo "Source archive info:"
          ls -la /tmp/source-code.tar.gz

          # Stop application
          sudo systemctl stop meineapp.service 2>/dev/null || echo "Service not running"

          # Backup current deployment
          if [ -d "/var/www/cmc-app" ]; then
            sudo mv /var/www/cmc-app /var/www/cmc-app-backup-$(date +%Y%m%d_%H%M%S)
            echo "Created backup"
          fi

          # Create working directory
          sudo mkdir -p /var/www/cmc-app
          cd /var/www/cmc-app

          # Extract source code
          echo "Extracting source code..."
          sudo tar -xzf /tmp/source-code.tar.gz --strip-components=1

          echo "Source code extracted. Contents:"
          ls -la

          # Install .NET if not available
          if ! command -v dotnet &> /dev/null; then
            echo "Installing .NET 8..."
            wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
            chmod +x ./dotnet-install.sh
            ./dotnet-install.sh --channel 8.0
            export PATH="$PATH:$HOME/.dotnet"
            export DOTNET_ROOT="$HOME/.dotnet"
          fi

          echo "Using .NET version:"
          dotnet --version

          echo "=== Building Application ==="

          # Restore dependencies
          echo "Restoring dependencies..."
          dotnet restore

          # Build application
          echo "Building application..."
          dotnet build --configuration Release

          # Publish application
          echo "Publishing application..."
          dotnet publish src/CMC.Web/CMC.Web.csproj -c Release -o ./published

          echo "Published files:"
          ls -la ./published/

          # Set proper permissions
          sudo chown -R www-data:www-data /var/www/cmc-app 2>/dev/null || sudo chown -R $USER:$USER /var/www/cmc-app

          # Create or update systemd service
          echo "Setting up systemd service..."
          sudo tee /etc/systemd/system/meineapp.service > /dev/null <<EOF
          [Unit]
          Description=CMC Web Application
          After=network.target

          [Service]
          Type=notify
          ExecStart=/usr/bin/dotnet /var/www/cmc-app/published/CMC.Web.dll
          Restart=always
          RestartSec=5
          User=www-data
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5000
          Environment=DOTNET_ROOT=/usr/share/dotnet
          WorkingDirectory=/var/www/cmc-app/published

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo systemctl daemon-reload
          sudo systemctl enable meineapp.service

          # Start service
          echo "Starting application..."
          sudo systemctl start meineapp.service
          sleep 5

          # Check service status
          echo "=== Service Status ==="
          sudo systemctl status meineapp.service --no-pager -l

          # Test application
          echo "=== Testing Application ==="
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "HTTP Status: $response"

          if [ "$response" = "200" ]; then
            echo "✅ Application is responding successfully!"
          else
            echo "⚠️ Application may not be ready yet. Checking logs..."
            sudo journalctl -u meineapp.service -n 20 --no-pager
          fi

          # Clean up
          rm /tmp/source-code.tar.gz

          echo "=== Deployment Complete ==="
          echo "Application should be running at http://localhost:5000"
