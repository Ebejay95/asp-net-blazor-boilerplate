name: CI Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore

      # - name: Test
      #   run: dotnet test --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create clean source archive
        run: |
          echo "Creating source code archive..."
          mkdir -p /tmp/clean-source
          rsync -av \
            --exclude='.git/' --exclude='.github/' \
            --exclude='bin/' --exclude='obj/' \
            --exclude='*/bin/' --exclude='*/obj/' \
            --exclude='.vs/' --exclude='.vscode/' \
            --exclude='node_modules/' \
            --exclude='*.user' \
            ./ /tmp/clean-source/
          ( cd /tmp && tar -czf source-code.tar.gz clean-source/ )
          mv /tmp/source-code.tar.gz "$GITHUB_WORKSPACE/"
          ls -lh source-code.tar.gz

      - name: Upload source code
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: source-code.tar.gz
          target: /tmp
          overwrite: true
          timeout: 60s

      - name: Deploy on server (extract, build, systemd, nginx, db)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 900s
          script: |
            echo "=== Starting Production Setup ==="

            SUDO="sudo -S"
            if [ -n "${{ secrets.SUDO_PASS }}" ]; then
              SUDO="echo '${{ secrets.SUDO_PASS }}' | sudo -S"
            fi

            # --- Packages (Docker, .NET, Nginx, Node 20) ---
            $SUDO apt-get update -y
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              $SUDO sh get-docker.sh
              $SUDO systemctl enable --now docker
            fi
            if ! command -v dotnet >/dev/null 2>&1; then
              wget https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
              $SUDO dpkg -i packages-microsoft-prod.deb
              rm packages-microsoft-prod.deb
              $SUDO apt-get update -y
              $SUDO apt-get install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
            fi
            if ! command -v nginx >/dev/null 2>&1; then
              $SUDO apt-get install -y nginx
              $SUDO systemctl enable --now nginx
            fi
            # Node 20 für Tailwind
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | $SUDO -E bash -
              $SUDO apt-get install -y nodejs
            fi

            # --- App Verzeichnis vorbereiten ---
            $SUDO mkdir -p /var/www/cmc-app
            $SUDO chown "$USER":"$USER" /var/www/cmc-app
            cd /var/www/cmc-app
            rm -rf ./*

            # --- Source entpacken ---
            tar -xzf /tmp/source-code.tar.gz --strip-components=1
            echo "✅ Source code extracted"

            # --- Tailwind v4 Build (npx) ---
            cd /var/www/cmc-app/src/CMC.Web
            npx @tailwindcss/cli@latest -i ./Styles/app.css -o ./wwwroot/style.css --minify
            test -s ./wwwroot/style.css || (echo "❌ Tailwind build failed: style.css empty" && exit 1)
            echo "✅ Tailwind built"

            # --- .NET Publish ---
            cd /var/www/cmc-app
            dotnet restore
            dotnet publish src/CMC.Web/CMC.Web.csproj -c Release -o /var/www/cmc-app/publish --no-restore
            cp -r /var/www/cmc-app/publish/* /var/www/cmc-app/
            rm -rf /var/www/cmc-app/publish
            echo "✅ .NET published"

            # --- Postgres Container (prod) ---
            docker rm -f cmc-postgres-prod 2>/dev/null || true
            docker volume create cmc_postgres_data >/dev/null
            docker run -d --name cmc-postgres-prod --restart unless-stopped \
              -e POSTGRES_USER=cmc_user \
              -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              -e POSTGRES_DB=cmc_production \
              -p 127.0.0.1:5432:5432 \
              -v cmc_postgres_data:/var/lib/postgresql/data \
              postgres:15
            echo "⏳ Waiting for Postgres..."
            sleep 20

            # --- systemd Unit + Drop-In mit Env/ConnectionString ---
            $SUDO bash -c 'cat > /etc/systemd/system/cmc-app.service <<EOF
            [Unit]
            Description=CMC Cybersecurity Management Cockpit
            After=network.target

            [Service]
            Type=simple
            WorkingDirectory=/var/www/cmc-app
            ExecStart=/usr/bin/dotnet /var/www/cmc-app/CMC.Web.dll
            Restart=always
            RestartSec=10
            User='"$USER"'
            Group='"$USER"'
            # Basis-Umgebung
            Environment=ASPNETCORE_ENVIRONMENT=Production
            Environment=ASPNETCORE_URLS=http://localhost:5000
            Environment=DOTNET_USE_POLLING_FILE_WATCHER=true

            [Install]
            WantedBy=multi-user.target
            EOF'

            $SUDO mkdir -p /etc/systemd/system/cmc-app.service.d
            $SUDO bash -c 'cat > /etc/systemd/system/cmc-app.service.d/override.conf <<EOF
            [Service]
            Environment=POSTGRES_HOST=127.0.0.1
            Environment=POSTGRES_PORT=5432
            Environment=POSTGRES_USER=cmc_user
            Environment=POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
            Environment=ConnectionStrings__DefaultConnection=Host=127.0.0.1;Port=5432;Database=cmc_production;Username=cmc_user;Password='${{ secrets.POSTGRES_PASSWORD }}';Pooling=true;SSL Mode=Disable;Trust Server Certificate=true;
            EOF'

            $SUDO systemctl daemon-reload
            $SUDO systemctl enable cmc-app.service
            $SUDO systemctl restart cmc-app.service

            # --- Nginx Reverse Proxy 80 -> 5000 ---
            $SUDO bash -c "cat > /etc/nginx/sites-available/cmc-app <<'NGX'
            server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;

              add_header X-Frame-Options 'SAMEORIGIN' always;
              add_header X-XSS-Protection '1; mode=block' always;
              add_header X-Content-Type-Options 'nosniff' always;

              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

              location ~* \.(css|js|ico|png|jpg|jpeg|gif|webp|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control 'public, immutable';
                try_files $uri =404;
              }

              location /_blazor {
                proxy_pass http://localhost:5000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_buffering off;
                proxy_read_timeout 100s;
              }

              location /api/ {
                proxy_pass http://localhost:5000;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }

              location / {
                proxy_pass http://localhost:5000;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                client_max_body_size 10M;
              }

              access_log /var/log/nginx/cmc-app.access.log;
              error_log  /var/log/nginx/cmc-app.error.log;
            }
            NGX"

            $SUDO ln -sf /etc/nginx/sites-available/cmc-app /etc/nginx/sites-enabled/cmc-app
            $SUDO rm -f /etc/nginx/sites-enabled/default
            $SUDO nginx -t
            $SUDO systemctl reload nginx

            # Cleanup
            rm -f /tmp/source-code.tar.gz || true

            echo "✅ Deployment done. Check:"
            echo " - systemctl status cmc-app.service"
            echo " - sudo journalctl -u cmc-app.service -n 100 --no-pager"
            echo " - curl -I http://localhost"
